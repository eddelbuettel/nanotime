{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Nanosecond-Resolution Time Objects for R Motivation R has excellent tools for dates and times. The Date and POSIXct classes (as well as the 'wide' representation in POSIXlt ) are versatile, and a lot of useful tooling has been built around them. However, POSIXct is implemented as a double with fractional seconds since the epoch. Given the 53 bits accuracy, it leaves just a bit less than microsecond resolution. Furthermore, using floating-point arithmetic for an integer concept opens the door to painful issues of error accumulation. More and more performance measurements, latency statistics, etc., are now measured more finely, and we need nanosecond resolution for which commonly an integer64 is used to represent nanoseconds since the epoch. And while R does not have a native type for this, the bit64 package by Jens Oehlschl\u00e4gel offers a performant one implemented as a lightweight S3 class. So this package uses the integer64 class, along with multiple helper functions for parsing and formatting at nano-second resolution from the RcppCCTZ package which wraps the CCTZ library from Google. CCTZ is a modern C++11 library extending the (C++11-native) chrono type. In addition to the point-in-time type nanotime , this package also provides an interval type nanoival which may have open or closed start/end, a period type nanoperiod that is a human representation of time, such as day, month, etc., and a duration type nanoduration . These types are similar to what the lubridate package proposes. Set and arithmetic operations on these types are available. All functionality is designed to correctly handle instances across different time zones. Because these temporal types are based on R built-in types, most functions have an efficient implementation and the types are suitable for use in data.frame and data.table . nanotime is also a better choice than the native POSIXct in most of the cases where fractional seconds are needed because it avoids floating point issues. Documentation Package documentation, help pages, a vignette, and more is available here . Demo See the included demo script nanosecondDelayExample.R for a (completely simulated and hence made-up) study of network latency measured in nanoseconds resulting in the figure below Examples Simple Parsing and Arithmetic R> x <- as.nanotime(\"1970-01-01T00:00:00.000000001+00:00\") R> x [1] \"1970-01-01T00:00:00.000000001+00:00\" R> x + 1e9 [1] \"1970-01-01T00:00:01.000000001+00:00\" R> as.nanotime(\"2020-03-21 Europe/London\") [1] 2020-03-21T00:00:00+00:00 Vectorised R> options(\"width\"=60) R> v <- nanotime(Sys.time()) + 1:5 R> v [1] 2020-03-22T03:09:20.732122001+00:00 [2] 2020-03-22T03:09:20.732122002+00:00 [3] 2020-03-22T03:09:20.732122003+00:00 [4] 2020-03-22T03:09:20.732122004+00:00 [5] 2020-03-22T03:09:20.732122005+00:00 R> Use with zoo R> library(zoo) R> z <- zoo(cbind(A=1:5, B=5:1), v) R> options(nanotimeFormat=\"%H:%M:%E*S\") ## override default format R> z R> options(nanotimeFormat=NULL) ## go back to default format R> z Use with data.table R> library(data.table) R> dt <- data.table(v, cbind(A=1:5, B=5:1)) R> fwrite(dt, file=\"datatableTest.csv\") # write out R> dtcheck <- fread(\"datatableTest.csv\") # read back R> dtcheck R> dtcheck[, v:=nanotime(v)] # read as a string, need to re-class as nanotime R> fread(\"../datatableTest.csv\", colClasses=c(\"nanotime\", \"integer\", \"integer\")) Use with data.frame This requires version 0.0.2 or later. R> data.frame(cbind(A=1:5, B=5:1), v=v) Intervals R> ival <- as.nanoival(\"+2009-01-01 13:12:00 America/New_York -> 2009-02-01 15:11:03 America/New_York-\") R> ival [1] +2009-01-01T18:12:00+00:00 -> 2009-02-01T20:11:03+00:00- R> start <- nanotime(\"2009-01-01 13:12:00 America/New_York\") R> end <- nanotime(\"2009-02-01 15:11:00 America/New_York\") R> nanoival(start, end) # by default sopen=F,eopen=T [1] +2009-01-01T18:12:00+00:00 -> 2009-02-01T20:11:00+00:00- R> nanoival(start, end, sopen=FALSE, eopen=TRUE) [1] +2009-01-01T18:12:00+00:00 -> 2009-02-01T20:11:00+00:00- R> intersect(as.nanoival(\"+2019-03-01 UTC -> 2020-03-01 UTC-\"), as.nanoival(\"+2020-01-01 UTC -> 2020-06-01 UTC-\")) [1] +2020-01-01T00:00:00+00:00 -> 2020-03-01T00:00:00+00:00- R> union(as.nanoival(\"+2019-03-01 UTC -> 2020-03-01 UTC-\"), as.nanoival(\"+2020-01-01 UTC -> 2020-06-01 UTC-\")) [1] +2019-03-01T00:00:00+00:00 -> 2020-06-01T00:00:00+00:00- R> setdiff(as.nanoival(\"+2019-03-01 UTC -> 2020-03-01 UTC-\"), as.nanoival(\"+2020-01-01 UTC -> 2020-06-01 UTC-\")) [1] +2019-03-01T00:00:00+00:00 -> 2020-01-01T00:00:00+00:00- Periods R> as.nanoperiod(\"1y1m1w1d/01:01:01.000_000_001\") [1] 13m8d/01:01:01.000_000_001 R> nanoperiod(months=13, days=-1, duration=\"01:00:00\") [1] 13m-1d/01:00:00 R> ones <- as.nanoperiod(\"1y1m1w1d/01:01:01.000_000_001\") R> nanoperiod.month(ones); nanoperiod.day(ones); nanoperiod.nanoduration(ones) [1] 13 [1] 8 [1] 01:01:01.000_000_001 R> plus(v, as.nanoperiod(\"1y1m\"), tz=\"UTC\") [1] 2021-04-22T03:09:20.732122001+00:00 [2] 2021-04-22T03:09:20.732122002+00:00 [3] 2021-04-22T03:09:20.732122003+00:00 [4] 2021-04-22T03:09:20.732122004+00:00 [5] 2021-04-22T03:09:20.732122005+00:00 Durations R> nanoduration(hours=1, minutes=1, seconds=1, nanoseconds=1) R> as.nanoduration(\"00:00:01\") R> as.nanoduration(\"-00:00:01\") R> as.nanoduration(\"100:00:00\") R> as.nanoduration(\"00:00:00.000_000_001\") Sequences R> from <- as.nanotime(\"2018-09-14T12:44:00+00:00\") R> seq(from, by=as.nanoperiod(\"1y\"), length.out=4, tz=\"Europe/London\") [1] 2018-09-14T12:44:00+00:00 [2] 2019-09-14T12:44:00+00:00 [3] 2020-09-14T12:44:00+00:00 [4] 2021-09-14T12:44:00+00:00 Technical Details The bit64 package (by Jens Oehlschl\u00e4gel ) supplies the integer64 type used to store the nanosecond resolution time as (positive or negative) offsets to the epoch of January 1, 1970. The RcppCCTZ package supplies the formatting and parsing routines based on the (modern C++) library CCTZ from Google, when the parsing cannot be done using a fast built-in parser. integer64 is also used for the type nanoduration , whereas nanoival and nanoperiod are stored in a complex , i.e. over 128 bits. Status The package is by now fairly mature, has been rewritten once (to go from S3 to S4) and has recently received a sizeable feature extension. There may still be changes, though there should generally never be breaking ones. The package also has an extensive test suite, and very good code coverage. See the issue tickets for an up to date list of potentially desirable, possibly planned, or at least discussed items. Installation The package is on CRAN and can be installed via a standard install.packages(\"nanotime\") whereas in order to install development versions a remotes::install_github(\"eddelbuettel/nanotime\") # dev version should suffice. Authors Dirk Eddelbuettel and Leonardo Silvestri License GPL (>= 2)","title":"Nanosecond-Resolution Time Objects for R"},{"location":"#nanosecond-resolution-time-objects-for-r","text":"","title":"Nanosecond-Resolution Time Objects for R"},{"location":"#motivation","text":"R has excellent tools for dates and times. The Date and POSIXct classes (as well as the 'wide' representation in POSIXlt ) are versatile, and a lot of useful tooling has been built around them. However, POSIXct is implemented as a double with fractional seconds since the epoch. Given the 53 bits accuracy, it leaves just a bit less than microsecond resolution. Furthermore, using floating-point arithmetic for an integer concept opens the door to painful issues of error accumulation. More and more performance measurements, latency statistics, etc., are now measured more finely, and we need nanosecond resolution for which commonly an integer64 is used to represent nanoseconds since the epoch. And while R does not have a native type for this, the bit64 package by Jens Oehlschl\u00e4gel offers a performant one implemented as a lightweight S3 class. So this package uses the integer64 class, along with multiple helper functions for parsing and formatting at nano-second resolution from the RcppCCTZ package which wraps the CCTZ library from Google. CCTZ is a modern C++11 library extending the (C++11-native) chrono type. In addition to the point-in-time type nanotime , this package also provides an interval type nanoival which may have open or closed start/end, a period type nanoperiod that is a human representation of time, such as day, month, etc., and a duration type nanoduration . These types are similar to what the lubridate package proposes. Set and arithmetic operations on these types are available. All functionality is designed to correctly handle instances across different time zones. Because these temporal types are based on R built-in types, most functions have an efficient implementation and the types are suitable for use in data.frame and data.table . nanotime is also a better choice than the native POSIXct in most of the cases where fractional seconds are needed because it avoids floating point issues.","title":"Motivation"},{"location":"#documentation","text":"Package documentation, help pages, a vignette, and more is available here .","title":"Documentation"},{"location":"#demo","text":"See the included demo script nanosecondDelayExample.R for a (completely simulated and hence made-up) study of network latency measured in nanoseconds resulting in the figure below","title":"Demo"},{"location":"#examples","text":"","title":"Examples"},{"location":"#simple-parsing-and-arithmetic","text":"R> x <- as.nanotime(\"1970-01-01T00:00:00.000000001+00:00\") R> x [1] \"1970-01-01T00:00:00.000000001+00:00\" R> x + 1e9 [1] \"1970-01-01T00:00:01.000000001+00:00\" R> as.nanotime(\"2020-03-21 Europe/London\") [1] 2020-03-21T00:00:00+00:00","title":"Simple Parsing and Arithmetic"},{"location":"#vectorised","text":"R> options(\"width\"=60) R> v <- nanotime(Sys.time()) + 1:5 R> v [1] 2020-03-22T03:09:20.732122001+00:00 [2] 2020-03-22T03:09:20.732122002+00:00 [3] 2020-03-22T03:09:20.732122003+00:00 [4] 2020-03-22T03:09:20.732122004+00:00 [5] 2020-03-22T03:09:20.732122005+00:00 R>","title":"Vectorised"},{"location":"#use-with-zoo","text":"R> library(zoo) R> z <- zoo(cbind(A=1:5, B=5:1), v) R> options(nanotimeFormat=\"%H:%M:%E*S\") ## override default format R> z R> options(nanotimeFormat=NULL) ## go back to default format R> z","title":"Use with zoo"},{"location":"#use-with-datatable","text":"R> library(data.table) R> dt <- data.table(v, cbind(A=1:5, B=5:1)) R> fwrite(dt, file=\"datatableTest.csv\") # write out R> dtcheck <- fread(\"datatableTest.csv\") # read back R> dtcheck R> dtcheck[, v:=nanotime(v)] # read as a string, need to re-class as nanotime R> fread(\"../datatableTest.csv\", colClasses=c(\"nanotime\", \"integer\", \"integer\"))","title":"Use with data.table"},{"location":"#use-with-dataframe","text":"This requires version 0.0.2 or later. R> data.frame(cbind(A=1:5, B=5:1), v=v)","title":"Use with data.frame"},{"location":"#intervals","text":"R> ival <- as.nanoival(\"+2009-01-01 13:12:00 America/New_York -> 2009-02-01 15:11:03 America/New_York-\") R> ival [1] +2009-01-01T18:12:00+00:00 -> 2009-02-01T20:11:03+00:00- R> start <- nanotime(\"2009-01-01 13:12:00 America/New_York\") R> end <- nanotime(\"2009-02-01 15:11:00 America/New_York\") R> nanoival(start, end) # by default sopen=F,eopen=T [1] +2009-01-01T18:12:00+00:00 -> 2009-02-01T20:11:00+00:00- R> nanoival(start, end, sopen=FALSE, eopen=TRUE) [1] +2009-01-01T18:12:00+00:00 -> 2009-02-01T20:11:00+00:00- R> intersect(as.nanoival(\"+2019-03-01 UTC -> 2020-03-01 UTC-\"), as.nanoival(\"+2020-01-01 UTC -> 2020-06-01 UTC-\")) [1] +2020-01-01T00:00:00+00:00 -> 2020-03-01T00:00:00+00:00- R> union(as.nanoival(\"+2019-03-01 UTC -> 2020-03-01 UTC-\"), as.nanoival(\"+2020-01-01 UTC -> 2020-06-01 UTC-\")) [1] +2019-03-01T00:00:00+00:00 -> 2020-06-01T00:00:00+00:00- R> setdiff(as.nanoival(\"+2019-03-01 UTC -> 2020-03-01 UTC-\"), as.nanoival(\"+2020-01-01 UTC -> 2020-06-01 UTC-\")) [1] +2019-03-01T00:00:00+00:00 -> 2020-01-01T00:00:00+00:00-","title":"Intervals"},{"location":"#periods","text":"R> as.nanoperiod(\"1y1m1w1d/01:01:01.000_000_001\") [1] 13m8d/01:01:01.000_000_001 R> nanoperiod(months=13, days=-1, duration=\"01:00:00\") [1] 13m-1d/01:00:00 R> ones <- as.nanoperiod(\"1y1m1w1d/01:01:01.000_000_001\") R> nanoperiod.month(ones); nanoperiod.day(ones); nanoperiod.nanoduration(ones) [1] 13 [1] 8 [1] 01:01:01.000_000_001 R> plus(v, as.nanoperiod(\"1y1m\"), tz=\"UTC\") [1] 2021-04-22T03:09:20.732122001+00:00 [2] 2021-04-22T03:09:20.732122002+00:00 [3] 2021-04-22T03:09:20.732122003+00:00 [4] 2021-04-22T03:09:20.732122004+00:00 [5] 2021-04-22T03:09:20.732122005+00:00","title":"Periods"},{"location":"#durations","text":"R> nanoduration(hours=1, minutes=1, seconds=1, nanoseconds=1) R> as.nanoduration(\"00:00:01\") R> as.nanoduration(\"-00:00:01\") R> as.nanoduration(\"100:00:00\") R> as.nanoduration(\"00:00:00.000_000_001\")","title":"Durations"},{"location":"#sequences","text":"R> from <- as.nanotime(\"2018-09-14T12:44:00+00:00\") R> seq(from, by=as.nanoperiod(\"1y\"), length.out=4, tz=\"Europe/London\") [1] 2018-09-14T12:44:00+00:00 [2] 2019-09-14T12:44:00+00:00 [3] 2020-09-14T12:44:00+00:00 [4] 2021-09-14T12:44:00+00:00","title":"Sequences"},{"location":"#technical-details","text":"The bit64 package (by Jens Oehlschl\u00e4gel ) supplies the integer64 type used to store the nanosecond resolution time as (positive or negative) offsets to the epoch of January 1, 1970. The RcppCCTZ package supplies the formatting and parsing routines based on the (modern C++) library CCTZ from Google, when the parsing cannot be done using a fast built-in parser. integer64 is also used for the type nanoduration , whereas nanoival and nanoperiod are stored in a complex , i.e. over 128 bits.","title":"Technical Details"},{"location":"#status","text":"The package is by now fairly mature, has been rewritten once (to go from S3 to S4) and has recently received a sizeable feature extension. There may still be changes, though there should generally never be breaking ones. The package also has an extensive test suite, and very good code coverage. See the issue tickets for an up to date list of potentially desirable, possibly planned, or at least discussed items.","title":"Status"},{"location":"#installation","text":"The package is on CRAN and can be installed via a standard install.packages(\"nanotime\") whereas in order to install development versions a remotes::install_github(\"eddelbuettel/nanotime\") # dev version should suffice.","title":"Installation"},{"location":"#authors","text":"Dirk Eddelbuettel and Leonardo Silvestri","title":"Authors"},{"location":"#license","text":"GPL (>= 2)","title":"License"},{"location":"changelog/","text":"2025 2025-01-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.11 2025-01-07 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Roll micro version and date * R/nanotime.R (format.nanotime): Index and override NA values prior to CCTZ call, flag after call avoiding a UBSAN warning in client code 2024 2024-10-31 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version and date 2024-10-30 Michael Chirico chiricom@google.com * src/period.cpp: Create `Rcomplex` objects in a more robust way that appeases `Wmissing-braces` compiler warnings on `clang`. 2024-09-16 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.10 2024-09-15 Dirk Eddelbuettel edd@debian.org * demo/ggplot2Example.R: Removed to local/ * demo/00Index: Removed entry for gpplot2Example 2024-09-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version and date * R/nanoival.R (setdiff): Under R 4.5.0, call setdiff for integer64 * R/nanotime.R (setMethod): Under R 4.5.0, define unique method * NAMESPACE: Conditionally export unique * man/nanotime.Rd: Alias unique 2024-08-31 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Authors@R): Added 2024-06-22 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version and date * inst/tinytest/test_nanotime.R: Retire test for Solaris * inst/tinytest/test_nanoperiod.R: Idem * inst/tinytest/test_nanoival.R: Idem * inst/tinytest/test_zoo.R: Idem 2024-06-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.9 2024-06-20 Dirk Eddelbuettel edd@debian.org * inst/tinytest/test_nanotime.R: Condition two tests to not run on arm64 * .github/workflows/ci.yaml (jobs): Add macOS-latest back to matrix 2024-06-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.8 * README.md: Use tinyverse.netlify.app for dependency badge 2024-06-18 Dirk Eddelbuettel edd@debian.org * R/nanotime.R: Simplify one reference to RcppCCTZ * man/nanotime.Rd: Idem * inst/tinytest/test_nanoival.R: Condition some tests on being in an 'extended' run 2024-06-16 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version and date * inst/include/nanotime/interval.hpp: Add extra braces * src/interval.cpp: Updated output stream helper * src/period.cpp: Idem * src/Makevars (CXX_STD): Set C++17 * src/Makevars.win (CXX_STD): Idem * src/Makevars.ucrt: Removed 2024-06-14 Leonardo Silvestri lsilvestr@ztsdb.org * src/Makevars.win: Remove -mno-ms-bitfields 2024-06-13 Leonardo Silvestri lsilvestr@ztsdb.org * inst/include/nanotime/interval.hpp: NA behavior for bitfield 2024-06-11 Leonardo Silvestri lsilvestr@ztsdb.org * inst/include/nanotime/interval.hpp: Initial fix for bitfield * inst/include/nanotime/period.hppL Idem * src/interval.cpp: Idem 2024-06-09 Dirk Eddelbuettel edd@debian.org * README.md: Use tinyverse.netlify.app for dependency badge 2024-05-24 Leonardo Silvestri lsilvestr@ztsdb.org * R/nanoduration.R: duration divided by duration returns double * inst/tinytest/test_nanoduration.R: additional test for the above * inst/include/nanotime/utilities.hpp: Use interface function Rf_asS4 instead of internal SET_S4_OBJECT * src/interval.cpp: Change setting of S4 bit before names assigment 2024-04-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version and date * R/nanoperiod.R: Add missing backslash in code call * man/nanoperiod.Rd: Idem 2024-02-16 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Update to actions/checkout@v4, add r-ci-setup actions 2023 2023-09-26 Leonardo Silvestri lsilvestri@ztsdb.org * R/nanotime.R: Further refinement for default UTC timezone * inst/tinytest/test_nanotime.R: Idem 2023-09-22 Dirk Eddelbuettel edd@debian.org * R/nanotime.R: Provide default UTC timezone in 'as.Date()' * tests/simpleTests.R: Adjist a test accordingly * inst/tinytest/test_nanotime.R: Idem 2023-09-21 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION (Version, Date): Roll minor version * R/nanotime.R: Fixed 'as.Date' to force use of timezone and to allow the timezone argument to be a vector 2023-07-11 Dirk Eddelbuettel edd@debian.org * README.md: Add r-universe badge 2023-07-06 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION (Version, Date): Roll minor version * R/nanotime.R: added parameter 'accurate' to functions 'nanotime' and 'as.nanotime' when the argument is a 'POSIXct'. * inst/tinytest/test_nanotime.R: added tests for 'accurate' parameter. * man/nanotime.Rd: added documentation for 'accurate' parameter. 2023-03-12 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * src/Makevars: No longer set compilation standard * src/Makevars.win: Idem * src/Makevars.ucrt: Idem 2022 2022-12-06 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * R/nanotime.R: Add example for additional format plus reference to \\pkg{RcppCCTZ} documentation which has format details * man/nanotime.Rd: Idem 2022-11-08 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Update to actions/checkout@v3 2022-10-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.7 2022-10-16 Trevor L Davis trevor.l.davis@gmail.com * R/nanoduration.R: Add '+' / '-' methods for 'difftime()' and 'nanoduration()' / 'nanoival()' / 'nanotime()' objects * man/nanoduration.Rd: Updated * inst/tinytest/test_nanoduration.R: Add tests 2022-10-14 Trevor L Davis trevor.l.davis@gmail.com * R/nanoduration.R (as.nanoduration.difftime): Added * man/nanoduration.Rd: Updated * inst/tinytest/test_nanoduration.R: Add tests 2022-10-13 Trevor L Davis trevor.l.davis@gmail.com * R/nanoduration.R (nanoduration): Add default arguments equal to zero * R/nanotime.R: Use 'inherits()' instead of 'class() ==' 2022-10-04 Dirk Eddelbuettel edd@debian.org * docs/mkdmt-src/: Updated for mkdocs-for-material 8.5.5 2022-03-06 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION (Version, Date): Release 0.3.6 * R/nanoival.R: Fix incorrect subsetting with operator `%in%` * NAMESPACE: Added export * man/set_operations.Rd: Added file * src/period.cpp: Fix parse of negative period 2022-03-06 Dirk Eddelbuettel edd@debian.org * R/nanoduration.R: Use 'inherits()' instead of 'class() ==' * R/nanoival.R: Idem * R/nanoperiod.R: Idem * R/nanotime.R: Idem 2021 2021-12-14 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.5 2021-12-09 Dirk Eddelbuettel edd@debian.org * src/Makevars.ucrt: Based on patch by Tomas Kalibera that is part of his changes for the Windows utf8-enhabced ucrt3 builds of R 4.2.0 2021-11-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.4 2021-11-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2021-11-21 Leonardo Silvestri lsilvestri@ztsdb.org * inst/include/nanotime/period.hpp: Regroup and expose nanoperiod interface for use by other packages * src/period.cpp: Moved code to period.hpp header * src/rounding.cpp: Idem 2021-11-17 Dirk Eddelbuettel edd@debian.org * README.md: Remove Travis badge * .travis.yml: Remove Travis YAML config 2021-10-11 Dirk Eddelbuettel edd@debian.org * R/nanoduration.R (all.equal.nanoduration): Remove as.character.nanotime as proper S4 method already defined * R/nanoperiod.R (all.equal.nanoperiod): Idem * NAMESPACE: Removed exports * man/nanoduration.Rd: Updated * man/nanoperiod.Rd: Idem * .codecov.yml (coverage): Ensure PRs will not get a red 'fail' just because coverage metrices dropped a miniscule amount 2021-10-10 Dirk Eddelbuettel edd@debian.org * R/nanoival.R (as.character.nanoival): Added * NAMESPACE: Idem * man/nanoival.Rd: Aliases * R/nanoperiod.R (as.character.nanoperiod): Added * NAMESPACE: Idem * man/nanoperiod.Rd: Aliases * R/nanoduration.R (as.character.nanoduration): * NAMESPACE: Idem * man/nanoduration.Rd: Aliases * inst/tinytest/test_nanotime.R: Add tests * inst/tinytest/test_nanoival.R: Idem * inst/tinytest/test_nanoperiod.R: Idem 2021-10-08 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * R/nanotime.R (as.character.nanotime): Added * NAMESPACE: Idem * man/nanotime.Rd: Aliases 2021-08-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.3 2021-08-08 Leonardo Silvestri lsilvestri@ztsdb.org * src/period.cpp: Fix for `plus` and `minus` adjustment * R/nanoperiod.R: Idem * inst/tinytest/test_nanoperiod.R: Idem * man/nanoperiod.Rd: Idem 2021-04-06 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (URL, BugRreports): Added to DESCRIPTION file 2021-03-28 Dirk Eddelbuettel edd@debian.org * docs/mkdmt-src/: Moved mkdocs-material input 2020 2020-12-30 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml: Rename job from build to ci 2020-12-25 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml: Small tweaks to CI YAML file 2020-12-13 Dirk Eddelbuettel edd@debian.org * README.md: Add CI badge 2020-12-06 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * .travis.yml: Switch to run.sh from r-ci for focal and bspm * .github/workflows/ci.yaml: Use run.sh from r-ci 2020-12-06 Colin Umansky statquant@outlook.com * inst/tinytest/test_nanoduration.R: Added tests for comparison 2020-12-05 Colin Umansky statquant@outlook.com * R/nanoduration.R: Support nanoduration to character comparison * man/nanoduration.Rd: Document new feature * inst/tinytest/test_nanoduration.R: Updated tests 2020-10-25 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * docker/r-devel/Dockerfile: Added for simpler r-devel checks 2020-10-24 Dirk Eddelbuettel edd@debian.org * inst/tinytest/test_nanotime.R: Add explicit check.tzone=FALSE to equality test for POSIXct comparison * inst/tinytest/test_nanoival.R: Renable full tests, add bit64 * inst/tinytest/test_nanoperiod.R: Idem * inst/tinytest/test_nanotime.R: Idem * inst/tinytest/test_ops.R: Idem 2020-09-11 Dirk Eddelbuettel edd@debian.org * docs/: Added package website * README.md: Added badge and short paragraph linking to documentation 2020-09-07 Leonardo Silvestri lsilvestri@ztsdb.org * demo/ggplot2Example.R: Updated and extended demo 2020-09-04 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * demo/ggplot2Example.R: New demo based on Leonardo's example repo 2020-09-03 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.2 2020-09-01 Elliott Sales de Andrade quantum.analyst@gmail.com * inst/include/nanotime/interval.hpp: Correct for big-endian 2020-08-31 Dirk Eddelbuettel edd@debian.org * .travis.yml (install): Back to RcppCCTZ from CRAN 2020-08-30 Dirk Eddelbuettel edd@debian.org * R/nanoival.R: De-activate two examples * R/nanotime.R: Idem * man/nanoival.Rd: Idem * man/nanotime.Rd: Idem * inst/tinytest/test_nanoduration.R: Make some test conditional * inst/tinytest/test_nanoival.R: Idem * inst/tinytest/test_nanoperiod.R: Idem * inst/tinytest/test_nanotime.R: Idem * inst/tinytest/test_ops.R: Idem 2020-08-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * src/interval.cpp: Use RcppCCTZ_API header and exported functions * src/nanotime.cpp: Idem * src/period.cpp: Idem * src/rounding.cpp: Idem * .travis.yml (install): Install RcppCCTZ from GitHub 2020-08-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.1 * R/nanoival.R: Add \\dontrun{} because of Solaris * R/nanoperiod.R: Idem * R/nanotime.R: Idem * man/nano_year.Rd: Idem * man/nanoperiod.Rd: Idem * man/nanotime.Rd: Idem * man/rounding.Rd: Idem * man/seq-nanoival-method.Rd: Idem * man/seq.nanotime.Rd: Idem * inst/tinytest/test_nanoival.R: Skip some tests on Solaris * inst/tinytest/test_nanoperiod.R: Idem * inst/tinytest/test_nanotime.R: Idem 2020-08-08 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version, small edit * src/interval.cpp: Add some tests for non-zero length vectors * inst/tinytest/test_nanotime.R: Skip one test upsetting SAN * tests/tinytest.R: Default back to serial tests * src/strnlen.cpp: Added strnlen_ to help Solaris * inst/include/nanotime/utilities.hpp: Declare it * src/interval.cpp: Use it * src/nanotime.cpp: Idem 2020-08-07 Leonardo Silvestri lsilvestri@ztsdb.org * src/period.cpp: Add extra braces to appease macOS compiler * src/inst/include/nanotime/globals.hpp: Use chrono duration; remove ambiguous time_point and seconds declarations 2020-08-05 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.3.0 2020-08-02 Leonardo Silvestri lsilvestri@ztsdb.org * src/interval.cpp: Use non-throwing RcppCCTZ function * src/nanotime.cpp: Idem * src/period.cpp: Idem * inst/include/nanotime/globals.hpp: More (u)int64_t * R/nanoival.R: Refine error message check * R/nanotime.R: Idem 2020-07-29 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2020-07-29 Leonardo Silvestri lsilvestri@ztsdb.org * src/Makevars.win: Add to set explicit '-mno-ms-bitfields' flag required for bitfield operations on Windows 2020-07-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * inst/NEWS.Rd: Additional entries added 2020-07-20 Leonardo Silvestri lsilvestri@ztsdb.org * vignettes/nanotime/rmd/nanotime-intro.Rmd: Additional edits 2020-07-19 Dirk Eddelbuettel edd@debian.org * vignettes/nanotime/rmd/nanotime-intro.Rmd: Additional edits * vignettes/nanotime/rmd/nanotime-intro.bib: Updated bibliography 2020-07-11 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION (Version, Date): Roll minor version * inst/include/nanotime/duration.hpp: move headers to 'nanotime' and put 'interval' and 'period' in a namespace * directory inst/include/nanotime/globals.hpp: Idem * inst/include/nanotime/interval.hpp: Idem * inst/include/nanotime/period.hpp: Idem * inst/include/nanotime/pseudovector.hpp: Idem * inst/include/nanotime/utilities.hpp: Idem * src/duration.cpp: Idem * src/interval.cpp: Idem * src/nanotime.cpp: Idem * src/period.cpp: Idem * src/rounding.cpp: Idem * src/Makevars: Idem * inst/include/nanotime/pseudovector.hpp: let 'pseudovector' return a different type than the input which gives more flexibility 2020-05-17 Dirk Eddelbuettel edd@debian.org * vignettes/nanotime-intro.pdf: Copy of prebuilt vignette from rmd/ * vignettes/nanotime-introduction.Rnw: Sweave shell for prebuilt vignette * .travis.yml: Switch to bionic, and testing via R 4.0.0 2020-05-16 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION (Version, Date): Roll minor version * R/nanoduration.R: correct NA and negative subsetting; implement 'rep' * R/nanoival.R: Idem * R/nanoperiod.R: Idem * R/nanotime.R: Idem * inst/include/globals.hpp: correct NA and negative subsetting * inst/include/interval.hpp: Idem * inst/include/utilities.hpp: Idem * inst/tinytest/test_nanoduration.R: Idem * inst/tinytest/test_nanoival.R: Idem * inst/tinytest/test_nanoperiod.R: Idem * inst/tinytest/test_nanotime.R: Idem * src/duration.cpp: Idem * src/interval.cpp: Idem * src/nanotime.cpp: Idem * src/period.cpp: Idem * man/rep-nanoduration-method.Rd: document 'rep' * man/rep-nanoival-method.Rd: document 'rep' * man/rep-nanoperiod-method.Rd: document 'rep' * man/rep-nanotime-method.Rd: document 'rep' 2020-05-10 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION (Version, Date): Roll minor version * R/nanoival.R: check param types before invoking C functions; use 'na.rm' in 'is.unsorted' * inst/tinytest/test_nanoival.R: Idem * R/nanoperiod.R: check param types before invoking C functions * R/nanotime.R: Idem * inst/tinytest/test_nanoperiod.R: Idem * src/RcppExports.cpp: Idem * src/interval.cpp: Idem * man/nanotime.Rd: document 'tz' param behaviour in constructor 2020-04-25 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION (Version, Date): Roll minor version * NAMESPACE: Added rounding functions 'nano_floor' and 'nano_ceiling' * R/RcppExports.R: Idem * R/nanoduration.R: Idem * R/nanoperiod.R: Idem * R/nanotime.R: Idem * inst/include/period.hpp: Idem * inst/tinytest/test_nanoduration.R: Idem * inst/tinytest/test_nanoperiod.R: Idem * man/rounding.Rd: Idem * src/RcppExports.cpp: Idem * src/rounding.cpp: Idem * vignettes/nanotime-introduction.Rnw: Wrapper as in anytime * vignettes/nanotime-intro.pdf: Pre-made pdf * vignettes/nanotime/rmd/nanotime-intro.Rmd: New draft vignette * vignettes/nanotime/rmd/nanotime-intro.bib: New bibliography 2020-04-09 Dirk Eddelbuettel edd@debian.org * README.md: Add 'last commit' badge 2020-03-31 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION (Version, Date): Roll minor version * R/nanoduration.R: Added all.equal * R/nanoival.R: Idem * R/nanoperiod.R: Idem * R/nanotime.R: Idem * inst/tinytest/test_nanoduration.R: Idem * inst/tinytest/test_nanoival.R: Idem * inst/tinytest/test_nanoperiod.R: Idem * inst/tinytest/test_nanotime.R: Idem * man/all.equal-nanoperiod-ANY-method.Rd: deleted * man/all.equal.nanotime.Rd: Idem * man/all.equal.nanoduration.Rd: Idem * man/all.equal.nanoival.Rd: Idem * man/all.equal.nanoperiod.Rd: Idem 2020-03-29 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION: fixed 0-length-vector ops * R/RcppExports.R: Idem * R/nanoperiod.R: Idem * inst/include/utilities.hpp: Idem * inst/tinytest/test_nanoival.R: Idem * inst/tinytest/test_nanoperiod.R: Idem * inst/tinytest/test_nanotime.R: Idem * src/RcppExports.cpp: Idem * src/interval.cpp: Idem * src/nanotime.cpp: Idem * src/period.cpp: Idem 2020-03-27 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION: added %in%.nanotime * NAMESPACE: Idem * R/RcppExports.R: Idem * R/nanoival.R: Idem * R/nanoperiod.R: Idem * inst/tinytest/test_nanoival.R: Idem * man/nanoduration.Rd: Idem * man/nanoival.Rd: Idem * man/nanoperiod.Rd: Idem * man/nanotime.Rd: Idem * man/set_operations.Rd: Idem * src/RcppExports.cpp: Idem * src/interval.cpp: Idem 2020-03-25 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * DESCRIPTION (LinkingTo): Add RcppDate providing date.h * src/nanotime.cpp (nanotime_wday_impl): Update one accessor for newer version of date.h * inst/include/date.h: Deleted as no longer needed * .travis.yml (install): Install RcppDate * inst/include/globals.hpp: Add a single #nocov 2020-03-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2020-03-22 Leonardo Silvestri lsilvestri@ztsdb.org * README.md: updated information 2020-03-21 Leonardo Silvestri lsilvestri@ztsdb.org * inst/include/globals.hpp: parse format ending with 'Z' for data.table compatibility * src/period.cpp: fix vectorized 'plus'/'minus' ops for 'nanoperiod' * inst/tinytest/test_nanoperiod.R: Idem 2020-03-20 Dirk Eddelbuettel edd@debian.org * src/duration.cpp: Slightly more idiomatic Rcpp * src/period.cpp: Idem * R/nanoduration.R: Idem * R/nanoperiod.R: Idem * R/nanotime.R: Idem 2020-03-19 Dirk Eddelbuettel edd@debian.org * src/interval.cpp: Slightly more idiomatic Rcpp * R/nanoival.R: Idem 2020-03-18 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * DESCRIPTION (Imports): Updated versioned Depends: on RcppCCTZ * NAMESPACE: Turn on registration * src/nanotime.cpp: Slightly more idiomatic Rcpp * R/nanotime.R: Idem 2020-03-15 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * src/duration.cpp: Small fix to cast to plain old type * src/interval.cpp: Idem * src/nanotime.cpp: Idem * src/Makevars (PKG_CXXFLAGS): Minor edits * cleanup: Added minor helper 2020-03-14 Leonardo Silvestri lsilvestri@ztsdb.org [ The following reflects a fairly substantial set of changes made over a longer period and are just summarized here ] * DESCRIPTION: Add versioned Depends on RcppCCTZ * NAMESPACE: Load dynamic library * R/duration.R: Add new nanoival, duration, and period * R/nanoival.R: Idem * R/nanotime.R: Idem * R/period.R: Idem * inst/include/date.h: Idem * inst/include/duration.hpp: Idem * inst/include/globals.hpp: Idem * inst/include/interval.hpp: Idem * inst/include/period.hpp: Idem * inst/include/pseudovector.hpp: Idem * inst/include/utilities.hpp: Idem * inst/tinytest/test_data.frame.R: Idem * inst/tinytest/test_duration.R: Idem * inst/tinytest/test_nanoival.R: Idem * inst/tinytest/test_nanotime.R: Idem * inst/tinytest/test_ops.R: Idem * inst/tinytest/test_period.R: Idem * man/duration.Rd: Idem * man/nanoival.Rd: Idem * man/nanotime.Rd: Idem * man/period.Rd: Idem * src/Makevars: Idem * src/duration.cpp: Idem * src/interval.cpp: Idem * src/nanotime.cpp: Idem * src/period.cpp: Idem * .travis.yml: For now load development version of RcppCCTZ from GitHub 2019 2019-11-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New minor version * inst/tinytest/test_*.R: Moved from ../unitTest, changed to tinytest * tests/tinytest.R: Add test runner for tinytest * DESCRIPTION (Suggests): Add tinytest, remove RUnit * .travis.yml (install): Add r-cran-tinytest, remove r-cran-runit * tests/runTests.R: Removed RUnit test runner 2019-11-20 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New minor version * R/nanotime.R (as.integer64.nanotime): Adding 'Compare' ops for character and nanotime * inst/unitTests/test_ops.R: Adjust one existing test, and add six new ones for character and nanotime comparisons * man/nanotime.Rd: Document new comparison operators 2019-05-25 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.2.4 2019-05-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * R/nanotime.R (as.integer64.nanotime): Define [[ accessor * inst/unitTests/test_nanotime.R (test_square_bracket): Add test * man/nanotime.Rd: Add alias 2019-04-03 Dirk Eddelbuettel edd@debian.org * README.md: Add dependencies badge 2018 2018-09-30 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.2.3 2018-09-02 Dirk Eddelbuettel edd@debian.org * .travis.yml: Switch Travis CI to R 3.5 repo 2018-08-31 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * inst/unitTests/test_nanotime.R: Skip some tests on Solaris * inst/unitTests/test_zoo.R: Idem 2018-07-18 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.2 * inst/unitTests/test_xts.R: Continue to disable xts tests even after 0.11.0 release 2018-07-01 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.1 2018-06-30 Dirk Eddelbuettel edd@debian.org * R/nanotime.R (format.nanotime): Protect from empty argument 2018-06-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * R/nanotime.R: Two extras casts to integer64 in constructors 2018-04-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2018-04-18 Leonardo Silvestri lsilvestri@ztsdb.org * R/nanotime.R (Compare): Added attribute-preserving comparison * man/nanotime.Rd: Corresponding documentation 2017 2017-06-22 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.0 2017-06-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * DESCRIPTION (Imports): Require RcppCCTZ (>= 0.2.3) * inst/unitTests/test_nanotime.R: No longer condition out Windows * inst/unitTests/test_nanotime.R: Ditto * inst/unitTests/test_xts.R: Ditto * .travis.yml (group): Added as required by Travis CI 2017-06-16 Dirk Eddelbuettel edd@debian.org * R/nanotime.R (nanotime.matrix): Adding '#nocov' tags 2017-06-15 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New minor version * tests/runTests.R: Rewritten test runner * inst/unitTests/test_zoo.R (test_zoo): Condition on zoo present, and test not running under Windows * inst/unitTests/test_xts.R (.setUp): Condition on a 'future' xts version present as we really nedd xts to be nanotime aware for these tests * inst/unitTests/test_nanotime.R: Condition a number of tests on not running under Windows * DESCRIPTION (Suggests): Added 'xts' * .travis.yml (install): Ditto 2017-06-14 Leonardo Silvestri lsilvestri@ztsdb.org * R/nanotime.R: Error on ops not meaningful for type, also fix handling of NA, NAN, Inf, -Inf * man/nanotime.Rd: Corresponding documentation * inst/unitTests/test_nanotime.R: corresponding test 2017-06-05 Leonardo Silvestri lsilvestri@ztsdb.org * R/nanotime.R: Correct summary() by defining 'names<-'; fix 'c' * man/nanotime.Rd: Corresponding documentation * inst/unitTests/test_nanotime.R: corresponding test 2017-06-03 Leonardo Silvestri lsilvestri@ztsdb.org * R/nanotime.R: Prevent print from printing more than options()$max.print 2017-06-02 Leonardo Silvestri lsilvestri@ztsdb.org * R/nanotime.R: Ensure names are kept for nanotime vectors * inst/unitTests/test_nanotime.R: corresponding test 2017-05-02 Leonardo Silvestri lsilvestri@ztsdb.org * R/nanotime.R: Ensure 'tz=\"\"' is treated as missing 2017-04-04 Leonardo Silvestri lsilvestri@ztsdb.org * R/nanotime.R: Remove spurious debug output 2017-03-29 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * man/nanotime.Rd: Minor update * nanotime.Rproj: Use devtools::document to work around a roxygen2 bug with S4 and setOldClass 2017-03-29 Leonardo Silvestri lsilvestri@ztsdb.org [ The following is summary of changes made over several weeks ] * DESCRIPTION: Convert to S4 class * NAMESPACE: Idem * R/nanotime.R: Idem * inst/unitTests/test_data.frame.R: Idem * inst/unitTests/test_nanotime.R: Idem * inst/unitTests/test_ops.R: Idem * inst/unitTests/test_xts.R: Idem * inst/unitTests/test_zoo.R: Idem * man/nanotime-class.Rd: Idem * man/nanotime-package.Rd: Idem * man/nanotime.Rd: Idem * tests/runTests.R: Idem * tests/simpleTests.R: Idem 2017-03-27 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.1.2 2017-02-08 Dirk Eddelbuettel edd@max.eddelbuettel.com * DESCRIPTION (Version, Date): Roll minor version and date * NAMESPACE: Also (re-)export as.integer64 * R/nanotime.R: Added roxygen2 snippet for as.integer64 * man/nanotime.Rd: Documentation 2017-02-04 Dirk Eddelbuettel edd@max.eddelbuettel.com * DESCRIPTION (Version, Date): Release 0.1.1 2017-01-31 Dirk Eddelbuettel edd@debian.org * R/nanotime.R: One more updated format string 2017-01-30 Dirk Eddelbuettel edd@debian.org * R/nanotime.R (format.nanotime): Safer transformation to double (index2char.nanotime): Idem 2017-01-29 Dirk Eddelbuettel edd@debian.org * R/nanotime.R: Additional documentation section on default output format string * .travis.yml (before_install): Use https for curl fetch 2017-01-25 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version and date * R/nanotime.R (nanotime.character): Display of nine dec digits (format.nanotime): Idem (print.nanotime): Dispatch to format.nanotime (thanks, Matt!) (as.integer64.nanotime): New converter to integer64 (Ops.nanotime): Explicit definition with some casts * NAMESPACE: Corresponding exports * man/nanotime.Rd: Corresponding documentation 2017-01-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.1.0 2017-01-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * DESCRIPTION (SystemRequirements, OS_type): Remove constraint on Unix as RcppCCTZ is now available on Windows too * demo/nanosecondDelayExample.R: Add missing library() calls; added save and reload example * README.md: Small edit showing save and reload 2016 2016-12-22 Dirk Eddelbuettel edd@debian.org * README.md: Updated to reflect CRAN status 2016-12-18 Dirk Eddelbuettel edd@debian.org * demo/00Index: New file, demo now in package * demo/nanosecondDelayExample.R: Renamed demo 2016-12-17 Dirk Eddelbuettel edd@debian.org * R/nanotime.R (as.data.frame.nanotime): Documented (nanotime.character): Support tz and fmt options (format.nanotime): Idem (index2char.nanotime): Idem (as.POSIXct.nanotime): Idem (as.POSIXlt.nanotime): Idem * man/nanotime.Rd: Idem * tests/data.frame.R: Added simple data.{frame,table} test * tests/simpleTests.R: Added simple format tests * demo/nanotimeEx.R: Extended somewhat * DESCRIPTION (Suggests): Added data.table * .travis.yml: Added r-cran-data.table 2016-12-16 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Rolled minor version * R/nanotime.R (as.data.frame.nanotime): New method (format.nanotime): Support additional arguments * man/nanotime.Rd: Updated for new method * NAMESPACE: Idem 2016-12-15 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.0.1 * R/nanotime.R (as.POSIXct.nanotime,as.POSIXlt.nanotime) (as.Date.nanotime): New converters (format.nanotime): Add 'justify' argument * man/nanotime.Rd: Document new and updated methods * NAMESPACE: Registered new converters * tests/simpleTests.R: Additional calls to new functions * inst/NEWS.Rd: Added * DESCRIPTION (SystemRequirements): State RcppCCTZ dependency 2016-12-11 Dirk Eddelbuettel edd@debian.org * R/nanotime.R (index2char.nanotime): Added to have zoo() objects print a nanotime index correctly (nanotime.default): Switch class order with integer64 last (print.nanotime): Minor adjustment (format.nanotime): Added (showNanotime): Removed (format.nanotime): Support global option for format * NAMESPACE: Register S3 methods index2char.nanotime, format.nanotime; import two functions from RcppCCTZ (which are now exported) * DESCRIPTION: Now Imports: rather than Suggests: zoo * tests/zooTests.R: Small changes * .travis.yml: Added * .codecov.yml: Ditto * .Rbuildignore: Adjusted accordingly * tests/simpleTests.R: Two more conversions from integer and numeric 2016-12-10 Dirk Eddelbuettel edd@debian.org * tests/zooTests.R: Simple tests for vectorised time operation * R/nanotime.R (print.nanotime): Do not default to character formating here, rather farm out to helper showNanotime (showNanotime): Simple pretty printer * tests/simpleTests.R: Added calls to snowNanotime() 2016-12-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Very initial pre-release 0.0.0","title":"Changelog"},{"location":"changelog/#2025","text":"2025-01-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.11 2025-01-07 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Roll micro version and date * R/nanotime.R (format.nanotime): Index and override NA values prior to CCTZ call, flag after call avoiding a UBSAN warning in client code","title":"2025"},{"location":"changelog/#2024","text":"2024-10-31 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version and date 2024-10-30 Michael Chirico chiricom@google.com * src/period.cpp: Create `Rcomplex` objects in a more robust way that appeases `Wmissing-braces` compiler warnings on `clang`. 2024-09-16 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.10 2024-09-15 Dirk Eddelbuettel edd@debian.org * demo/ggplot2Example.R: Removed to local/ * demo/00Index: Removed entry for gpplot2Example 2024-09-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version and date * R/nanoival.R (setdiff): Under R 4.5.0, call setdiff for integer64 * R/nanotime.R (setMethod): Under R 4.5.0, define unique method * NAMESPACE: Conditionally export unique * man/nanotime.Rd: Alias unique 2024-08-31 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Authors@R): Added 2024-06-22 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version and date * inst/tinytest/test_nanotime.R: Retire test for Solaris * inst/tinytest/test_nanoperiod.R: Idem * inst/tinytest/test_nanoival.R: Idem * inst/tinytest/test_zoo.R: Idem 2024-06-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.9 2024-06-20 Dirk Eddelbuettel edd@debian.org * inst/tinytest/test_nanotime.R: Condition two tests to not run on arm64 * .github/workflows/ci.yaml (jobs): Add macOS-latest back to matrix 2024-06-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.8 * README.md: Use tinyverse.netlify.app for dependency badge 2024-06-18 Dirk Eddelbuettel edd@debian.org * R/nanotime.R: Simplify one reference to RcppCCTZ * man/nanotime.Rd: Idem * inst/tinytest/test_nanoival.R: Condition some tests on being in an 'extended' run 2024-06-16 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version and date * inst/include/nanotime/interval.hpp: Add extra braces * src/interval.cpp: Updated output stream helper * src/period.cpp: Idem * src/Makevars (CXX_STD): Set C++17 * src/Makevars.win (CXX_STD): Idem * src/Makevars.ucrt: Removed 2024-06-14 Leonardo Silvestri lsilvestr@ztsdb.org * src/Makevars.win: Remove -mno-ms-bitfields 2024-06-13 Leonardo Silvestri lsilvestr@ztsdb.org * inst/include/nanotime/interval.hpp: NA behavior for bitfield 2024-06-11 Leonardo Silvestri lsilvestr@ztsdb.org * inst/include/nanotime/interval.hpp: Initial fix for bitfield * inst/include/nanotime/period.hppL Idem * src/interval.cpp: Idem 2024-06-09 Dirk Eddelbuettel edd@debian.org * README.md: Use tinyverse.netlify.app for dependency badge 2024-05-24 Leonardo Silvestri lsilvestr@ztsdb.org * R/nanoduration.R: duration divided by duration returns double * inst/tinytest/test_nanoduration.R: additional test for the above * inst/include/nanotime/utilities.hpp: Use interface function Rf_asS4 instead of internal SET_S4_OBJECT * src/interval.cpp: Change setting of S4 bit before names assigment 2024-04-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version and date * R/nanoperiod.R: Add missing backslash in code call * man/nanoperiod.Rd: Idem 2024-02-16 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Update to actions/checkout@v4, add r-ci-setup actions","title":"2024"},{"location":"changelog/#2023","text":"2023-09-26 Leonardo Silvestri lsilvestri@ztsdb.org * R/nanotime.R: Further refinement for default UTC timezone * inst/tinytest/test_nanotime.R: Idem 2023-09-22 Dirk Eddelbuettel edd@debian.org * R/nanotime.R: Provide default UTC timezone in 'as.Date()' * tests/simpleTests.R: Adjist a test accordingly * inst/tinytest/test_nanotime.R: Idem 2023-09-21 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION (Version, Date): Roll minor version * R/nanotime.R: Fixed 'as.Date' to force use of timezone and to allow the timezone argument to be a vector 2023-07-11 Dirk Eddelbuettel edd@debian.org * README.md: Add r-universe badge 2023-07-06 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION (Version, Date): Roll minor version * R/nanotime.R: added parameter 'accurate' to functions 'nanotime' and 'as.nanotime' when the argument is a 'POSIXct'. * inst/tinytest/test_nanotime.R: added tests for 'accurate' parameter. * man/nanotime.Rd: added documentation for 'accurate' parameter. 2023-03-12 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * src/Makevars: No longer set compilation standard * src/Makevars.win: Idem * src/Makevars.ucrt: Idem","title":"2023"},{"location":"changelog/#2022","text":"2022-12-06 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * R/nanotime.R: Add example for additional format plus reference to \\pkg{RcppCCTZ} documentation which has format details * man/nanotime.Rd: Idem 2022-11-08 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml (jobs): Update to actions/checkout@v3 2022-10-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.7 2022-10-16 Trevor L Davis trevor.l.davis@gmail.com * R/nanoduration.R: Add '+' / '-' methods for 'difftime()' and 'nanoduration()' / 'nanoival()' / 'nanotime()' objects * man/nanoduration.Rd: Updated * inst/tinytest/test_nanoduration.R: Add tests 2022-10-14 Trevor L Davis trevor.l.davis@gmail.com * R/nanoduration.R (as.nanoduration.difftime): Added * man/nanoduration.Rd: Updated * inst/tinytest/test_nanoduration.R: Add tests 2022-10-13 Trevor L Davis trevor.l.davis@gmail.com * R/nanoduration.R (nanoduration): Add default arguments equal to zero * R/nanotime.R: Use 'inherits()' instead of 'class() ==' 2022-10-04 Dirk Eddelbuettel edd@debian.org * docs/mkdmt-src/: Updated for mkdocs-for-material 8.5.5 2022-03-06 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION (Version, Date): Release 0.3.6 * R/nanoival.R: Fix incorrect subsetting with operator `%in%` * NAMESPACE: Added export * man/set_operations.Rd: Added file * src/period.cpp: Fix parse of negative period 2022-03-06 Dirk Eddelbuettel edd@debian.org * R/nanoduration.R: Use 'inherits()' instead of 'class() ==' * R/nanoival.R: Idem * R/nanoperiod.R: Idem * R/nanotime.R: Idem","title":"2022"},{"location":"changelog/#2021","text":"2021-12-14 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.5 2021-12-09 Dirk Eddelbuettel edd@debian.org * src/Makevars.ucrt: Based on patch by Tomas Kalibera that is part of his changes for the Windows utf8-enhabced ucrt3 builds of R 4.2.0 2021-11-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.4 2021-11-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2021-11-21 Leonardo Silvestri lsilvestri@ztsdb.org * inst/include/nanotime/period.hpp: Regroup and expose nanoperiod interface for use by other packages * src/period.cpp: Moved code to period.hpp header * src/rounding.cpp: Idem 2021-11-17 Dirk Eddelbuettel edd@debian.org * README.md: Remove Travis badge * .travis.yml: Remove Travis YAML config 2021-10-11 Dirk Eddelbuettel edd@debian.org * R/nanoduration.R (all.equal.nanoduration): Remove as.character.nanotime as proper S4 method already defined * R/nanoperiod.R (all.equal.nanoperiod): Idem * NAMESPACE: Removed exports * man/nanoduration.Rd: Updated * man/nanoperiod.Rd: Idem * .codecov.yml (coverage): Ensure PRs will not get a red 'fail' just because coverage metrices dropped a miniscule amount 2021-10-10 Dirk Eddelbuettel edd@debian.org * R/nanoival.R (as.character.nanoival): Added * NAMESPACE: Idem * man/nanoival.Rd: Aliases * R/nanoperiod.R (as.character.nanoperiod): Added * NAMESPACE: Idem * man/nanoperiod.Rd: Aliases * R/nanoduration.R (as.character.nanoduration): * NAMESPACE: Idem * man/nanoduration.Rd: Aliases * inst/tinytest/test_nanotime.R: Add tests * inst/tinytest/test_nanoival.R: Idem * inst/tinytest/test_nanoperiod.R: Idem 2021-10-08 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * R/nanotime.R (as.character.nanotime): Added * NAMESPACE: Idem * man/nanotime.Rd: Aliases 2021-08-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.3 2021-08-08 Leonardo Silvestri lsilvestri@ztsdb.org * src/period.cpp: Fix for `plus` and `minus` adjustment * R/nanoperiod.R: Idem * inst/tinytest/test_nanoperiod.R: Idem * man/nanoperiod.Rd: Idem 2021-04-06 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (URL, BugRreports): Added to DESCRIPTION file 2021-03-28 Dirk Eddelbuettel edd@debian.org * docs/mkdmt-src/: Moved mkdocs-material input","title":"2021"},{"location":"changelog/#2020","text":"2020-12-30 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml: Rename job from build to ci 2020-12-25 Dirk Eddelbuettel edd@debian.org * .github/workflows/ci.yaml: Small tweaks to CI YAML file 2020-12-13 Dirk Eddelbuettel edd@debian.org * README.md: Add CI badge 2020-12-06 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * .travis.yml: Switch to run.sh from r-ci for focal and bspm * .github/workflows/ci.yaml: Use run.sh from r-ci 2020-12-06 Colin Umansky statquant@outlook.com * inst/tinytest/test_nanoduration.R: Added tests for comparison 2020-12-05 Colin Umansky statquant@outlook.com * R/nanoduration.R: Support nanoduration to character comparison * man/nanoduration.Rd: Document new feature * inst/tinytest/test_nanoduration.R: Updated tests 2020-10-25 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * docker/r-devel/Dockerfile: Added for simpler r-devel checks 2020-10-24 Dirk Eddelbuettel edd@debian.org * inst/tinytest/test_nanotime.R: Add explicit check.tzone=FALSE to equality test for POSIXct comparison * inst/tinytest/test_nanoival.R: Renable full tests, add bit64 * inst/tinytest/test_nanoperiod.R: Idem * inst/tinytest/test_nanotime.R: Idem * inst/tinytest/test_ops.R: Idem 2020-09-11 Dirk Eddelbuettel edd@debian.org * docs/: Added package website * README.md: Added badge and short paragraph linking to documentation 2020-09-07 Leonardo Silvestri lsilvestri@ztsdb.org * demo/ggplot2Example.R: Updated and extended demo 2020-09-04 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * demo/ggplot2Example.R: New demo based on Leonardo's example repo 2020-09-03 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.2 2020-09-01 Elliott Sales de Andrade quantum.analyst@gmail.com * inst/include/nanotime/interval.hpp: Correct for big-endian 2020-08-31 Dirk Eddelbuettel edd@debian.org * .travis.yml (install): Back to RcppCCTZ from CRAN 2020-08-30 Dirk Eddelbuettel edd@debian.org * R/nanoival.R: De-activate two examples * R/nanotime.R: Idem * man/nanoival.Rd: Idem * man/nanotime.Rd: Idem * inst/tinytest/test_nanoduration.R: Make some test conditional * inst/tinytest/test_nanoival.R: Idem * inst/tinytest/test_nanoperiod.R: Idem * inst/tinytest/test_nanotime.R: Idem * inst/tinytest/test_ops.R: Idem 2020-08-28 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * src/interval.cpp: Use RcppCCTZ_API header and exported functions * src/nanotime.cpp: Idem * src/period.cpp: Idem * src/rounding.cpp: Idem * .travis.yml (install): Install RcppCCTZ from GitHub 2020-08-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.3.1 * R/nanoival.R: Add \\dontrun{} because of Solaris * R/nanoperiod.R: Idem * R/nanotime.R: Idem * man/nano_year.Rd: Idem * man/nanoperiod.Rd: Idem * man/nanotime.Rd: Idem * man/rounding.Rd: Idem * man/seq-nanoival-method.Rd: Idem * man/seq.nanotime.Rd: Idem * inst/tinytest/test_nanoival.R: Skip some tests on Solaris * inst/tinytest/test_nanoperiod.R: Idem * inst/tinytest/test_nanotime.R: Idem 2020-08-08 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version, small edit * src/interval.cpp: Add some tests for non-zero length vectors * inst/tinytest/test_nanotime.R: Skip one test upsetting SAN * tests/tinytest.R: Default back to serial tests * src/strnlen.cpp: Added strnlen_ to help Solaris * inst/include/nanotime/utilities.hpp: Declare it * src/interval.cpp: Use it * src/nanotime.cpp: Idem 2020-08-07 Leonardo Silvestri lsilvestri@ztsdb.org * src/period.cpp: Add extra braces to appease macOS compiler * src/inst/include/nanotime/globals.hpp: Use chrono duration; remove ambiguous time_point and seconds declarations 2020-08-05 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.3.0 2020-08-02 Leonardo Silvestri lsilvestri@ztsdb.org * src/interval.cpp: Use non-throwing RcppCCTZ function * src/nanotime.cpp: Idem * src/period.cpp: Idem * inst/include/nanotime/globals.hpp: More (u)int64_t * R/nanoival.R: Refine error message check * R/nanotime.R: Idem 2020-07-29 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2020-07-29 Leonardo Silvestri lsilvestri@ztsdb.org * src/Makevars.win: Add to set explicit '-mno-ms-bitfields' flag required for bitfield operations on Windows 2020-07-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * inst/NEWS.Rd: Additional entries added 2020-07-20 Leonardo Silvestri lsilvestri@ztsdb.org * vignettes/nanotime/rmd/nanotime-intro.Rmd: Additional edits 2020-07-19 Dirk Eddelbuettel edd@debian.org * vignettes/nanotime/rmd/nanotime-intro.Rmd: Additional edits * vignettes/nanotime/rmd/nanotime-intro.bib: Updated bibliography 2020-07-11 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION (Version, Date): Roll minor version * inst/include/nanotime/duration.hpp: move headers to 'nanotime' and put 'interval' and 'period' in a namespace * directory inst/include/nanotime/globals.hpp: Idem * inst/include/nanotime/interval.hpp: Idem * inst/include/nanotime/period.hpp: Idem * inst/include/nanotime/pseudovector.hpp: Idem * inst/include/nanotime/utilities.hpp: Idem * src/duration.cpp: Idem * src/interval.cpp: Idem * src/nanotime.cpp: Idem * src/period.cpp: Idem * src/rounding.cpp: Idem * src/Makevars: Idem * inst/include/nanotime/pseudovector.hpp: let 'pseudovector' return a different type than the input which gives more flexibility 2020-05-17 Dirk Eddelbuettel edd@debian.org * vignettes/nanotime-intro.pdf: Copy of prebuilt vignette from rmd/ * vignettes/nanotime-introduction.Rnw: Sweave shell for prebuilt vignette * .travis.yml: Switch to bionic, and testing via R 4.0.0 2020-05-16 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION (Version, Date): Roll minor version * R/nanoduration.R: correct NA and negative subsetting; implement 'rep' * R/nanoival.R: Idem * R/nanoperiod.R: Idem * R/nanotime.R: Idem * inst/include/globals.hpp: correct NA and negative subsetting * inst/include/interval.hpp: Idem * inst/include/utilities.hpp: Idem * inst/tinytest/test_nanoduration.R: Idem * inst/tinytest/test_nanoival.R: Idem * inst/tinytest/test_nanoperiod.R: Idem * inst/tinytest/test_nanotime.R: Idem * src/duration.cpp: Idem * src/interval.cpp: Idem * src/nanotime.cpp: Idem * src/period.cpp: Idem * man/rep-nanoduration-method.Rd: document 'rep' * man/rep-nanoival-method.Rd: document 'rep' * man/rep-nanoperiod-method.Rd: document 'rep' * man/rep-nanotime-method.Rd: document 'rep' 2020-05-10 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION (Version, Date): Roll minor version * R/nanoival.R: check param types before invoking C functions; use 'na.rm' in 'is.unsorted' * inst/tinytest/test_nanoival.R: Idem * R/nanoperiod.R: check param types before invoking C functions * R/nanotime.R: Idem * inst/tinytest/test_nanoperiod.R: Idem * src/RcppExports.cpp: Idem * src/interval.cpp: Idem * man/nanotime.Rd: document 'tz' param behaviour in constructor 2020-04-25 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION (Version, Date): Roll minor version * NAMESPACE: Added rounding functions 'nano_floor' and 'nano_ceiling' * R/RcppExports.R: Idem * R/nanoduration.R: Idem * R/nanoperiod.R: Idem * R/nanotime.R: Idem * inst/include/period.hpp: Idem * inst/tinytest/test_nanoduration.R: Idem * inst/tinytest/test_nanoperiod.R: Idem * man/rounding.Rd: Idem * src/RcppExports.cpp: Idem * src/rounding.cpp: Idem * vignettes/nanotime-introduction.Rnw: Wrapper as in anytime * vignettes/nanotime-intro.pdf: Pre-made pdf * vignettes/nanotime/rmd/nanotime-intro.Rmd: New draft vignette * vignettes/nanotime/rmd/nanotime-intro.bib: New bibliography 2020-04-09 Dirk Eddelbuettel edd@debian.org * README.md: Add 'last commit' badge 2020-03-31 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION (Version, Date): Roll minor version * R/nanoduration.R: Added all.equal * R/nanoival.R: Idem * R/nanoperiod.R: Idem * R/nanotime.R: Idem * inst/tinytest/test_nanoduration.R: Idem * inst/tinytest/test_nanoival.R: Idem * inst/tinytest/test_nanoperiod.R: Idem * inst/tinytest/test_nanotime.R: Idem * man/all.equal-nanoperiod-ANY-method.Rd: deleted * man/all.equal.nanotime.Rd: Idem * man/all.equal.nanoduration.Rd: Idem * man/all.equal.nanoival.Rd: Idem * man/all.equal.nanoperiod.Rd: Idem 2020-03-29 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION: fixed 0-length-vector ops * R/RcppExports.R: Idem * R/nanoperiod.R: Idem * inst/include/utilities.hpp: Idem * inst/tinytest/test_nanoival.R: Idem * inst/tinytest/test_nanoperiod.R: Idem * inst/tinytest/test_nanotime.R: Idem * src/RcppExports.cpp: Idem * src/interval.cpp: Idem * src/nanotime.cpp: Idem * src/period.cpp: Idem 2020-03-27 Leonardo Silvestri lsilvestri@ztsdb.org * DESCRIPTION: added %in%.nanotime * NAMESPACE: Idem * R/RcppExports.R: Idem * R/nanoival.R: Idem * R/nanoperiod.R: Idem * inst/tinytest/test_nanoival.R: Idem * man/nanoduration.Rd: Idem * man/nanoival.Rd: Idem * man/nanoperiod.Rd: Idem * man/nanotime.Rd: Idem * man/set_operations.Rd: Idem * src/RcppExports.cpp: Idem * src/interval.cpp: Idem 2020-03-25 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * DESCRIPTION (LinkingTo): Add RcppDate providing date.h * src/nanotime.cpp (nanotime_wday_impl): Update one accessor for newer version of date.h * inst/include/date.h: Deleted as no longer needed * .travis.yml (install): Install RcppDate * inst/include/globals.hpp: Add a single #nocov 2020-03-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2020-03-22 Leonardo Silvestri lsilvestri@ztsdb.org * README.md: updated information 2020-03-21 Leonardo Silvestri lsilvestri@ztsdb.org * inst/include/globals.hpp: parse format ending with 'Z' for data.table compatibility * src/period.cpp: fix vectorized 'plus'/'minus' ops for 'nanoperiod' * inst/tinytest/test_nanoperiod.R: Idem 2020-03-20 Dirk Eddelbuettel edd@debian.org * src/duration.cpp: Slightly more idiomatic Rcpp * src/period.cpp: Idem * R/nanoduration.R: Idem * R/nanoperiod.R: Idem * R/nanotime.R: Idem 2020-03-19 Dirk Eddelbuettel edd@debian.org * src/interval.cpp: Slightly more idiomatic Rcpp * R/nanoival.R: Idem 2020-03-18 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * DESCRIPTION (Imports): Updated versioned Depends: on RcppCCTZ * NAMESPACE: Turn on registration * src/nanotime.cpp: Slightly more idiomatic Rcpp * R/nanotime.R: Idem 2020-03-15 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * src/duration.cpp: Small fix to cast to plain old type * src/interval.cpp: Idem * src/nanotime.cpp: Idem * src/Makevars (PKG_CXXFLAGS): Minor edits * cleanup: Added minor helper 2020-03-14 Leonardo Silvestri lsilvestri@ztsdb.org [ The following reflects a fairly substantial set of changes made over a longer period and are just summarized here ] * DESCRIPTION: Add versioned Depends on RcppCCTZ * NAMESPACE: Load dynamic library * R/duration.R: Add new nanoival, duration, and period * R/nanoival.R: Idem * R/nanotime.R: Idem * R/period.R: Idem * inst/include/date.h: Idem * inst/include/duration.hpp: Idem * inst/include/globals.hpp: Idem * inst/include/interval.hpp: Idem * inst/include/period.hpp: Idem * inst/include/pseudovector.hpp: Idem * inst/include/utilities.hpp: Idem * inst/tinytest/test_data.frame.R: Idem * inst/tinytest/test_duration.R: Idem * inst/tinytest/test_nanoival.R: Idem * inst/tinytest/test_nanotime.R: Idem * inst/tinytest/test_ops.R: Idem * inst/tinytest/test_period.R: Idem * man/duration.Rd: Idem * man/nanoival.Rd: Idem * man/nanotime.Rd: Idem * man/period.Rd: Idem * src/Makevars: Idem * src/duration.cpp: Idem * src/interval.cpp: Idem * src/nanotime.cpp: Idem * src/period.cpp: Idem * .travis.yml: For now load development version of RcppCCTZ from GitHub","title":"2020"},{"location":"changelog/#2019","text":"2019-11-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New minor version * inst/tinytest/test_*.R: Moved from ../unitTest, changed to tinytest * tests/tinytest.R: Add test runner for tinytest * DESCRIPTION (Suggests): Add tinytest, remove RUnit * .travis.yml (install): Add r-cran-tinytest, remove r-cran-runit * tests/runTests.R: Removed RUnit test runner 2019-11-20 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New minor version * R/nanotime.R (as.integer64.nanotime): Adding 'Compare' ops for character and nanotime * inst/unitTests/test_ops.R: Adjust one existing test, and add six new ones for character and nanotime comparisons * man/nanotime.Rd: Document new comparison operators 2019-05-25 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.2.4 2019-05-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * R/nanotime.R (as.integer64.nanotime): Define [[ accessor * inst/unitTests/test_nanotime.R (test_square_bracket): Add test * man/nanotime.Rd: Add alias 2019-04-03 Dirk Eddelbuettel edd@debian.org * README.md: Add dependencies badge","title":"2019"},{"location":"changelog/#2018","text":"2018-09-30 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Date, Version): Release 0.2.3 2018-09-02 Dirk Eddelbuettel edd@debian.org * .travis.yml: Switch Travis CI to R 3.5 repo 2018-08-31 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * inst/unitTests/test_nanotime.R: Skip some tests on Solaris * inst/unitTests/test_zoo.R: Idem 2018-07-18 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.2 * inst/unitTests/test_xts.R: Continue to disable xts tests even after 0.11.0 release 2018-07-01 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.1 2018-06-30 Dirk Eddelbuettel edd@debian.org * R/nanotime.R (format.nanotime): Protect from empty argument 2018-06-23 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * R/nanotime.R: Two extras casts to integer64 in constructors 2018-04-19 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version 2018-04-18 Leonardo Silvestri lsilvestri@ztsdb.org * R/nanotime.R (Compare): Added attribute-preserving comparison * man/nanotime.Rd: Corresponding documentation","title":"2018"},{"location":"changelog/#2017","text":"2017-06-22 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.2.0 2017-06-21 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * DESCRIPTION (Imports): Require RcppCCTZ (>= 0.2.3) * inst/unitTests/test_nanotime.R: No longer condition out Windows * inst/unitTests/test_nanotime.R: Ditto * inst/unitTests/test_xts.R: Ditto * .travis.yml (group): Added as required by Travis CI 2017-06-16 Dirk Eddelbuettel edd@debian.org * R/nanotime.R (nanotime.matrix): Adding '#nocov' tags 2017-06-15 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): New minor version * tests/runTests.R: Rewritten test runner * inst/unitTests/test_zoo.R (test_zoo): Condition on zoo present, and test not running under Windows * inst/unitTests/test_xts.R (.setUp): Condition on a 'future' xts version present as we really nedd xts to be nanotime aware for these tests * inst/unitTests/test_nanotime.R: Condition a number of tests on not running under Windows * DESCRIPTION (Suggests): Added 'xts' * .travis.yml (install): Ditto 2017-06-14 Leonardo Silvestri lsilvestri@ztsdb.org * R/nanotime.R: Error on ops not meaningful for type, also fix handling of NA, NAN, Inf, -Inf * man/nanotime.Rd: Corresponding documentation * inst/unitTests/test_nanotime.R: corresponding test 2017-06-05 Leonardo Silvestri lsilvestri@ztsdb.org * R/nanotime.R: Correct summary() by defining 'names<-'; fix 'c' * man/nanotime.Rd: Corresponding documentation * inst/unitTests/test_nanotime.R: corresponding test 2017-06-03 Leonardo Silvestri lsilvestri@ztsdb.org * R/nanotime.R: Prevent print from printing more than options()$max.print 2017-06-02 Leonardo Silvestri lsilvestri@ztsdb.org * R/nanotime.R: Ensure names are kept for nanotime vectors * inst/unitTests/test_nanotime.R: corresponding test 2017-05-02 Leonardo Silvestri lsilvestri@ztsdb.org * R/nanotime.R: Ensure 'tz=\"\"' is treated as missing 2017-04-04 Leonardo Silvestri lsilvestri@ztsdb.org * R/nanotime.R: Remove spurious debug output 2017-03-29 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * man/nanotime.Rd: Minor update * nanotime.Rproj: Use devtools::document to work around a roxygen2 bug with S4 and setOldClass 2017-03-29 Leonardo Silvestri lsilvestri@ztsdb.org [ The following is summary of changes made over several weeks ] * DESCRIPTION: Convert to S4 class * NAMESPACE: Idem * R/nanotime.R: Idem * inst/unitTests/test_data.frame.R: Idem * inst/unitTests/test_nanotime.R: Idem * inst/unitTests/test_ops.R: Idem * inst/unitTests/test_xts.R: Idem * inst/unitTests/test_zoo.R: Idem * man/nanotime-class.Rd: Idem * man/nanotime-package.Rd: Idem * man/nanotime.Rd: Idem * tests/runTests.R: Idem * tests/simpleTests.R: Idem 2017-03-27 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.1.2 2017-02-08 Dirk Eddelbuettel edd@max.eddelbuettel.com * DESCRIPTION (Version, Date): Roll minor version and date * NAMESPACE: Also (re-)export as.integer64 * R/nanotime.R: Added roxygen2 snippet for as.integer64 * man/nanotime.Rd: Documentation 2017-02-04 Dirk Eddelbuettel edd@max.eddelbuettel.com * DESCRIPTION (Version, Date): Release 0.1.1 2017-01-31 Dirk Eddelbuettel edd@debian.org * R/nanotime.R: One more updated format string 2017-01-30 Dirk Eddelbuettel edd@debian.org * R/nanotime.R (format.nanotime): Safer transformation to double (index2char.nanotime): Idem 2017-01-29 Dirk Eddelbuettel edd@debian.org * R/nanotime.R: Additional documentation section on default output format string * .travis.yml (before_install): Use https for curl fetch 2017-01-25 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version and date * R/nanotime.R (nanotime.character): Display of nine dec digits (format.nanotime): Idem (print.nanotime): Dispatch to format.nanotime (thanks, Matt!) (as.integer64.nanotime): New converter to integer64 (Ops.nanotime): Explicit definition with some casts * NAMESPACE: Corresponding exports * man/nanotime.Rd: Corresponding documentation 2017-01-10 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.1.0 2017-01-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Roll minor version * DESCRIPTION (SystemRequirements, OS_type): Remove constraint on Unix as RcppCCTZ is now available on Windows too * demo/nanosecondDelayExample.R: Add missing library() calls; added save and reload example * README.md: Small edit showing save and reload","title":"2017"},{"location":"changelog/#2016","text":"2016-12-22 Dirk Eddelbuettel edd@debian.org * README.md: Updated to reflect CRAN status 2016-12-18 Dirk Eddelbuettel edd@debian.org * demo/00Index: New file, demo now in package * demo/nanosecondDelayExample.R: Renamed demo 2016-12-17 Dirk Eddelbuettel edd@debian.org * R/nanotime.R (as.data.frame.nanotime): Documented (nanotime.character): Support tz and fmt options (format.nanotime): Idem (index2char.nanotime): Idem (as.POSIXct.nanotime): Idem (as.POSIXlt.nanotime): Idem * man/nanotime.Rd: Idem * tests/data.frame.R: Added simple data.{frame,table} test * tests/simpleTests.R: Added simple format tests * demo/nanotimeEx.R: Extended somewhat * DESCRIPTION (Suggests): Added data.table * .travis.yml: Added r-cran-data.table 2016-12-16 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Rolled minor version * R/nanotime.R (as.data.frame.nanotime): New method (format.nanotime): Support additional arguments * man/nanotime.Rd: Updated for new method * NAMESPACE: Idem 2016-12-15 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version, Date): Release 0.0.1 * R/nanotime.R (as.POSIXct.nanotime,as.POSIXlt.nanotime) (as.Date.nanotime): New converters (format.nanotime): Add 'justify' argument * man/nanotime.Rd: Document new and updated methods * NAMESPACE: Registered new converters * tests/simpleTests.R: Additional calls to new functions * inst/NEWS.Rd: Added * DESCRIPTION (SystemRequirements): State RcppCCTZ dependency 2016-12-11 Dirk Eddelbuettel edd@debian.org * R/nanotime.R (index2char.nanotime): Added to have zoo() objects print a nanotime index correctly (nanotime.default): Switch class order with integer64 last (print.nanotime): Minor adjustment (format.nanotime): Added (showNanotime): Removed (format.nanotime): Support global option for format * NAMESPACE: Register S3 methods index2char.nanotime, format.nanotime; import two functions from RcppCCTZ (which are now exported) * DESCRIPTION: Now Imports: rather than Suggests: zoo * tests/zooTests.R: Small changes * .travis.yml: Added * .codecov.yml: Ditto * .Rbuildignore: Adjusted accordingly * tests/simpleTests.R: Two more conversions from integer and numeric 2016-12-10 Dirk Eddelbuettel edd@debian.org * tests/zooTests.R: Simple tests for vectorised time operation * R/nanotime.R (print.nanotime): Do not default to character formating here, rather farm out to helper showNanotime (showNanotime): Simple pretty printer * tests/simpleTests.R: Added calls to snowNanotime() 2016-12-09 Dirk Eddelbuettel edd@debian.org * DESCRIPTION (Version): Very initial pre-release 0.0.0","title":"2016"},{"location":"news/","text":"Version 0.3.11 (2025-01-10) Explicit Rcomplex assignment accommodates pickier compilers over newer R struct (Michael Chirico in #135 fixing #134 ) When formatting, NA are flagged before CCTZ call to to not trigger santizier, and set to NA after call (Dirk in #136 ) Version 0.3.10 (2024-09-16) Retire several checks for Solaris in test suite (Dirk in #130 ) Switch to Authors@R in DESCRIPTION as now required by CRAN Accommodate R-devel change for setdiff (Dirk in #133 fixing #132 ) No longer ship defunction ggplot2 demo (Dirk fixing #131 ) Version 0.3.9 (2024-06-21) Condition two tests to not run on arm64 (Dirk in #129 fixing #128 ) Version 0.3.8 (2024-06-19) Time format documentation now has a reference to RcppCCTZ The package no longer sets a default C++ compilation standard of C++11 (Dirk initially in #114 , and later switched to C++17) New accurate parameter for conversion from POSIXct to nanotime (Davor Josipovic and Leonardo in #116 closing #115 ) The as.Date() function is now vectorized and can take a TZ argument (Leonardo and Dirk in #119 closing #118 ) Use of internal function SET_S4_OBJECT has been replaced by API function Rf_asS4 (Leonardo in #121 closing #120 ) An nanoduration / nanoduration expression now returns a double (Leonardo in #122 closing #117 ) Bitfield calculations no longer require an Windows-only compiler switch (Leonardo in #124 ) A simple manual page format nag involving has been addressed (Dirk in #126 fixing #125 ) An set of tests tickling an UBSAN issue via Rcpp code no longer run unless CI is set (Dirk in #127 fixing #123 ) Version 0.3.7 (2022-10-23) Update mkdocs for material docs generator (Dirk in #102 ) Use inherits() instead comparing to class() (Trevor Davis in #104 ) Set default arguments in nanoduration() (Trevor Davis in #105 ) Add as.nanoduration.difftime() support (Trevor Davis in #106 ) Add +/- methods for nanotime and difftime objects (Trevor Davis in #110 closing #108 , #107 ) Version 0.3.6 (2022-03-06) Fix incorrect subsetting with operator %in% (Leonardo in #100 fixing #99 ). Fix incorrect parsing for negative nanoperiod (Leonardo in #100 fixing #96 ). Test for class via inherits() (Dirk). Version 0.3.5 (2021-12-14) Applied patch by Tomas Kalibera for Windows UCRT under the upcoming R 4.2.0 expected for April. Version 0.3.4 (2021-11-24) Added a few more as.character conversion function (Dirk) Expose nanoperiod functionality via header file for use by other packages (Leonardo in #95 fixing #94 ). Version 0.3.3 (2021-08-09) New demo ggplot2Example.R (Leonardo and Dirk). New documentation website using mkdocs-material (Dirk). Updated unit test to account for r-devel POSIXct changes, and re-enable full testing under r-devel (Dirk). Additional nanoduration and character ops plus tests (Colin Umansky in #88 addressing #87 ). New plus and minus functions for periods (Leonardo in #91 ). Version 0.3.2 (2020-09-03) Correct for big endian (Elliott Sales de Andrade in #81 ). Use the RcppCCTZ_API.h header (Dirk in #82 ). Conditionally reduce test coverage (Dirk in #83 ). Version 0.3.1 (2020-08-09) Several small cleanups to ensure a more robust compilation (Leonardo and Dirk in #75 fixing #74 ). Show Solaris some extra love by skipping tests and examples with a timezone (Dirk in #76 ). Version 0.3.0 (2020-08-06) Use tzstr= instead of tz= in call to RcppCCTZ::parseDouble() ) (Matt Dowle in #49 ). Add new comparison operators for nanotime and charcters (Dirk in #54 fixing #52 ). Switch from RUnit to tinytest (Dirk in #55 ) Substantial functionality extension in with new types nanoduration , nanoival and nanoperiod (Leonardo in #58 , #60 , #62 , #63 , #65 , #67 , #70 fixing #47 , #51 , #57 , #61 , #64 with assistance from Dirk). A new (yet still draft-ish) vignette was added describing the four core types (Leonardo and Dirk in #71 ). A required compilation flag for Windows was added (Leonardo in #72 ). RcppCCTZ function are called in new 'non-throwing' variants to not trigger exeception errors (Leonardo in #73 ). Version 0.2.4 (2019-05-25) Define [[ method (Dirk in #45 fixing #44 ). Version 0.2.3 (2018-09-30) Skip some tests on Solaris which seems borked with timezones. As we have no real access, no real fix possible (Dirk in #42 ). Update Travis setup Version 0.2.2 (2018-07-18) Unit tests depending on future xts behaviour remain disabled (Dirk in #41 ). Version 0.2.1 (2018-07-01) Added attribute-preserving comparison (Leonardo in #33 ). Added two integer64 casts in constructors (Dirk in #36 ). Added two checks for empty arguments (Dirk in #37 ). Version 0.2.0 (2017-06-22) Rewritten in S4 to provide more robust operations ( #17 by Leonardo) Ensure tz=\"\" is treated as unset (Leonardo in #20 ) Added format and tz arguments to nanotime , format , print ( #22 by Leonardo and Dirk) Ensure printing respect options()$max.print , ensure names are kept with vector ( #23 by Leonardo) Correct summary() by defining names<- (Leonardo in #25 fixing #24 ) Report error on operations that are meaningful for type; handled NA, NaN, Inf, -Inf correctly (Leonardo in #27 fixing #26 ) Version 0.1.2 (2017-03-27) The as.integer64 function is now exported as well. Version 0.1.1 (2017-02-04) The default display format now always shows nine digits ( #10 closing #9 ) The default print method was updated to use formated output, and a new new converter as.integer64 was added Several 'Ops' method are now explicitly defined allowing casting of results (rather than falling back on bit64 behaviour) The format routine is now more careful about not loosing precision ( #13 closing #12 ) Version 0.1.0 (2017-01-10) Added Windows support thanks to expanded RcppCCTZ (closes #6 ) Added \"mocked up\" demo with nanosecond delay networking analysis Added 'fmt' and 'tz' options to output functions, expanded format.nanotime (closing #2 and #3 ) Added data.frame support Expanded tests Version 0.0.1 (2016-12-15) Initial CRAN upload. Package is functional and provides examples.","title":"News"},{"location":"vignette/","text":"Introduction to nanotime","title":"Introductory Vignette"},{"location":"vignette/#introduction-to-nanotime","text":"","title":"Introduction to nanotime"},{"location":"man/all.equal.nanoduration/","text":"Test if Two Objects are (Nearly) Equal Description Compare target and current testing \u2018near equality\u2019. If they are different, comparison is still made to some extent, and a report of the differences is returned. Do not use all.equal directly in if expressions\u2014either use isTRUE(all.equal(....)) or identical if appropriate. Usage ## S3 method for class 'nanoduration' all.equal( target, current, tolerance = sqrt(.Machine$double.eps), scale = NULL, countEQ = FALSE, formatFUN = function(err, what) format(err), ..., check.attributes = TRUE ) ## S4 method for signature 'nanoduration' all.equal( target, current, tolerance = sqrt(.Machine$double.eps), scale = NULL, countEQ = FALSE, formatFUN = function(err, what) format(err), ..., check.attributes = TRUE ) Arguments target , current nanoduration arguments to be compared tolerance numeric >= 0. Differences smaller than tolerance are not reported. The default value is close to 1.5e-8 . scale NULL or numeric > 0, typically of length 1 or length(target) . See \u2018Details\u2019. countEQ logical indicating if the target == current cases should be counted when computing the mean (absolute or relative) differences. The default, FALSE may seem misleading in cases where target and current only differ in a few places; see the extensive example. formatFUN a function of two arguments, err , the relative, absolute or scaled error, and what , a character string indicating the _kind_ of error; maybe used, e.g., to format relative and absolute errors differently. ... further arguments for different methods check.attributes logical indicating if the attributes of target and current (other than the names) should be compared. See Also identical , isTRUE , == , and all for exact equality testing.","title":"All.equal.nanoduration"},{"location":"man/all.equal.nanoduration/#test-if-two-objects-are-nearly-equal","text":"","title":"Test if Two Objects are (Nearly) Equal"},{"location":"man/all.equal.nanoduration/#description","text":"Compare target and current testing \u2018near equality\u2019. If they are different, comparison is still made to some extent, and a report of the differences is returned. Do not use all.equal directly in if expressions\u2014either use isTRUE(all.equal(....)) or identical if appropriate.","title":"Description"},{"location":"man/all.equal.nanoduration/#usage","text":"## S3 method for class 'nanoduration' all.equal( target, current, tolerance = sqrt(.Machine$double.eps), scale = NULL, countEQ = FALSE, formatFUN = function(err, what) format(err), ..., check.attributes = TRUE ) ## S4 method for signature 'nanoduration' all.equal( target, current, tolerance = sqrt(.Machine$double.eps), scale = NULL, countEQ = FALSE, formatFUN = function(err, what) format(err), ..., check.attributes = TRUE )","title":"Usage"},{"location":"man/all.equal.nanoduration/#arguments","text":"target , current nanoduration arguments to be compared tolerance numeric >= 0. Differences smaller than tolerance are not reported. The default value is close to 1.5e-8 . scale NULL or numeric > 0, typically of length 1 or length(target) . See \u2018Details\u2019. countEQ logical indicating if the target == current cases should be counted when computing the mean (absolute or relative) differences. The default, FALSE may seem misleading in cases where target and current only differ in a few places; see the extensive example. formatFUN a function of two arguments, err , the relative, absolute or scaled error, and what , a character string indicating the _kind_ of error; maybe used, e.g., to format relative and absolute errors differently. ... further arguments for different methods check.attributes logical indicating if the attributes of target and current (other than the names) should be compared.","title":"Arguments"},{"location":"man/all.equal.nanoduration/#see-also","text":"identical , isTRUE , == , and all for exact equality testing.","title":"See Also"},{"location":"man/all.equal.nanoival/","text":"Test if Two Objects are (Nearly) Equal Description Compare target and current testing \u2018near equality\u2019. If they are different, comparison is still made to some extent, and a report of the differences is returned. Do not use all.equal directly in if expressions\u2014either use isTRUE(all.equal(....)) or identical if appropriate. Usage ## S3 method for class 'nanoival' all.equal(target, current, ..., check.attributes = TRUE) ## S4 method for signature 'nanoival' all.equal(target, current, ..., check.attributes = TRUE) Arguments target , current nanoival arguments to be compared ... further arguments for different methods check.attributes logical indicating if the attributes of target and current (other than the names) should be compared. See Also identical , isTRUE , == , and all for exact equality testing.","title":"All.equal.nanoival"},{"location":"man/all.equal.nanoival/#test-if-two-objects-are-nearly-equal","text":"","title":"Test if Two Objects are (Nearly) Equal"},{"location":"man/all.equal.nanoival/#description","text":"Compare target and current testing \u2018near equality\u2019. If they are different, comparison is still made to some extent, and a report of the differences is returned. Do not use all.equal directly in if expressions\u2014either use isTRUE(all.equal(....)) or identical if appropriate.","title":"Description"},{"location":"man/all.equal.nanoival/#usage","text":"## S3 method for class 'nanoival' all.equal(target, current, ..., check.attributes = TRUE) ## S4 method for signature 'nanoival' all.equal(target, current, ..., check.attributes = TRUE)","title":"Usage"},{"location":"man/all.equal.nanoival/#arguments","text":"target , current nanoival arguments to be compared ... further arguments for different methods check.attributes logical indicating if the attributes of target and current (other than the names) should be compared.","title":"Arguments"},{"location":"man/all.equal.nanoival/#see-also","text":"identical , isTRUE , == , and all for exact equality testing.","title":"See Also"},{"location":"man/all.equal.nanoperiod/","text":"Test if Two Objects are (Nearly) Equal Description Compare target and current testing \u2018near equality\u2019. If they are different, comparison is still made to some extent, and a report of the differences is returned. Do not use all.equal directly in if expressions\u2014either use isTRUE(all.equal(....)) or identical if appropriate. Usage ## S3 method for class 'nanoperiod' all.equal(target, current, ..., check.attributes = TRUE) ## S4 method for signature 'nanoperiod' all.equal(target, current, ..., check.attributes = TRUE) Arguments target , current nanoperiod arguments to be compared ... further arguments for different methods check.attributes logical indicating if the attributes of target and current (other than the names) should be compared. See Also identical , isTRUE , == , and all for exact equality testing.","title":"All.equal.nanoperiod"},{"location":"man/all.equal.nanoperiod/#test-if-two-objects-are-nearly-equal","text":"","title":"Test if Two Objects are (Nearly) Equal"},{"location":"man/all.equal.nanoperiod/#description","text":"Compare target and current testing \u2018near equality\u2019. If they are different, comparison is still made to some extent, and a report of the differences is returned. Do not use all.equal directly in if expressions\u2014either use isTRUE(all.equal(....)) or identical if appropriate.","title":"Description"},{"location":"man/all.equal.nanoperiod/#usage","text":"## S3 method for class 'nanoperiod' all.equal(target, current, ..., check.attributes = TRUE) ## S4 method for signature 'nanoperiod' all.equal(target, current, ..., check.attributes = TRUE)","title":"Usage"},{"location":"man/all.equal.nanoperiod/#arguments","text":"target , current nanoperiod arguments to be compared ... further arguments for different methods check.attributes logical indicating if the attributes of target and current (other than the names) should be compared.","title":"Arguments"},{"location":"man/all.equal.nanoperiod/#see-also","text":"identical , isTRUE , == , and all for exact equality testing.","title":"See Also"},{"location":"man/all.equal.nanotime/","text":"Test if Two Objects are (Nearly) Equal Description Compare target and current testing \u2018near equality\u2019. If they are different, comparison is still made to some extent, and a report of the differences is returned. Do not use all.equal directly in if expressions\u2014either use isTRUE(all.equal(....)) or identical if appropriate. Usage ## S3 method for class 'nanotime' all.equal( target, current, tolerance = sqrt(.Machine$double.eps), scale = NULL, countEQ = FALSE, formatFUN = function(err, what) format(err), ..., check.attributes = TRUE ) ## S4 method for signature 'nanotime' all.equal( target, current, tolerance = sqrt(.Machine$double.eps), scale = NULL, countEQ = FALSE, formatFUN = function(err, what) format(err), ..., check.attributes = TRUE ) Arguments target , current nanotime arguments to be compared tolerance numeric >= 0. Differences smaller than tolerance are not reported. The default value is close to 1.5e-8 . scale NULL or numeric > 0, typically of length 1 or length(target) . See \u2018Details\u2019. countEQ logical indicating if the target == current cases should be counted when computing the mean (absolute or relative) differences. The default, FALSE may seem misleading in cases where target and current only differ in a few places; see the extensive example. formatFUN a function of two arguments, err , the relative, absolute or scaled error, and what , a character string indicating the _kind_ of error; maybe used, e.g., to format relative and absolute errors differently. ... further arguments for different methods check.attributes logical indicating if the attributes of target and current (other than the names) should be compared. See Also identical , isTRUE , == , and all for exact equality testing.","title":"All.equal.nanotime"},{"location":"man/all.equal.nanotime/#test-if-two-objects-are-nearly-equal","text":"","title":"Test if Two Objects are (Nearly) Equal"},{"location":"man/all.equal.nanotime/#description","text":"Compare target and current testing \u2018near equality\u2019. If they are different, comparison is still made to some extent, and a report of the differences is returned. Do not use all.equal directly in if expressions\u2014either use isTRUE(all.equal(....)) or identical if appropriate.","title":"Description"},{"location":"man/all.equal.nanotime/#usage","text":"## S3 method for class 'nanotime' all.equal( target, current, tolerance = sqrt(.Machine$double.eps), scale = NULL, countEQ = FALSE, formatFUN = function(err, what) format(err), ..., check.attributes = TRUE ) ## S4 method for signature 'nanotime' all.equal( target, current, tolerance = sqrt(.Machine$double.eps), scale = NULL, countEQ = FALSE, formatFUN = function(err, what) format(err), ..., check.attributes = TRUE )","title":"Usage"},{"location":"man/all.equal.nanotime/#arguments","text":"target , current nanotime arguments to be compared tolerance numeric >= 0. Differences smaller than tolerance are not reported. The default value is close to 1.5e-8 . scale NULL or numeric > 0, typically of length 1 or length(target) . See \u2018Details\u2019. countEQ logical indicating if the target == current cases should be counted when computing the mean (absolute or relative) differences. The default, FALSE may seem misleading in cases where target and current only differ in a few places; see the extensive example. formatFUN a function of two arguments, err , the relative, absolute or scaled error, and what , a character string indicating the _kind_ of error; maybe used, e.g., to format relative and absolute errors differently. ... further arguments for different methods check.attributes logical indicating if the attributes of target and current (other than the names) should be compared.","title":"Arguments"},{"location":"man/all.equal.nanotime/#see-also","text":"identical , isTRUE , == , and all for exact equality testing.","title":"See Also"},{"location":"man/is.unsorted-nanoival-method/","text":"Test if a nanoival vector is Not Sorted Description Test if an object is not sorted (in increasing order), without the cost of sorting it. Usage ## S4 method for signature 'nanoival' is.unsorted(x, na.rm = FALSE, strictly = FALSE) Arguments x a nanoival vector na.rm logical. Should missing values be removed before checking? strictly logical indicating if the check should be for _strictly_ increasing values. See Also sort","title":"Is.unsorted nanoival method"},{"location":"man/is.unsorted-nanoival-method/#test-if-a-nanoival-vector-is-not-sorted","text":"","title":"Test if a nanoival vector is Not Sorted"},{"location":"man/is.unsorted-nanoival-method/#description","text":"Test if an object is not sorted (in increasing order), without the cost of sorting it.","title":"Description"},{"location":"man/is.unsorted-nanoival-method/#usage","text":"## S4 method for signature 'nanoival' is.unsorted(x, na.rm = FALSE, strictly = FALSE)","title":"Usage"},{"location":"man/is.unsorted-nanoival-method/#arguments","text":"x a nanoival vector na.rm logical. Should missing values be removed before checking? strictly logical indicating if the check should be for _strictly_ increasing values.","title":"Arguments"},{"location":"man/is.unsorted-nanoival-method/#see-also","text":"sort","title":"See Also"},{"location":"man/nano_year/","text":"Get a component of a date time Description Get a component of a date time. nano_wday returns the numeric position in a week, with Sunday == 0. nano_mday returns the numeric day (i.e. a value from 1 to 31). nano_month returns the month (i.e. a value from 1 to 12). nano_year returns the year. Usage nano_wday(x, tz) nano_mday(x, tz) nano_month(x, tz) nano_year(x, tz) Arguments x a nanotime object tz character a string representing a timezone Details Note that the tz parameter is mandatory because the day boundary is different depending on the time zone and nanotime does not store the timezone as it is just an offset in nanoseconds from the epoch. Examples ## Not run: nano_wday(as.nanotime(\"2020-03-14 23:32:00-04:00\"), \"America/New_York\") nano_wday(as.nanotime(\"2020-03-14 23:32:00 America/New_York\"), \"Europe/Paris\") nano_mday(as.nanotime(\"2020-03-14 23:32:00-04:00\"), \"America/New_York\") nano_mday(as.nanotime(\"2020-03-14 23:32:00 America/New_York\"), \"Europe/Paris\") nano_month(as.nanotime(\"2020-12-31 23:32:00-04:00\"), \"America/New_York\") nano_month(as.nanotime(\"2020-12-31 23:32:00 America/New_York\"), \"Europe/Paris\") nano_year(as.nanotime(\"2020-12-31 23:32:00-04:00\"), \"America/New_York\") nano_year(as.nanotime(\"2020-12-31 23:32:00 America/New_York\"), \"Europe/Paris\") ## End(Not run)","title":"Nano year"},{"location":"man/nano_year/#get-a-component-of-a-date-time","text":"","title":"Get a component of a date time"},{"location":"man/nano_year/#description","text":"Get a component of a date time. nano_wday returns the numeric position in a week, with Sunday == 0. nano_mday returns the numeric day (i.e. a value from 1 to 31). nano_month returns the month (i.e. a value from 1 to 12). nano_year returns the year.","title":"Description"},{"location":"man/nano_year/#usage","text":"nano_wday(x, tz) nano_mday(x, tz) nano_month(x, tz) nano_year(x, tz)","title":"Usage"},{"location":"man/nano_year/#arguments","text":"x a nanotime object tz character a string representing a timezone","title":"Arguments"},{"location":"man/nano_year/#details","text":"Note that the tz parameter is mandatory because the day boundary is different depending on the time zone and nanotime does not store the timezone as it is just an offset in nanoseconds from the epoch.","title":"Details"},{"location":"man/nano_year/#examples","text":"## Not run: nano_wday(as.nanotime(\"2020-03-14 23:32:00-04:00\"), \"America/New_York\") nano_wday(as.nanotime(\"2020-03-14 23:32:00 America/New_York\"), \"Europe/Paris\") nano_mday(as.nanotime(\"2020-03-14 23:32:00-04:00\"), \"America/New_York\") nano_mday(as.nanotime(\"2020-03-14 23:32:00 America/New_York\"), \"Europe/Paris\") nano_month(as.nanotime(\"2020-12-31 23:32:00-04:00\"), \"America/New_York\") nano_month(as.nanotime(\"2020-12-31 23:32:00 America/New_York\"), \"Europe/Paris\") nano_year(as.nanotime(\"2020-12-31 23:32:00-04:00\"), \"America/New_York\") nano_year(as.nanotime(\"2020-12-31 23:32:00 America/New_York\"), \"Europe/Paris\") ## End(Not run)","title":"Examples"},{"location":"man/nanoduration/","text":"Duration type with nanosecond precision Description The type nanoduration is a length of time (implemented as an S4 class) with nanosecond precision. It is a count of nanoseconds and may be negative. The expected arithmetic operations are provided, including sequence generation. Usage nanoduration(hours = 0L, minutes = 0L, seconds = 0L, nanoseconds = 0L) ## S4 method for signature 'character' as.nanoduration(x) ## S4 method for signature 'integer64' as.nanoduration(x) ## S4 method for signature 'numeric' as.nanoduration(x) ## S4 method for signature 'integer' as.nanoduration(x) ## S4 method for signature 'difftime' as.nanoduration(x) ## S4 method for signature ''NULL'' as.nanoduration(x) ## S4 method for signature 'missing' as.nanoduration(x) ## S4 method for signature 'nanoduration' show(object) ## S4 method for signature 'nanoduration' print(x, quote = FALSE, ...) ## S3 method for class 'nanoduration' format(x, ...) ## S3 method for class 'nanoduration' as.integer64(x, ...) ## S4 method for signature 'nanoduration' as.character(x) ## S4 method for signature 'nanoduration' is.na(x) ## S4 method for signature 'nanoduration,nanoduration' e1 - e2 ## S4 method for signature 'nanoduration,integer64' e1 - e2 ## S4 method for signature 'nanoduration,integer' e1 - e2 ## S4 method for signature 'nanoduration,numeric' e1 - e2 ## S4 method for signature 'nanoduration,difftime' e1 - e2 ## S4 method for signature 'nanoduration,ANY' e1 - e2 ## S4 method for signature 'nanotime,nanoduration' e1 - e2 ## S4 method for signature 'nanotime,difftime' e1 - e2 ## S4 method for signature 'integer64,nanoduration' e1 - e2 ## S4 method for signature 'integer,nanoduration' e1 - e2 ## S4 method for signature 'numeric,nanoduration' e1 - e2 ## S4 method for signature 'difftime,nanoduration' e1 - e2 ## S4 method for signature 'ANY,nanoduration' e1 - e2 ## S4 method for signature 'nanoduration,ANY' e1 + e2 ## S4 method for signature 'nanoduration,nanoduration' e1 + e2 ## S4 method for signature 'nanoduration,integer64' e1 + e2 ## S4 method for signature 'nanoduration,numeric' e1 + e2 ## S4 method for signature 'nanoduration,difftime' e1 + e2 ## S4 method for signature 'nanotime,nanoduration' e1 + e2 ## S4 method for signature 'nanotime,difftime' e1 + e2 ## S4 method for signature 'nanoduration,nanotime' e1 + e2 ## S4 method for signature 'difftime,nanotime' e1 + e2 ## S4 method for signature 'nanoival,nanoduration' e1 + e2 ## S4 method for signature 'nanoival,nanoduration' e1 - e2 ## S4 method for signature 'nanoduration,nanoival' e1 + e2 ## S4 method for signature 'nanoival,difftime' e1 + e2 ## S4 method for signature 'nanoival,difftime' e1 - e2 ## S4 method for signature 'difftime,nanoival' e1 + e2 ## S4 method for signature 'integer64,nanoduration' e1 + e2 ## S4 method for signature 'numeric,nanoduration' e1 + e2 ## S4 method for signature 'difftime,nanoduration' e1 + e2 ## S4 method for signature 'nanoduration,numeric' e1 * e2 ## S4 method for signature 'nanoduration,integer64' e1 * e2 ## S4 method for signature 'numeric,nanoduration' e1 * e2 ## S4 method for signature 'integer64,nanoduration' e1 * e2 ## S4 method for signature 'nanoduration,nanoduration' e1 / e2 ## S4 method for signature 'nanoduration,integer64' e1 / e2 ## S4 method for signature 'nanoduration,numeric' e1 / e2 ## S4 method for signature 'nanoduration,ANY' Arith(e1, e2) ## S4 method for signature 'nanoduration,character' Compare(e1, e2) ## S4 method for signature 'character,nanoduration' Compare(e1, e2) ## S4 method for signature 'nanoduration,ANY' Compare(e1, e2) ## S4 method for signature 'nanoduration' abs(x) ## S4 method for signature 'nanoduration' sign(x) ## S4 method for signature 'nanoduration' sum(x, ..., na.rm = FALSE) ## S4 method for signature 'nanoduration' min(x, ..., na.rm = FALSE) ## S4 method for signature 'nanoduration' max(x, ..., na.rm = FALSE) ## S4 method for signature 'nanoduration' range(x, ..., na.rm = FALSE) ## S4 method for signature 'nanoduration' x[[i, j, ..., drop = FALSE]] ## S4 method for signature 'nanoduration,numeric' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoduration,logical' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoduration,character' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoduration,ANY' x[i, j, ..., drop = FALSE] ## S4 replacement method for signature 'nanoduration,ANY,ANY,ANY' x[i, j, ...] <- value ## S3 method for class 'nanoduration' c(...) NA_nanoduration_ Arguments hours number of hours minutes number of minutes seconds number of seconds nanoseconds number of nanoseconds x a nanoduration object object argument for method show quote indicates if the output of print should be quoted ... further arguments passed to or from methods. e1 Operand of class nanoival e2 Operand of class nanoival na.rm if TRUE NA values are removed for the computation i index specifying elements to extract or replace. j Required for [ signature but ignored here drop Required for [ signature but ignored here value argument for nanoduration-class Format An object of class nanoduration of length 1. Details A nanoduration can be constructed with the function as.nanoduration which can take the types integer64 , integer and numeric (all indicating the count in nanosecond units) or the type character . It can also be constructed by specifying with individual arguments the hours, minutes, seconds and nanoseconds with a call to nanoduration . A nanoduration is displayed as hours, minutes, seconds and nanoseconds like this: 110:12:34.123_453_001 . The nanosecond precision displayed is adjusted as necessary, so e.g. 1 second is displayed as 00:00:01 . Value A nanoduration object Author(s) Dirk Eddelbuettel Leonardo Silvestri See Also nanotime Examples ## constructors: nanoduration(hours=10, minutes=3, seconds=2, nanoseconds=999999999) as.nanoduration(\"10:03:02.999_999_999\") as.nanoduration(36182999999999) ## arithmetic: as.nanoduration(10e9) - as.nanoduration(9e9) as.nanoduration(10e9) + as.nanoduration(-9e9) as.nanoduration(\"24:00:00\") / 2 as.nanoduration(\"24:00:00\") / as.nanoduration(\"12:00:00\") ## comparison: as.nanoduration(\"10:03:02.999_999_999\") == 36182999999999 as.nanoduration(\"10:03:02.999_999_999\") > as.nanoduration(\"10:03:02.999_999_998\") as.nanoduration(\"10:03:02.999_999_998\") < \"10:03:02.999_999_999\"","title":"Nanoduration"},{"location":"man/nanoduration/#duration-type-with-nanosecond-precision","text":"","title":"Duration type with nanosecond precision"},{"location":"man/nanoduration/#description","text":"The type nanoduration is a length of time (implemented as an S4 class) with nanosecond precision. It is a count of nanoseconds and may be negative. The expected arithmetic operations are provided, including sequence generation.","title":"Description"},{"location":"man/nanoduration/#usage","text":"nanoduration(hours = 0L, minutes = 0L, seconds = 0L, nanoseconds = 0L) ## S4 method for signature 'character' as.nanoduration(x) ## S4 method for signature 'integer64' as.nanoduration(x) ## S4 method for signature 'numeric' as.nanoduration(x) ## S4 method for signature 'integer' as.nanoduration(x) ## S4 method for signature 'difftime' as.nanoduration(x) ## S4 method for signature ''NULL'' as.nanoduration(x) ## S4 method for signature 'missing' as.nanoduration(x) ## S4 method for signature 'nanoduration' show(object) ## S4 method for signature 'nanoduration' print(x, quote = FALSE, ...) ## S3 method for class 'nanoduration' format(x, ...) ## S3 method for class 'nanoduration' as.integer64(x, ...) ## S4 method for signature 'nanoduration' as.character(x) ## S4 method for signature 'nanoduration' is.na(x) ## S4 method for signature 'nanoduration,nanoduration' e1 - e2 ## S4 method for signature 'nanoduration,integer64' e1 - e2 ## S4 method for signature 'nanoduration,integer' e1 - e2 ## S4 method for signature 'nanoduration,numeric' e1 - e2 ## S4 method for signature 'nanoduration,difftime' e1 - e2 ## S4 method for signature 'nanoduration,ANY' e1 - e2 ## S4 method for signature 'nanotime,nanoduration' e1 - e2 ## S4 method for signature 'nanotime,difftime' e1 - e2 ## S4 method for signature 'integer64,nanoduration' e1 - e2 ## S4 method for signature 'integer,nanoduration' e1 - e2 ## S4 method for signature 'numeric,nanoduration' e1 - e2 ## S4 method for signature 'difftime,nanoduration' e1 - e2 ## S4 method for signature 'ANY,nanoduration' e1 - e2 ## S4 method for signature 'nanoduration,ANY' e1 + e2 ## S4 method for signature 'nanoduration,nanoduration' e1 + e2 ## S4 method for signature 'nanoduration,integer64' e1 + e2 ## S4 method for signature 'nanoduration,numeric' e1 + e2 ## S4 method for signature 'nanoduration,difftime' e1 + e2 ## S4 method for signature 'nanotime,nanoduration' e1 + e2 ## S4 method for signature 'nanotime,difftime' e1 + e2 ## S4 method for signature 'nanoduration,nanotime' e1 + e2 ## S4 method for signature 'difftime,nanotime' e1 + e2 ## S4 method for signature 'nanoival,nanoduration' e1 + e2 ## S4 method for signature 'nanoival,nanoduration' e1 - e2 ## S4 method for signature 'nanoduration,nanoival' e1 + e2 ## S4 method for signature 'nanoival,difftime' e1 + e2 ## S4 method for signature 'nanoival,difftime' e1 - e2 ## S4 method for signature 'difftime,nanoival' e1 + e2 ## S4 method for signature 'integer64,nanoduration' e1 + e2 ## S4 method for signature 'numeric,nanoduration' e1 + e2 ## S4 method for signature 'difftime,nanoduration' e1 + e2 ## S4 method for signature 'nanoduration,numeric' e1 * e2 ## S4 method for signature 'nanoduration,integer64' e1 * e2 ## S4 method for signature 'numeric,nanoduration' e1 * e2 ## S4 method for signature 'integer64,nanoduration' e1 * e2 ## S4 method for signature 'nanoduration,nanoduration' e1 / e2 ## S4 method for signature 'nanoduration,integer64' e1 / e2 ## S4 method for signature 'nanoduration,numeric' e1 / e2 ## S4 method for signature 'nanoduration,ANY' Arith(e1, e2) ## S4 method for signature 'nanoduration,character' Compare(e1, e2) ## S4 method for signature 'character,nanoduration' Compare(e1, e2) ## S4 method for signature 'nanoduration,ANY' Compare(e1, e2) ## S4 method for signature 'nanoduration' abs(x) ## S4 method for signature 'nanoduration' sign(x) ## S4 method for signature 'nanoduration' sum(x, ..., na.rm = FALSE) ## S4 method for signature 'nanoduration' min(x, ..., na.rm = FALSE) ## S4 method for signature 'nanoduration' max(x, ..., na.rm = FALSE) ## S4 method for signature 'nanoduration' range(x, ..., na.rm = FALSE) ## S4 method for signature 'nanoduration' x[[i, j, ..., drop = FALSE]] ## S4 method for signature 'nanoduration,numeric' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoduration,logical' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoduration,character' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoduration,ANY' x[i, j, ..., drop = FALSE] ## S4 replacement method for signature 'nanoduration,ANY,ANY,ANY' x[i, j, ...] <- value ## S3 method for class 'nanoduration' c(...) NA_nanoduration_","title":"Usage"},{"location":"man/nanoduration/#arguments","text":"hours number of hours minutes number of minutes seconds number of seconds nanoseconds number of nanoseconds x a nanoduration object object argument for method show quote indicates if the output of print should be quoted ... further arguments passed to or from methods. e1 Operand of class nanoival e2 Operand of class nanoival na.rm if TRUE NA values are removed for the computation i index specifying elements to extract or replace. j Required for [ signature but ignored here drop Required for [ signature but ignored here value argument for nanoduration-class","title":"Arguments"},{"location":"man/nanoduration/#format","text":"An object of class nanoduration of length 1.","title":"Format"},{"location":"man/nanoduration/#details","text":"A nanoduration can be constructed with the function as.nanoduration which can take the types integer64 , integer and numeric (all indicating the count in nanosecond units) or the type character . It can also be constructed by specifying with individual arguments the hours, minutes, seconds and nanoseconds with a call to nanoduration . A nanoduration is displayed as hours, minutes, seconds and nanoseconds like this: 110:12:34.123_453_001 . The nanosecond precision displayed is adjusted as necessary, so e.g. 1 second is displayed as 00:00:01 .","title":"Details"},{"location":"man/nanoduration/#value","text":"A nanoduration object","title":"Value"},{"location":"man/nanoduration/#authors","text":"Dirk Eddelbuettel Leonardo Silvestri","title":"Author(s)"},{"location":"man/nanoduration/#see-also","text":"nanotime","title":"See Also"},{"location":"man/nanoduration/#examples","text":"## constructors: nanoduration(hours=10, minutes=3, seconds=2, nanoseconds=999999999) as.nanoduration(\"10:03:02.999_999_999\") as.nanoduration(36182999999999) ## arithmetic: as.nanoduration(10e9) - as.nanoduration(9e9) as.nanoduration(10e9) + as.nanoduration(-9e9) as.nanoduration(\"24:00:00\") / 2 as.nanoduration(\"24:00:00\") / as.nanoduration(\"12:00:00\") ## comparison: as.nanoduration(\"10:03:02.999_999_999\") == 36182999999999 as.nanoduration(\"10:03:02.999_999_999\") > as.nanoduration(\"10:03:02.999_999_998\") as.nanoduration(\"10:03:02.999_999_998\") < \"10:03:02.999_999_999\"","title":"Examples"},{"location":"man/nanoival/","text":"Interval type with nanosecond precision Description nanoival is a time interval type (an S4 class) with nanosecond precision. One of its purposes is to allow quick subsetting of a nanotime vector. nanoival is composed of a nanotime pair which defines the start and end of the time interval. Additionally, it has a pair of logical values which determine if the start and end of the time interval are open (true) or closed (false). Usage nanoival(start, end, sopen = FALSE, eopen = TRUE) ## S4 method for signature 'nanoival' nanoival.start(x) ## S4 method for signature 'nanoival' nanoival.end(x) ## S4 method for signature 'nanoival' nanoival.sopen(x) ## S4 method for signature 'nanoival' nanoival.eopen(x) ## S3 method for class 'nanoival' format(x, ...) ## S4 method for signature 'nanoival' print(x, quote = FALSE, ...) ## S4 method for signature 'nanoival' show(object) ## S4 method for signature 'character' as.nanoival(from, format = \"\", tz = \"\") ## S4 method for signature ''NULL'' as.nanoival(from, format = \"\", tz = \"\") ## S4 method for signature 'missing' as.nanoival(from, format = \"\", tz = \"\") ## S4 method for signature 'nanoival' is.na(x) ## S4 replacement method for signature 'nanoival' is.na(x) <- value ## S4 method for signature 'nanoival,nanoival' e1 < e2 ## S4 method for signature 'nanoival,nanoival' e1 <= e2 ## S4 method for signature 'nanoival,nanoival' e1 > e2 ## S4 method for signature 'nanoival,nanoival' e1 >= e2 ## S4 method for signature 'nanoival,nanoival' e1 == e2 ## S4 method for signature 'nanoival,nanoival' e1 != e2 ## S4 method for signature 'nanoival,integer64' e1 - e2 ## S4 method for signature 'nanoival,numeric' e1 - e2 ## S4 method for signature 'nanoival,integer64' e1 + e2 ## S4 method for signature 'nanoival,numeric' e1 + e2 ## S4 method for signature 'integer64,nanoival' e1 + e2 ## S4 method for signature 'numeric,nanoival' e1 + e2 ## S4 method for signature 'nanoival' x[[i, j, ..., drop = FALSE]] ## S4 method for signature 'nanoival,logical' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoival,numeric' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoival,character' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoival,ANY' x[i, j, ..., drop = FALSE] ## S4 replacement method for signature 'nanoival,logical,ANY,nanoival' x[i, j, ...] <- value ## S3 method for class 'nanoival' c(...) ## S4 method for signature 'nanoival' t(x) ## S4 method for signature 'nanotime,nanoival' x[i, j, ..., drop = TRUE] NA_nanoival_ ## S3 method for class 'nanoival' as.character(x, ...) Arguments start nanotime start of interval end nanotime end of interval sopen logical indicating if the start of the interval is open eopen logical indicating if the end of the interval is open x , from a nanoival object ... further arguments passed to or from methods. quote indicates if the output of print should be quoted object argument for method show format A character string. Can also be set via options(\"nanotimeFormat\") and uses \u2018%Y-%m-%dT%H:%M:%E9S%Ez\u2019 as a default and fallback tz character indicating a timezone value argument for nanoival-class e1 Operand of class nanoival e2 Operand of class nanoival i index specifying elements to extract or replace. j Required for [ signature but ignored here drop Required for [ signature but ignored here Format An object of class nanoival of length 1. Details An interval object can be constructed with the constructor nanoival which takes as arguments two nanotime objects that define the start and the end of the interval, together with two logical arguments that define if the start and the end of the interval are open (true) or closed (false) (note that these objects can all be vector, and therefore the interval object is not necessarily scalar). Alternatively, an interval can be constructed with a character : the format follows that of nanotime ; the start time is preceeded by either - or + indicating if the interval start is open (-) or closed (+); the start and end times are separated by an arrow -> ; the end is folloed by either - or + which have the same semantics as the start time. The most important set of methods defined for interval are set functions intersect , union and setdiff . Additionally, interval allows the subsetting into a nanotime vector. Note that subsetting is allowed only if the nanotime vector is sorted. Finally, accessors are provided to get the interval start ( start ), the end ( end ), the open/close status of the start ( sopen ) and the open/close status of the end ( eopen ). The former return a nanotime while the latter return a logical . Value A nanoival object Output Format Formatting and character conversion for nanoival objects is identical to nanotime objects. The default format is ISO3339 compliant: %Y-%m-%dT%H:%M:%E9S%Ez . It specifies a standard ISO 8601 part for date and time \u2014 as well as nine digits of precision for fractional seconds (down to nanoseconds) and on offset (typically zero as we default to UTC). It can be overriden by using options() with the key of nanotimeFormat and a suitable value. Similarly, nanotimeTz can be used to select a different timezone. Author(s) Dirk Eddelbuettel Leonardo Silvestri See Also intersect.idx , setdiff.idx , Examples ## Not run: ## creating a \\code{nanoival}, with the start time included ('+') and the end ## time excluded ('-') as.nanoival(\"+2012-03-01T21:21:00.000000001+00:00->2015-01-01T21:22:00.000000999+04:00-\") ## a \\code{nanoival} can also be created with a pair of \\code{nanotime} objects, a start ## and an end, and optionally two logicals determining if the interval start(end) are open ## or closed; by default the start is closed and end is open: start <- nanotime(\"2012-03-01T21:21:00.000000001+00:00\") end <- nanotime(\"2013-03-01T21:21:00.000000001+00:00\") nanoival(start, end) ## a vector of 'nanotime' can be subsetted by a 'nanoival': one_second <- 1e9 a <- seq(nanotime(\"2012-12-12 12:12:12+00:00\"), length.out=10, by=one_second) idx <- c(as.nanoival(\"-2012-12-12 12:12:10+00:00 -> 2012-12-12 12:12:14+00:00-\"), as.nanoival(\"+2012-12-12 12:12:18+00:00 -> 2012-12-12 12:12:20+00:00+\")) a[idx] ## End(Not run)","title":"Nanoival"},{"location":"man/nanoival/#interval-type-with-nanosecond-precision","text":"","title":"Interval type with nanosecond precision"},{"location":"man/nanoival/#description","text":"nanoival is a time interval type (an S4 class) with nanosecond precision. One of its purposes is to allow quick subsetting of a nanotime vector. nanoival is composed of a nanotime pair which defines the start and end of the time interval. Additionally, it has a pair of logical values which determine if the start and end of the time interval are open (true) or closed (false).","title":"Description"},{"location":"man/nanoival/#usage","text":"nanoival(start, end, sopen = FALSE, eopen = TRUE) ## S4 method for signature 'nanoival' nanoival.start(x) ## S4 method for signature 'nanoival' nanoival.end(x) ## S4 method for signature 'nanoival' nanoival.sopen(x) ## S4 method for signature 'nanoival' nanoival.eopen(x) ## S3 method for class 'nanoival' format(x, ...) ## S4 method for signature 'nanoival' print(x, quote = FALSE, ...) ## S4 method for signature 'nanoival' show(object) ## S4 method for signature 'character' as.nanoival(from, format = \"\", tz = \"\") ## S4 method for signature ''NULL'' as.nanoival(from, format = \"\", tz = \"\") ## S4 method for signature 'missing' as.nanoival(from, format = \"\", tz = \"\") ## S4 method for signature 'nanoival' is.na(x) ## S4 replacement method for signature 'nanoival' is.na(x) <- value ## S4 method for signature 'nanoival,nanoival' e1 < e2 ## S4 method for signature 'nanoival,nanoival' e1 <= e2 ## S4 method for signature 'nanoival,nanoival' e1 > e2 ## S4 method for signature 'nanoival,nanoival' e1 >= e2 ## S4 method for signature 'nanoival,nanoival' e1 == e2 ## S4 method for signature 'nanoival,nanoival' e1 != e2 ## S4 method for signature 'nanoival,integer64' e1 - e2 ## S4 method for signature 'nanoival,numeric' e1 - e2 ## S4 method for signature 'nanoival,integer64' e1 + e2 ## S4 method for signature 'nanoival,numeric' e1 + e2 ## S4 method for signature 'integer64,nanoival' e1 + e2 ## S4 method for signature 'numeric,nanoival' e1 + e2 ## S4 method for signature 'nanoival' x[[i, j, ..., drop = FALSE]] ## S4 method for signature 'nanoival,logical' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoival,numeric' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoival,character' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoival,ANY' x[i, j, ..., drop = FALSE] ## S4 replacement method for signature 'nanoival,logical,ANY,nanoival' x[i, j, ...] <- value ## S3 method for class 'nanoival' c(...) ## S4 method for signature 'nanoival' t(x) ## S4 method for signature 'nanotime,nanoival' x[i, j, ..., drop = TRUE] NA_nanoival_ ## S3 method for class 'nanoival' as.character(x, ...)","title":"Usage"},{"location":"man/nanoival/#arguments","text":"start nanotime start of interval end nanotime end of interval sopen logical indicating if the start of the interval is open eopen logical indicating if the end of the interval is open x , from a nanoival object ... further arguments passed to or from methods. quote indicates if the output of print should be quoted object argument for method show format A character string. Can also be set via options(\"nanotimeFormat\") and uses \u2018%Y-%m-%dT%H:%M:%E9S%Ez\u2019 as a default and fallback tz character indicating a timezone value argument for nanoival-class e1 Operand of class nanoival e2 Operand of class nanoival i index specifying elements to extract or replace. j Required for [ signature but ignored here drop Required for [ signature but ignored here","title":"Arguments"},{"location":"man/nanoival/#format","text":"An object of class nanoival of length 1.","title":"Format"},{"location":"man/nanoival/#details","text":"An interval object can be constructed with the constructor nanoival which takes as arguments two nanotime objects that define the start and the end of the interval, together with two logical arguments that define if the start and the end of the interval are open (true) or closed (false) (note that these objects can all be vector, and therefore the interval object is not necessarily scalar). Alternatively, an interval can be constructed with a character : the format follows that of nanotime ; the start time is preceeded by either - or + indicating if the interval start is open (-) or closed (+); the start and end times are separated by an arrow -> ; the end is folloed by either - or + which have the same semantics as the start time. The most important set of methods defined for interval are set functions intersect , union and setdiff . Additionally, interval allows the subsetting into a nanotime vector. Note that subsetting is allowed only if the nanotime vector is sorted. Finally, accessors are provided to get the interval start ( start ), the end ( end ), the open/close status of the start ( sopen ) and the open/close status of the end ( eopen ). The former return a nanotime while the latter return a logical .","title":"Details"},{"location":"man/nanoival/#value","text":"A nanoival object","title":"Value"},{"location":"man/nanoival/#output-format","text":"Formatting and character conversion for nanoival objects is identical to nanotime objects. The default format is ISO3339 compliant: %Y-%m-%dT%H:%M:%E9S%Ez . It specifies a standard ISO 8601 part for date and time \u2014 as well as nine digits of precision for fractional seconds (down to nanoseconds) and on offset (typically zero as we default to UTC). It can be overriden by using options() with the key of nanotimeFormat and a suitable value. Similarly, nanotimeTz can be used to select a different timezone.","title":"Output Format"},{"location":"man/nanoival/#authors","text":"Dirk Eddelbuettel Leonardo Silvestri","title":"Author(s)"},{"location":"man/nanoival/#see-also","text":"intersect.idx , setdiff.idx ,","title":"See Also"},{"location":"man/nanoival/#examples","text":"## Not run: ## creating a \\code{nanoival}, with the start time included ('+') and the end ## time excluded ('-') as.nanoival(\"+2012-03-01T21:21:00.000000001+00:00->2015-01-01T21:22:00.000000999+04:00-\") ## a \\code{nanoival} can also be created with a pair of \\code{nanotime} objects, a start ## and an end, and optionally two logicals determining if the interval start(end) are open ## or closed; by default the start is closed and end is open: start <- nanotime(\"2012-03-01T21:21:00.000000001+00:00\") end <- nanotime(\"2013-03-01T21:21:00.000000001+00:00\") nanoival(start, end) ## a vector of 'nanotime' can be subsetted by a 'nanoival': one_second <- 1e9 a <- seq(nanotime(\"2012-12-12 12:12:12+00:00\"), length.out=10, by=one_second) idx <- c(as.nanoival(\"-2012-12-12 12:12:10+00:00 -> 2012-12-12 12:12:14+00:00-\"), as.nanoival(\"+2012-12-12 12:12:18+00:00 -> 2012-12-12 12:12:20+00:00+\")) a[idx] ## End(Not run)","title":"Examples"},{"location":"man/nanoperiod/","text":"Period type with nanosecond precision Description nanoperiod is a length of time type (implemented as an S4 class) with nanosecond precision. It differs from nanoduration because it is capable of representing calendar months and days. It can thus represent years (12 months) and weeks (7 days). A period is a somewhat abstract representation of time: it is only when anchored to a point in time and in a specific time zone that it is possible to convert it to a specific duration. This means that many of the operations involving periods need the additional argument tz . Usage nanoperiod(months = 0, days = 0, duration = as.nanoduration(0)) ## S4 method for signature 'character' as.nanoperiod(x) ## S4 method for signature 'integer64' as.nanoperiod(x) ## S4 method for signature 'numeric' as.nanoperiod(x) ## S4 method for signature 'integer' as.nanoperiod(x) ## S4 method for signature 'nanoduration' as.nanoperiod(x) ## S4 method for signature ''NULL'' as.nanoperiod(x) ## S4 method for signature 'missing' as.nanoperiod(x) ## S4 method for signature 'nanoperiod' show(object) ## S4 method for signature 'nanoperiod' print(x, quote = FALSE, ...) ## S3 method for class 'nanoperiod' format(x, ...) ## S4 method for signature 'nanoperiod' as.character(x) ## S4 method for signature 'nanoperiod' is.na(x) ## S4 replacement method for signature 'nanoperiod' is.na(x) <- value ## S4 method for signature 'nanoperiod' x[[i, j, ..., drop = FALSE]] ## S4 method for signature 'nanoperiod,numeric' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoperiod,logical' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoperiod,character' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoperiod,ANY' x[i, j, ..., drop = FALSE] ## S4 replacement method for signature 'nanoperiod,ANY,ANY,ANY' x[i, j, ...] <- value ## S3 method for class 'nanoperiod' c(...) ## S4 method for signature 'nanoperiod' names(x) ## S4 replacement method for signature 'nanoperiod' names(x) <- value ## S4 method for signature 'nanoperiod,ANY' e1 - e2 ## S4 method for signature 'nanoperiod,nanoperiod' e1 - e2 ## S4 method for signature 'nanoperiod,nanoduration' e1 - e2 ## S4 method for signature 'nanoperiod,integer64' e1 - e2 ## S4 method for signature 'nanoperiod,numeric' e1 - e2 ## S4 method for signature 'nanoduration,nanoperiod' e1 - e2 ## S4 method for signature 'integer64,nanoperiod' e1 - e2 ## S4 method for signature 'numeric,nanoperiod' e1 - e2 ## S4 method for signature 'nanoperiod,ANY' e1 + e2 ## S4 method for signature 'nanoperiod,nanoperiod' e1 + e2 ## S4 method for signature 'nanoperiod,nanoduration' e1 + e2 ## S4 method for signature 'nanoperiod,integer64' e1 + e2 ## S4 method for signature 'nanoperiod,nanotime' e1 + e2 ## S4 method for signature 'nanoival,nanoperiod' e1 + e2 ## S4 method for signature 'nanoperiod,nanoival' e1 + e2 ## S4 method for signature 'nanotime,nanoperiod' e1 + e2 ## S4 method for signature 'nanoperiod,numeric' e1 + e2 ## S4 method for signature 'nanoduration,nanoperiod' e1 + e2 ## S4 method for signature 'integer64,nanoperiod' e1 + e2 ## S4 method for signature 'numeric,nanoperiod' e1 + e2 ## S4 method for signature 'nanoperiod,integer64' e1 * e2 ## S4 method for signature 'nanoperiod,numeric' e1 * e2 ## S4 method for signature 'integer64,nanoperiod' e1 * e2 ## S4 method for signature 'numeric,nanoperiod' e1 * e2 ## S4 method for signature 'nanoperiod,integer64' e1 / e2 ## S4 method for signature 'nanoperiod,numeric' e1 / e2 ## S4 method for signature 'nanoperiod,nanoperiod' e1 == e2 ## S4 method for signature 'nanoperiod,nanoperiod' e1 != e2 ## S4 method for signature 'nanotime,nanoperiod,character' plus(e1, e2, tz) ## S4 method for signature 'nanoperiod,nanotime,character' plus(e1, e2, tz) ## S4 method for signature 'nanotime,nanoperiod,character' minus(e1, e2, tz) ## S4 method for signature 'nanoperiod,nanotime,character' minus(e1, e2, tz) ## S4 method for signature 'nanoival,nanoperiod,character' plus(e1, e2, tz) ## S4 method for signature 'nanoperiod,nanoival,character' plus(e1, e2, tz) ## S4 method for signature 'nanoival,nanoperiod,character' minus(e1, e2, tz) NA_nanoperiod_ Arguments months Used in the constructor to indicate the number of months of the nanoperiod days Used in the constructor to indicate the number of days of the nanoperiod duration Used in the constructor to indicate the duration component of the nanoperiod x , value An object of class nanoperiod object argument for method show quote indicates if the output of print should be quoted ... further arguments i index specifying elements to extract or replace. j Required for [ signature but ignored here drop Required for [ signature but ignored here e1 Operand of class nanoperiod e2 Operand of class nanoperiod tz character indicating a timezone Format An object of class nanoperiod of length 1. Constructors The true constructor is Output Format A nanoperiod is displayed as months, days, and nanoduration like this: 10m2d/10:12:34.123_453_000 . Details Adding or subtracting nanoperiod and nanotime require a timezone as third argument. For this reason it is not possible to use the binary operator ' + '. Instead the functions ' plus ' and ' minus ' are defined. These functions attempt to keep the same offset within a day in the specified timezone: this means for instance that adding a day when that day crosses a time zone adjustment such as a daylight saving time, results in a true time increment of less or more than 24 hours to preserve the offset. Preserving the offset works for increments that are smaller than a day too, provided the increment results in a datetime where the timezone adjustment is valid. When this is not the case, adding a 'nanoperiod' behaves in the same way as adding a 'nanoduration'. Author(s) Dirk Eddelbuettel Leonardo Silvestri See Also nanotime , nanoduration , nanoival , nanoperiod.month,nanoperiod-method Examples ## Not run: p <- nanoperiod(months=12, days=7, duration=\"01:00:00\") print(p) # when adding a \\code{nanoperiod} to a \\code{nanotime} or to a # \\code{nanoival}, a time zone must be specified: y <- nanotime(\"1970-01-01T00:00:00+00:00\") plus(y, p, tz=\"America/Chicago\") ## End(Not run)","title":"Nanoperiod"},{"location":"man/nanoperiod/#period-type-with-nanosecond-precision","text":"","title":"Period type with nanosecond precision"},{"location":"man/nanoperiod/#description","text":"nanoperiod is a length of time type (implemented as an S4 class) with nanosecond precision. It differs from nanoduration because it is capable of representing calendar months and days. It can thus represent years (12 months) and weeks (7 days). A period is a somewhat abstract representation of time: it is only when anchored to a point in time and in a specific time zone that it is possible to convert it to a specific duration. This means that many of the operations involving periods need the additional argument tz .","title":"Description"},{"location":"man/nanoperiod/#usage","text":"nanoperiod(months = 0, days = 0, duration = as.nanoduration(0)) ## S4 method for signature 'character' as.nanoperiod(x) ## S4 method for signature 'integer64' as.nanoperiod(x) ## S4 method for signature 'numeric' as.nanoperiod(x) ## S4 method for signature 'integer' as.nanoperiod(x) ## S4 method for signature 'nanoduration' as.nanoperiod(x) ## S4 method for signature ''NULL'' as.nanoperiod(x) ## S4 method for signature 'missing' as.nanoperiod(x) ## S4 method for signature 'nanoperiod' show(object) ## S4 method for signature 'nanoperiod' print(x, quote = FALSE, ...) ## S3 method for class 'nanoperiod' format(x, ...) ## S4 method for signature 'nanoperiod' as.character(x) ## S4 method for signature 'nanoperiod' is.na(x) ## S4 replacement method for signature 'nanoperiod' is.na(x) <- value ## S4 method for signature 'nanoperiod' x[[i, j, ..., drop = FALSE]] ## S4 method for signature 'nanoperiod,numeric' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoperiod,logical' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoperiod,character' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanoperiod,ANY' x[i, j, ..., drop = FALSE] ## S4 replacement method for signature 'nanoperiod,ANY,ANY,ANY' x[i, j, ...] <- value ## S3 method for class 'nanoperiod' c(...) ## S4 method for signature 'nanoperiod' names(x) ## S4 replacement method for signature 'nanoperiod' names(x) <- value ## S4 method for signature 'nanoperiod,ANY' e1 - e2 ## S4 method for signature 'nanoperiod,nanoperiod' e1 - e2 ## S4 method for signature 'nanoperiod,nanoduration' e1 - e2 ## S4 method for signature 'nanoperiod,integer64' e1 - e2 ## S4 method for signature 'nanoperiod,numeric' e1 - e2 ## S4 method for signature 'nanoduration,nanoperiod' e1 - e2 ## S4 method for signature 'integer64,nanoperiod' e1 - e2 ## S4 method for signature 'numeric,nanoperiod' e1 - e2 ## S4 method for signature 'nanoperiod,ANY' e1 + e2 ## S4 method for signature 'nanoperiod,nanoperiod' e1 + e2 ## S4 method for signature 'nanoperiod,nanoduration' e1 + e2 ## S4 method for signature 'nanoperiod,integer64' e1 + e2 ## S4 method for signature 'nanoperiod,nanotime' e1 + e2 ## S4 method for signature 'nanoival,nanoperiod' e1 + e2 ## S4 method for signature 'nanoperiod,nanoival' e1 + e2 ## S4 method for signature 'nanotime,nanoperiod' e1 + e2 ## S4 method for signature 'nanoperiod,numeric' e1 + e2 ## S4 method for signature 'nanoduration,nanoperiod' e1 + e2 ## S4 method for signature 'integer64,nanoperiod' e1 + e2 ## S4 method for signature 'numeric,nanoperiod' e1 + e2 ## S4 method for signature 'nanoperiod,integer64' e1 * e2 ## S4 method for signature 'nanoperiod,numeric' e1 * e2 ## S4 method for signature 'integer64,nanoperiod' e1 * e2 ## S4 method for signature 'numeric,nanoperiod' e1 * e2 ## S4 method for signature 'nanoperiod,integer64' e1 / e2 ## S4 method for signature 'nanoperiod,numeric' e1 / e2 ## S4 method for signature 'nanoperiod,nanoperiod' e1 == e2 ## S4 method for signature 'nanoperiod,nanoperiod' e1 != e2 ## S4 method for signature 'nanotime,nanoperiod,character' plus(e1, e2, tz) ## S4 method for signature 'nanoperiod,nanotime,character' plus(e1, e2, tz) ## S4 method for signature 'nanotime,nanoperiod,character' minus(e1, e2, tz) ## S4 method for signature 'nanoperiod,nanotime,character' minus(e1, e2, tz) ## S4 method for signature 'nanoival,nanoperiod,character' plus(e1, e2, tz) ## S4 method for signature 'nanoperiod,nanoival,character' plus(e1, e2, tz) ## S4 method for signature 'nanoival,nanoperiod,character' minus(e1, e2, tz) NA_nanoperiod_","title":"Usage"},{"location":"man/nanoperiod/#arguments","text":"months Used in the constructor to indicate the number of months of the nanoperiod days Used in the constructor to indicate the number of days of the nanoperiod duration Used in the constructor to indicate the duration component of the nanoperiod x , value An object of class nanoperiod object argument for method show quote indicates if the output of print should be quoted ... further arguments i index specifying elements to extract or replace. j Required for [ signature but ignored here drop Required for [ signature but ignored here e1 Operand of class nanoperiod e2 Operand of class nanoperiod tz character indicating a timezone","title":"Arguments"},{"location":"man/nanoperiod/#format","text":"An object of class nanoperiod of length 1.","title":"Format"},{"location":"man/nanoperiod/#constructors","text":"The true constructor is","title":"Constructors"},{"location":"man/nanoperiod/#output-format","text":"A nanoperiod is displayed as months, days, and nanoduration like this: 10m2d/10:12:34.123_453_000 .","title":"Output Format"},{"location":"man/nanoperiod/#details","text":"Adding or subtracting nanoperiod and nanotime require a timezone as third argument. For this reason it is not possible to use the binary operator ' + '. Instead the functions ' plus ' and ' minus ' are defined. These functions attempt to keep the same offset within a day in the specified timezone: this means for instance that adding a day when that day crosses a time zone adjustment such as a daylight saving time, results in a true time increment of less or more than 24 hours to preserve the offset. Preserving the offset works for increments that are smaller than a day too, provided the increment results in a datetime where the timezone adjustment is valid. When this is not the case, adding a 'nanoperiod' behaves in the same way as adding a 'nanoduration'.","title":"Details"},{"location":"man/nanoperiod/#authors","text":"Dirk Eddelbuettel Leonardo Silvestri","title":"Author(s)"},{"location":"man/nanoperiod/#see-also","text":"nanotime , nanoduration , nanoival , nanoperiod.month,nanoperiod-method","title":"See Also"},{"location":"man/nanoperiod/#examples","text":"## Not run: p <- nanoperiod(months=12, days=7, duration=\"01:00:00\") print(p) # when adding a \\code{nanoperiod} to a \\code{nanotime} or to a # \\code{nanoival}, a time zone must be specified: y <- nanotime(\"1970-01-01T00:00:00+00:00\") plus(y, p, tz=\"America/Chicago\") ## End(Not run)","title":"Examples"},{"location":"man/nanoperiod.month/","text":"Nanoperiod accessors Description These functions allow access to the components of a nanoperiod Usage ## S4 method for signature 'nanoperiod' nanoperiod.month(x) ## S4 method for signature 'nanoperiod' nanoperiod.day(x) ## S4 method for signature 'nanoperiod' nanoperiod.nanoduration(x) Arguments x A nanoperiod Value nanoperiod.month and nanoperiod.day return an integer64 whereas nanoperiod.nanoduration returns a nanoduration Author(s) Dirk Eddelbuettel Leonardo Silvestri See Also nanoduration Examples p <- as.nanoperiod(\"2y1m1d/12:00:00\") nanoperiod.month(p) nanoperiod.day(p) nanoperiod.nanoduration(p)","title":"Nanoperiod.month"},{"location":"man/nanoperiod.month/#nanoperiod-accessors","text":"","title":"Nanoperiod accessors"},{"location":"man/nanoperiod.month/#description","text":"These functions allow access to the components of a nanoperiod","title":"Description"},{"location":"man/nanoperiod.month/#usage","text":"## S4 method for signature 'nanoperiod' nanoperiod.month(x) ## S4 method for signature 'nanoperiod' nanoperiod.day(x) ## S4 method for signature 'nanoperiod' nanoperiod.nanoduration(x)","title":"Usage"},{"location":"man/nanoperiod.month/#arguments","text":"x A nanoperiod","title":"Arguments"},{"location":"man/nanoperiod.month/#value","text":"nanoperiod.month and nanoperiod.day return an integer64 whereas nanoperiod.nanoduration returns a nanoduration","title":"Value"},{"location":"man/nanoperiod.month/#authors","text":"Dirk Eddelbuettel Leonardo Silvestri","title":"Author(s)"},{"location":"man/nanoperiod.month/#see-also","text":"nanoduration","title":"See Also"},{"location":"man/nanoperiod.month/#examples","text":"p <- as.nanoperiod(\"2y1m1d/12:00:00\") nanoperiod.month(p) nanoperiod.day(p) nanoperiod.nanoduration(p)","title":"Examples"},{"location":"man/nanotime/","text":"Nanosecond resolution datetime functionality Description Functions to operate on nanosecond time resolution using integer64 bit representation. Conversion functions for several standard R types are provided, and more will be added as needed. Usage nanotime(from, ...) as.nanotime(from, ...) ## S4 method for signature 'character' nanotime(from, format = \"\", tz = \"\") ## S4 method for signature 'character' as.nanotime(from, format = \"\", tz = \"\") nanotime.matrix(x) ## S4 method for signature 'POSIXct' nanotime(from, accurate = TRUE) ## S4 method for signature 'POSIXct' as.nanotime(from, accurate = TRUE) ## S4 method for signature 'POSIXlt' nanotime(from) ## S4 method for signature 'POSIXlt' as.nanotime(from) ## S4 method for signature 'Date' nanotime(from) ## S4 method for signature 'Date' as.nanotime(from) ## S4 method for signature 'nanotime' print(x, format = \"\", tz = \"\", quote = FALSE, ...) ## S4 method for signature 'nanotime' show(object) ## S3 method for class 'nanotime' format(x, format = \"\", tz = \"\", ...) ## S3 method for class 'nanotime' index2char(x, ...) ## S3 method for class 'nanotime' as.POSIXct(x, tz = \"\", ...) ## S3 method for class 'nanotime' as.POSIXlt(x, tz = \"\", ...) ## S3 method for class 'nanotime' as.Date(x, ...) ## S3 method for class 'nanotime' as.data.frame(x, ...) ## S3 method for class 'nanotime' as.integer64(x, ...) ## S4 method for signature 'nanotime,character' e1 - e2 ## S4 method for signature 'nanotime,nanotime' e1 - e2 ## S4 method for signature 'nanotime,integer64' e1 - e2 ## S4 method for signature 'nanotime,numeric' e1 - e2 ## S4 method for signature 'ANY,nanotime' e1 - e2 ## S4 method for signature 'nanotime,ANY' e1 - e2 ## S4 method for signature 'nanotime,ANY' e1 + e2 ## S4 method for signature 'nanotime,integer64' e1 + e2 ## S4 method for signature 'nanotime,numeric' e1 + e2 ## S4 method for signature 'ANY,nanotime' e1 + e2 ## S4 method for signature 'integer64,nanotime' e1 + e2 ## S4 method for signature 'numeric,nanotime' e1 + e2 ## S4 method for signature 'nanotime,nanotime' e1 + e2 ## S4 method for signature 'nanotime,nanotime' Arith(e1, e2) ## S4 method for signature 'nanotime,ANY' Arith(e1, e2) ## S4 method for signature 'ANY,nanotime' Arith(e1, e2) ## S4 method for signature 'nanotime,character' Compare(e1, e2) ## S4 method for signature 'character,nanotime' Compare(e1, e2) ## S4 method for signature 'nanotime,POSIXt' Compare(e1, e2) ## S4 method for signature 'POSIXt,nanotime' Compare(e1, e2) ## S4 method for signature 'nanotime,ANY' Compare(e1, e2) ## S4 method for signature 'nanotime,ANY' Logic(e1, e2) ## S4 method for signature 'ANY,nanotime' Logic(e1, e2) ## S4 method for signature 'nanotime' Math(x) ## S4 method for signature 'nanotime' Math2(x, digits) ## S4 method for signature 'nanotime' Summary(x, ..., na.rm = FALSE) ## S4 method for signature 'nanotime' min(x, ..., na.rm = FALSE) ## S4 method for signature 'nanotime' max(x, ..., na.rm = FALSE) ## S4 method for signature 'nanotime' range(x, ..., na.rm = FALSE) ## S4 method for signature 'nanotime' Complex(z) ## S4 method for signature 'nanotime' x[[i, j, ..., drop = FALSE]] ## S4 method for signature 'nanotime,numeric' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanotime,logical' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanotime,character' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanotime,ANY' x[i, j, ..., drop = FALSE] ## S4 replacement method for signature 'nanotime,ANY,ANY,ANY' x[i, j, ...] <- value ## S3 method for class 'nanotime' c(...) ## S4 replacement method for signature 'nanotime' names(x) <- value ## S4 method for signature 'nanotime' is.na(x) NA_nanotime_ ## S3 method for class 'nanotime' as.character(x, ...) ## S3 method for class 'nanoduration' as.data.frame(x, ...) Arguments ... further arguments passed to or from methods. format A character string. Can also be set via options(\"nanotimeFormat\") and uses \u2018%Y-%m-%dT%H:%M:%E9S%Ez\u2019 as a default and fallback tz character specifying a timezone which is required for as.POSIXct , as.POSIXlt and can be specified for as.nanotime , format and print ; it can also be set via options(\"nanotimeTz\") and uses \u2018UTC\u2019 as a default and fallback x , from nanotime objects accurate in the conversion from POSIXct to nanotime , indicates if one wants to preserve the maximum precision possible; the default is TRUE , but in most situations the loss of precision is negligible, and setting this parameter to TRUE will make the conversion nearly an order of magnitude faster quote indicates if the output of print should be quoted object argument for method show e1 Operand of class nanotime e2 Operand of class nanotime digits Required for Math2 signature but ignored here na.rm a logical indicating whether missing values should be removed. z Required for Complex signature but ignored here i index specifying elements to extract or replace. j Required for [ signature but ignored here drop Required for [ signature but ignored here value argument for nanotime-class Format An object of class nanotime of length 1. Details Notice that the conversion from POSIXct explicitly sets the last three digits to zero. Nanosecond time stored in a 64-bit integer has nineteen digits precision where doubles (which are used internally for POSIXct as well) only have sixteen digits. So rather than showing three more (essentially random ) digits it is constructed such that these three additional digits are zeros. Value A nanotime object Caveats Working with dates and times is difficult . One needs a representation of both time points and time duration . In R, think of Date or POSIXct objects for the former, and difftime for the later. Here we have time points nanotime , an interval type nanoival and two flavors of duration which are a simple count of nanoseconds nanoduration and a calendar duration that is able to track concepts such as months and days nanoperiod . Point in time and intervals are all based on durations relative to the epoch of January 1, 1970. Input and Output Format Formatting and character conversion for nanotime objects is done by functions from the RcppCCTZ package relying on code from its embedded CCTZ library. The default format is ISO3339 compliant: %Y-%m-%dT%H:%M:%E9S%Ez . It specifies a standard ISO 8601 part for date and time \u2014 as well as nine digits of precision for fractional seconds (down to nanoseconds) and on offset (typically zero as we default to UTC). It can be overriden by using options() with the key of nanotimeFormat and a suitable value. Similarly, nanotimeTz can be used to select a different timezone. For input, some slack it cut, and various shortened formats are accepted by default such as 2020-03-10 or 2020-03-10 18:16:00 , or 2020-03-10 18:16:00.001 (and the \u2018T\u2019 separator is optional. tz parameter usage in constructors The tz parameter is allowed only when constructing a nanotime from a character . This is because any numeric , Date and POSIXct is de facto considered an offset since the epoch. On the contrary, a character is considered interpretable and hence if it does not contain a timezone in its representation, it is possible to specify the tz argument to specify in which timezone it should be interpreted. This is useful in particular if one wants to convert a Date to be aligned to the beginning of the day in a specific timezone; in this case one should convert the Date to a character before calling the nanotime constructor with the desired timezone. Author(s) Dirk Eddelbuettel Leonardo Silvestri See Also nanoival , nanoduration , nanoperiod , seq.nanotime as well as the documentation in package RcppCCTZ . Examples ## Not run: x <- nanotime(1) print(x) as.nanotime(\"1970-01-01T00:00:00.000000001+00:00\") as.nanotime(\"2020-03-10 Europe/Berlin\") as.nanotime(\"2020-03-10 18:31:23.001\", tz=\"America/New_York\") as.nanotime(\"2020-03-10T040947190301440\", format=\"%Y-%m-%dT%H%M%S%E*f\") x <- x + 1 print(x) format(x) x <- x + 10 print(x) format(x) nanotime(Sys.time()) + 1:3 # three elements each 1 ns apart seq(x, by=as.nanoperiod(\"1d\"), length.out=5, tz=\"Asia/Tokyo\") ## End(Not run)","title":"Nanotime"},{"location":"man/nanotime/#nanosecond-resolution-datetime-functionality","text":"","title":"Nanosecond resolution datetime functionality"},{"location":"man/nanotime/#description","text":"Functions to operate on nanosecond time resolution using integer64 bit representation. Conversion functions for several standard R types are provided, and more will be added as needed.","title":"Description"},{"location":"man/nanotime/#usage","text":"nanotime(from, ...) as.nanotime(from, ...) ## S4 method for signature 'character' nanotime(from, format = \"\", tz = \"\") ## S4 method for signature 'character' as.nanotime(from, format = \"\", tz = \"\") nanotime.matrix(x) ## S4 method for signature 'POSIXct' nanotime(from, accurate = TRUE) ## S4 method for signature 'POSIXct' as.nanotime(from, accurate = TRUE) ## S4 method for signature 'POSIXlt' nanotime(from) ## S4 method for signature 'POSIXlt' as.nanotime(from) ## S4 method for signature 'Date' nanotime(from) ## S4 method for signature 'Date' as.nanotime(from) ## S4 method for signature 'nanotime' print(x, format = \"\", tz = \"\", quote = FALSE, ...) ## S4 method for signature 'nanotime' show(object) ## S3 method for class 'nanotime' format(x, format = \"\", tz = \"\", ...) ## S3 method for class 'nanotime' index2char(x, ...) ## S3 method for class 'nanotime' as.POSIXct(x, tz = \"\", ...) ## S3 method for class 'nanotime' as.POSIXlt(x, tz = \"\", ...) ## S3 method for class 'nanotime' as.Date(x, ...) ## S3 method for class 'nanotime' as.data.frame(x, ...) ## S3 method for class 'nanotime' as.integer64(x, ...) ## S4 method for signature 'nanotime,character' e1 - e2 ## S4 method for signature 'nanotime,nanotime' e1 - e2 ## S4 method for signature 'nanotime,integer64' e1 - e2 ## S4 method for signature 'nanotime,numeric' e1 - e2 ## S4 method for signature 'ANY,nanotime' e1 - e2 ## S4 method for signature 'nanotime,ANY' e1 - e2 ## S4 method for signature 'nanotime,ANY' e1 + e2 ## S4 method for signature 'nanotime,integer64' e1 + e2 ## S4 method for signature 'nanotime,numeric' e1 + e2 ## S4 method for signature 'ANY,nanotime' e1 + e2 ## S4 method for signature 'integer64,nanotime' e1 + e2 ## S4 method for signature 'numeric,nanotime' e1 + e2 ## S4 method for signature 'nanotime,nanotime' e1 + e2 ## S4 method for signature 'nanotime,nanotime' Arith(e1, e2) ## S4 method for signature 'nanotime,ANY' Arith(e1, e2) ## S4 method for signature 'ANY,nanotime' Arith(e1, e2) ## S4 method for signature 'nanotime,character' Compare(e1, e2) ## S4 method for signature 'character,nanotime' Compare(e1, e2) ## S4 method for signature 'nanotime,POSIXt' Compare(e1, e2) ## S4 method for signature 'POSIXt,nanotime' Compare(e1, e2) ## S4 method for signature 'nanotime,ANY' Compare(e1, e2) ## S4 method for signature 'nanotime,ANY' Logic(e1, e2) ## S4 method for signature 'ANY,nanotime' Logic(e1, e2) ## S4 method for signature 'nanotime' Math(x) ## S4 method for signature 'nanotime' Math2(x, digits) ## S4 method for signature 'nanotime' Summary(x, ..., na.rm = FALSE) ## S4 method for signature 'nanotime' min(x, ..., na.rm = FALSE) ## S4 method for signature 'nanotime' max(x, ..., na.rm = FALSE) ## S4 method for signature 'nanotime' range(x, ..., na.rm = FALSE) ## S4 method for signature 'nanotime' Complex(z) ## S4 method for signature 'nanotime' x[[i, j, ..., drop = FALSE]] ## S4 method for signature 'nanotime,numeric' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanotime,logical' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanotime,character' x[i, j, ..., drop = FALSE] ## S4 method for signature 'nanotime,ANY' x[i, j, ..., drop = FALSE] ## S4 replacement method for signature 'nanotime,ANY,ANY,ANY' x[i, j, ...] <- value ## S3 method for class 'nanotime' c(...) ## S4 replacement method for signature 'nanotime' names(x) <- value ## S4 method for signature 'nanotime' is.na(x) NA_nanotime_ ## S3 method for class 'nanotime' as.character(x, ...) ## S3 method for class 'nanoduration' as.data.frame(x, ...)","title":"Usage"},{"location":"man/nanotime/#arguments","text":"... further arguments passed to or from methods. format A character string. Can also be set via options(\"nanotimeFormat\") and uses \u2018%Y-%m-%dT%H:%M:%E9S%Ez\u2019 as a default and fallback tz character specifying a timezone which is required for as.POSIXct , as.POSIXlt and can be specified for as.nanotime , format and print ; it can also be set via options(\"nanotimeTz\") and uses \u2018UTC\u2019 as a default and fallback x , from nanotime objects accurate in the conversion from POSIXct to nanotime , indicates if one wants to preserve the maximum precision possible; the default is TRUE , but in most situations the loss of precision is negligible, and setting this parameter to TRUE will make the conversion nearly an order of magnitude faster quote indicates if the output of print should be quoted object argument for method show e1 Operand of class nanotime e2 Operand of class nanotime digits Required for Math2 signature but ignored here na.rm a logical indicating whether missing values should be removed. z Required for Complex signature but ignored here i index specifying elements to extract or replace. j Required for [ signature but ignored here drop Required for [ signature but ignored here value argument for nanotime-class","title":"Arguments"},{"location":"man/nanotime/#format","text":"An object of class nanotime of length 1.","title":"Format"},{"location":"man/nanotime/#details","text":"Notice that the conversion from POSIXct explicitly sets the last three digits to zero. Nanosecond time stored in a 64-bit integer has nineteen digits precision where doubles (which are used internally for POSIXct as well) only have sixteen digits. So rather than showing three more (essentially random ) digits it is constructed such that these three additional digits are zeros.","title":"Details"},{"location":"man/nanotime/#value","text":"A nanotime object","title":"Value"},{"location":"man/nanotime/#caveats","text":"Working with dates and times is difficult . One needs a representation of both time points and time duration . In R, think of Date or POSIXct objects for the former, and difftime for the later. Here we have time points nanotime , an interval type nanoival and two flavors of duration which are a simple count of nanoseconds nanoduration and a calendar duration that is able to track concepts such as months and days nanoperiod . Point in time and intervals are all based on durations relative to the epoch of January 1, 1970.","title":"Caveats"},{"location":"man/nanotime/#input-and-output-format","text":"Formatting and character conversion for nanotime objects is done by functions from the RcppCCTZ package relying on code from its embedded CCTZ library. The default format is ISO3339 compliant: %Y-%m-%dT%H:%M:%E9S%Ez . It specifies a standard ISO 8601 part for date and time \u2014 as well as nine digits of precision for fractional seconds (down to nanoseconds) and on offset (typically zero as we default to UTC). It can be overriden by using options() with the key of nanotimeFormat and a suitable value. Similarly, nanotimeTz can be used to select a different timezone. For input, some slack it cut, and various shortened formats are accepted by default such as 2020-03-10 or 2020-03-10 18:16:00 , or 2020-03-10 18:16:00.001 (and the \u2018T\u2019 separator is optional.","title":"Input and Output Format"},{"location":"man/nanotime/#tz-parameter-usage-in-constructors","text":"The tz parameter is allowed only when constructing a nanotime from a character . This is because any numeric , Date and POSIXct is de facto considered an offset since the epoch. On the contrary, a character is considered interpretable and hence if it does not contain a timezone in its representation, it is possible to specify the tz argument to specify in which timezone it should be interpreted. This is useful in particular if one wants to convert a Date to be aligned to the beginning of the day in a specific timezone; in this case one should convert the Date to a character before calling the nanotime constructor with the desired timezone.","title":"tz parameter usage in constructors"},{"location":"man/nanotime/#authors","text":"Dirk Eddelbuettel Leonardo Silvestri","title":"Author(s)"},{"location":"man/nanotime/#see-also","text":"nanoival , nanoduration , nanoperiod , seq.nanotime as well as the documentation in package RcppCCTZ .","title":"See Also"},{"location":"man/nanotime/#examples","text":"## Not run: x <- nanotime(1) print(x) as.nanotime(\"1970-01-01T00:00:00.000000001+00:00\") as.nanotime(\"2020-03-10 Europe/Berlin\") as.nanotime(\"2020-03-10 18:31:23.001\", tz=\"America/New_York\") as.nanotime(\"2020-03-10T040947190301440\", format=\"%Y-%m-%dT%H%M%S%E*f\") x <- x + 1 print(x) format(x) x <- x + 10 print(x) format(x) nanotime(Sys.time()) + 1:3 # three elements each 1 ns apart seq(x, by=as.nanoperiod(\"1d\"), length.out=5, tz=\"Asia/Tokyo\") ## End(Not run)","title":"Examples"},{"location":"man/rep-nanoduration-method/","text":"Replicate Elements Description Replicates the values in 'x' similarly to the default method. Usage ## S4 method for signature 'nanoduration' rep(x, ...) Arguments x a vector of nanoduration ... further arguments: 'times' an integer-valued vector giving the (non-negative) number of times to repeat each element if of length 'length(x)', or to repeat the whole vector if of length 1. Negative or 'NA' values are an error. A 'double' vector is accepted, other inputs being coerced to an integer or double vector. 'length.out' non-negative integer. The desired length of the output vector. Other inputs will be coerced to a double vector and the first element taken. Ignored if 'NA' or invalid. 'each' non-negative integer. Each element of 'x' is repeated 'each' times. Other inputs will be coerced to an integer or double vector and the first element taken. Treated as '1' if 'NA' or invalid.","title":"Rep nanoduration method"},{"location":"man/rep-nanoduration-method/#replicate-elements","text":"","title":"Replicate Elements"},{"location":"man/rep-nanoduration-method/#description","text":"Replicates the values in 'x' similarly to the default method.","title":"Description"},{"location":"man/rep-nanoduration-method/#usage","text":"## S4 method for signature 'nanoduration' rep(x, ...)","title":"Usage"},{"location":"man/rep-nanoduration-method/#arguments","text":"x a vector of nanoduration ... further arguments: 'times' an integer-valued vector giving the (non-negative) number of times to repeat each element if of length 'length(x)', or to repeat the whole vector if of length 1. Negative or 'NA' values are an error. A 'double' vector is accepted, other inputs being coerced to an integer or double vector. 'length.out' non-negative integer. The desired length of the output vector. Other inputs will be coerced to a double vector and the first element taken. Ignored if 'NA' or invalid. 'each' non-negative integer. Each element of 'x' is repeated 'each' times. Other inputs will be coerced to an integer or double vector and the first element taken. Treated as '1' if 'NA' or invalid.","title":"Arguments"},{"location":"man/rep-nanoival-method/","text":"Replicate Elements Description Replicates the values in 'x' similarly to the default method. Usage ## S4 method for signature 'nanoival' rep(x, ...) Arguments x a vector of nanoival ... further arguments: 'times' an integer-valued vector giving the (non-negative) number of times to repeat each element if of length 'length(x)', or to repeat the whole vector if of length 1. Negative or 'NA' values are an error. A 'double' vector is accepted, other inputs being coerced to an integer or double vector. 'length.out' non-negative integer. The desired length of the output vector. Other inputs will be coerced to a double vector and the first element taken. Ignored if 'NA' or invalid. 'each' non-negative integer. Each element of 'x' is repeated 'each' times. Other inputs will be coerced to an integer or double vector and the first element taken. Treated as '1' if 'NA' or invalid.","title":"Rep nanoival method"},{"location":"man/rep-nanoival-method/#replicate-elements","text":"","title":"Replicate Elements"},{"location":"man/rep-nanoival-method/#description","text":"Replicates the values in 'x' similarly to the default method.","title":"Description"},{"location":"man/rep-nanoival-method/#usage","text":"## S4 method for signature 'nanoival' rep(x, ...)","title":"Usage"},{"location":"man/rep-nanoival-method/#arguments","text":"x a vector of nanoival ... further arguments: 'times' an integer-valued vector giving the (non-negative) number of times to repeat each element if of length 'length(x)', or to repeat the whole vector if of length 1. Negative or 'NA' values are an error. A 'double' vector is accepted, other inputs being coerced to an integer or double vector. 'length.out' non-negative integer. The desired length of the output vector. Other inputs will be coerced to a double vector and the first element taken. Ignored if 'NA' or invalid. 'each' non-negative integer. Each element of 'x' is repeated 'each' times. Other inputs will be coerced to an integer or double vector and the first element taken. Treated as '1' if 'NA' or invalid.","title":"Arguments"},{"location":"man/rep-nanoperiod-method/","text":"Replicate Elements Description Replicates the values in 'x' similarly to the default method. Usage ## S4 method for signature 'nanoperiod' rep(x, ...) Arguments x a vector of nanoperiod ... further arguments: 'times' an integer-valued vector giving the (non-negative) number of times to repeat each element if of length 'length(x)', or to repeat the whole vector if of length 1. Negative or 'NA' values are an error. A 'double' vector is accepted, other inputs being coerced to an integer or double vector. 'length.out' non-negative integer. The desired length of the output vector. Other inputs will be coerced to a double vector and the first element taken. Ignored if 'NA' or invalid. 'each' non-negative integer. Each element of 'x' is repeated 'each' times. Other inputs will be coerced to an integer or double vector and the first element taken. Treated as '1' if 'NA' or invalid.","title":"Rep nanoperiod method"},{"location":"man/rep-nanoperiod-method/#replicate-elements","text":"","title":"Replicate Elements"},{"location":"man/rep-nanoperiod-method/#description","text":"Replicates the values in 'x' similarly to the default method.","title":"Description"},{"location":"man/rep-nanoperiod-method/#usage","text":"## S4 method for signature 'nanoperiod' rep(x, ...)","title":"Usage"},{"location":"man/rep-nanoperiod-method/#arguments","text":"x a vector of nanoperiod ... further arguments: 'times' an integer-valued vector giving the (non-negative) number of times to repeat each element if of length 'length(x)', or to repeat the whole vector if of length 1. Negative or 'NA' values are an error. A 'double' vector is accepted, other inputs being coerced to an integer or double vector. 'length.out' non-negative integer. The desired length of the output vector. Other inputs will be coerced to a double vector and the first element taken. Ignored if 'NA' or invalid. 'each' non-negative integer. Each element of 'x' is repeated 'each' times. Other inputs will be coerced to an integer or double vector and the first element taken. Treated as '1' if 'NA' or invalid.","title":"Arguments"},{"location":"man/rep-nanotime-method/","text":"Replicate Elements Description Replicates the values in 'x' similarly to the default method. Usage ## S4 method for signature 'nanotime' rep(x, ...) Arguments x a vector of nanotime ... further arguments: 'times' an integer-valued vector giving the (non-negative) number of times to repeat each element if of length 'length(x)', or to repeat the whole vector if of length 1. Negative or 'NA' values are an error. A 'double' vector is accepted, other inputs being coerced to an integer or double vector. 'length.out' non-negative integer. The desired length of the output vector. Other inputs will be coerced to a double vector and the first element taken. Ignored if 'NA' or invalid. 'each' non-negative integer. Each element of 'x' is repeated 'each' times. Other inputs will be coerced to an integer or double vector and the first element taken. Treated as '1' if 'NA' or invalid.","title":"Rep nanotime method"},{"location":"man/rep-nanotime-method/#replicate-elements","text":"","title":"Replicate Elements"},{"location":"man/rep-nanotime-method/#description","text":"Replicates the values in 'x' similarly to the default method.","title":"Description"},{"location":"man/rep-nanotime-method/#usage","text":"## S4 method for signature 'nanotime' rep(x, ...)","title":"Usage"},{"location":"man/rep-nanotime-method/#arguments","text":"x a vector of nanotime ... further arguments: 'times' an integer-valued vector giving the (non-negative) number of times to repeat each element if of length 'length(x)', or to repeat the whole vector if of length 1. Negative or 'NA' values are an error. A 'double' vector is accepted, other inputs being coerced to an integer or double vector. 'length.out' non-negative integer. The desired length of the output vector. Other inputs will be coerced to a double vector and the first element taken. Ignored if 'NA' or invalid. 'each' non-negative integer. Each element of 'x' is repeated 'each' times. Other inputs will be coerced to an integer or double vector and the first element taken. Treated as '1' if 'NA' or invalid.","title":"Arguments"},{"location":"man/rounding/","text":"Rounding down or up a nanotime type Description The functions nano_floor and nano_ceiling round down or up, respectively. Although the underlying implementation of nanotime has negative numbers for values before 1970-01-01 UTC, the rounding is always done backward in time for nano_floor and forward in time for nano_ceiling . The functions take a nanotime argument x which is the instance to round, together with a second argument precision which indicates an arbitrary precision to which the rounding should be performed. This argument can be either a nanoduration or or a nanoperiod . In the latter case, the argument tz must also be specified in order to give the nanoperiod a meaning. Finally, the nanotime argument origin can be optionally specified to fix the rounding to a specific point in time. Usage nano_ceiling(x, precision, ...) nano_floor(x, precision, ...) ## S4 method for signature 'nanotime,nanoduration' nano_ceiling(x, precision, origin = nanotime()) ## S4 method for signature 'nanotime,nanoduration' nano_floor(x, precision, origin = nanotime()) ## S4 method for signature 'nanotime,nanoperiod' nano_ceiling(x, precision, origin = nanotime(), tz) ## S4 method for signature 'nanotime,nanoperiod' nano_floor(x, precision, origin = nanotime(), tz) Arguments x a nanotime object which must be sorted precision a nanoduration or nanoperiod object indicating the rounding precision ... for future additional arguments origin a nanotime scalar indicating the origin at which the rounding is considered tz a character scalar indicating the time zone in which to conduct the rounding Details This flexible rounding must be understood in the context of a vector. The rounding precision can then be considered as an interval that defines a grid over which the elements are either assigned to the starting value of the interval to which they belong ( nano_floor ) or the ending value of the interval to which they belong ( nano_ceiling ). This allows for a grouping of a nanotime vector on which a statistic may then be run. In the examples below, such a use case is shown in the context of a data.table object. If \"business\" concepts such as month or days are needed, the argument precision must be of type period . It is then mandatory to specify the timezone argument tz as this ensures timezone correctness of the intervals including for example for the rare hourly transitions of some countries going from a timezone with a whole hour difference with UTC to one with a fractional hour difference. In the case of a period , the functions align the rounding if the precision is an integer divisor of a larger quantity. For instance, if one specifies a rounding of 6 hours, a divisor of a day, the hours are aligned on days and the rounding is made to a grid at hours 0, 6, 12 and 18 in the specified timezone. If the precision is not a divisor, the grid is aligned to the nearest hour before the first element of the vector to round. The argument origin controls the reference point of the rounding, allowing arbitrary specification of the reference point of the rounding. Examples ## Not run: ## \"classic\" rounding: nano_floor(as.nanotime(\"2010-10-10 11:12:15 UTC\"), as.nanoduration(\"01:00:00\")) ## rounding with arbitrary precision: nano_floor(as.nanotime(\"2010-10-10 11:12:15 UTC\"), as.nanoduration(\"06:00:00\")) nano_floor(as.nanotime(\"2010-10-10 11:23:15 UTC\"), as.nanoduration(\"00:15:00\")) nano_ceiling(as.nanotime(\"2010-10-10 11:23:15 UTC\"), as.nanoduration(\"01:15:23\")) ## controlling the reference point via the 'origin' argument: nano_ceiling(as.nanotime(\"2010-10-10 11:23:15 UTC\"), as.nanoduration(\"01:15:23\"), origin=as.nanotime(\"2010-10-10 11:23:15 UTC\")) ## using business concepts and rounding across a daylight saving change: v <- seq(as.nanotime(\"2020-03-08 America/New_York\"), by=as.nanoperiod(\"06:00:00\"), length.out=8, tz=\"America/New_York\") print(nano_floor(v, as.nanoperiod(\"1d\"), tz=\"America/New_York\"), tz=\"America/New_York\") ## using the concept in a 'data.table': library(data.table) n <- 3 * 24 idx <- seq(as.nanotime(\"2020-03-07 America/New_York\"), by=as.nanoperiod(\"01:00:00\"), length.out=n, tz=\"America/New_York\") dt <- data.table(idx, a=1:n, b=2:(n+1)) dt_mean <- dt[, list(mean = mean(a)), by=nano_ceiling(idx, as.nanoperiod(\"1d\"), tz=\"America/New_York\")] ## End(Not run)","title":"Rounding"},{"location":"man/rounding/#rounding-down-or-up-a-nanotime-type","text":"","title":"Rounding down or up a nanotime type"},{"location":"man/rounding/#description","text":"The functions nano_floor and nano_ceiling round down or up, respectively. Although the underlying implementation of nanotime has negative numbers for values before 1970-01-01 UTC, the rounding is always done backward in time for nano_floor and forward in time for nano_ceiling . The functions take a nanotime argument x which is the instance to round, together with a second argument precision which indicates an arbitrary precision to which the rounding should be performed. This argument can be either a nanoduration or or a nanoperiod . In the latter case, the argument tz must also be specified in order to give the nanoperiod a meaning. Finally, the nanotime argument origin can be optionally specified to fix the rounding to a specific point in time.","title":"Description"},{"location":"man/rounding/#usage","text":"nano_ceiling(x, precision, ...) nano_floor(x, precision, ...) ## S4 method for signature 'nanotime,nanoduration' nano_ceiling(x, precision, origin = nanotime()) ## S4 method for signature 'nanotime,nanoduration' nano_floor(x, precision, origin = nanotime()) ## S4 method for signature 'nanotime,nanoperiod' nano_ceiling(x, precision, origin = nanotime(), tz) ## S4 method for signature 'nanotime,nanoperiod' nano_floor(x, precision, origin = nanotime(), tz)","title":"Usage"},{"location":"man/rounding/#arguments","text":"x a nanotime object which must be sorted precision a nanoduration or nanoperiod object indicating the rounding precision ... for future additional arguments origin a nanotime scalar indicating the origin at which the rounding is considered tz a character scalar indicating the time zone in which to conduct the rounding","title":"Arguments"},{"location":"man/rounding/#details","text":"This flexible rounding must be understood in the context of a vector. The rounding precision can then be considered as an interval that defines a grid over which the elements are either assigned to the starting value of the interval to which they belong ( nano_floor ) or the ending value of the interval to which they belong ( nano_ceiling ). This allows for a grouping of a nanotime vector on which a statistic may then be run. In the examples below, such a use case is shown in the context of a data.table object. If \"business\" concepts such as month or days are needed, the argument precision must be of type period . It is then mandatory to specify the timezone argument tz as this ensures timezone correctness of the intervals including for example for the rare hourly transitions of some countries going from a timezone with a whole hour difference with UTC to one with a fractional hour difference. In the case of a period , the functions align the rounding if the precision is an integer divisor of a larger quantity. For instance, if one specifies a rounding of 6 hours, a divisor of a day, the hours are aligned on days and the rounding is made to a grid at hours 0, 6, 12 and 18 in the specified timezone. If the precision is not a divisor, the grid is aligned to the nearest hour before the first element of the vector to round. The argument origin controls the reference point of the rounding, allowing arbitrary specification of the reference point of the rounding.","title":"Details"},{"location":"man/rounding/#examples","text":"## Not run: ## \"classic\" rounding: nano_floor(as.nanotime(\"2010-10-10 11:12:15 UTC\"), as.nanoduration(\"01:00:00\")) ## rounding with arbitrary precision: nano_floor(as.nanotime(\"2010-10-10 11:12:15 UTC\"), as.nanoduration(\"06:00:00\")) nano_floor(as.nanotime(\"2010-10-10 11:23:15 UTC\"), as.nanoduration(\"00:15:00\")) nano_ceiling(as.nanotime(\"2010-10-10 11:23:15 UTC\"), as.nanoduration(\"01:15:23\")) ## controlling the reference point via the 'origin' argument: nano_ceiling(as.nanotime(\"2010-10-10 11:23:15 UTC\"), as.nanoduration(\"01:15:23\"), origin=as.nanotime(\"2010-10-10 11:23:15 UTC\")) ## using business concepts and rounding across a daylight saving change: v <- seq(as.nanotime(\"2020-03-08 America/New_York\"), by=as.nanoperiod(\"06:00:00\"), length.out=8, tz=\"America/New_York\") print(nano_floor(v, as.nanoperiod(\"1d\"), tz=\"America/New_York\"), tz=\"America/New_York\") ## using the concept in a 'data.table': library(data.table) n <- 3 * 24 idx <- seq(as.nanotime(\"2020-03-07 America/New_York\"), by=as.nanoperiod(\"01:00:00\"), length.out=n, tz=\"America/New_York\") dt <- data.table(idx, a=1:n, b=2:(n+1)) dt_mean <- dt[, list(mean = mean(a)), by=nano_ceiling(idx, as.nanoperiod(\"1d\"), tz=\"America/New_York\")] ## End(Not run)","title":"Examples"},{"location":"man/seq-nanoival-method/","text":"Sequence Generation Description Generate a sequence of nanoival Usage ## S4 method for signature 'nanoival' seq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...) Arguments from , to the starting and (maximal) end values of the sequence by nanoduration or nanoperiod increment of the sequence; note that if the class is nanoperiod the additional argument tz must be speficied and is of character type indicating a timezone length.out an integer desired length of the sequence along.with take the length from the length of this argument. ... arguments passed to or from methods; the only interesting additional argument is tz where the to argument is of type nanoperiod Examples ## Not run: from <- as.nanoival(\"-2018-01-14T13:00:00+00:00 -> 2018-01-14T15:00:00+00:00+\") seq(from, by=as.nanoperiod(\"1m\"), length.out=5, tz=\"America/New_York\") ## End(Not run)","title":"Seq nanoival method"},{"location":"man/seq-nanoival-method/#sequence-generation","text":"","title":"Sequence Generation"},{"location":"man/seq-nanoival-method/#description","text":"Generate a sequence of nanoival","title":"Description"},{"location":"man/seq-nanoival-method/#usage","text":"## S4 method for signature 'nanoival' seq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...)","title":"Usage"},{"location":"man/seq-nanoival-method/#arguments","text":"from , to the starting and (maximal) end values of the sequence by nanoduration or nanoperiod increment of the sequence; note that if the class is nanoperiod the additional argument tz must be speficied and is of character type indicating a timezone length.out an integer desired length of the sequence along.with take the length from the length of this argument. ... arguments passed to or from methods; the only interesting additional argument is tz where the to argument is of type nanoperiod","title":"Arguments"},{"location":"man/seq-nanoival-method/#examples","text":"## Not run: from <- as.nanoival(\"-2018-01-14T13:00:00+00:00 -> 2018-01-14T15:00:00+00:00+\") seq(from, by=as.nanoperiod(\"1m\"), length.out=5, tz=\"America/New_York\") ## End(Not run)","title":"Examples"},{"location":"man/seq.nanoduration/","text":"Sequence Generation Description Generate a sequence of nanoduration Usage ## S3 method for class 'nanoduration' seq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...) Arguments from , to the starting and (maximal) end values of the sequence by the increment of the sequence length.out integer indicating the desired length of the sequence along.with take the length from the length of this argument. ... arguments passed to or from methods Examples seq(from=as.nanoduration(0), by=as.nanoduration(\"01:00:00\"), length.out=10)","title":"Seq.nanoduration"},{"location":"man/seq.nanoduration/#sequence-generation","text":"","title":"Sequence Generation"},{"location":"man/seq.nanoduration/#description","text":"Generate a sequence of nanoduration","title":"Description"},{"location":"man/seq.nanoduration/#usage","text":"## S3 method for class 'nanoduration' seq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...)","title":"Usage"},{"location":"man/seq.nanoduration/#arguments","text":"from , to the starting and (maximal) end values of the sequence by the increment of the sequence length.out integer indicating the desired length of the sequence along.with take the length from the length of this argument. ... arguments passed to or from methods","title":"Arguments"},{"location":"man/seq.nanoduration/#examples","text":"seq(from=as.nanoduration(0), by=as.nanoduration(\"01:00:00\"), length.out=10)","title":"Examples"},{"location":"man/seq.nanotime/","text":"Sequence Generation Description Generate a sequence of nanotime Usage ## S3 method for class 'nanotime' seq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...) ## S4 method for signature 'nanotime' seq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...) Arguments from , to the starting and (maximal) end values of the sequence by nanoduration or nanoperiod increment of the sequence; note that if the class is nanoperiod the additional argument tz must be speficied and is of character type indicating a timezone length.out integer indicating the desired length of the sequence along.with take the length from the length of this argument. ... arguments passed to or from methods; the only interesting additional argument is tz where the to argument is of type nanoperiod Examples ## Not run: from <- as.nanotime(\"2018-01-14T12:44:00+00:00\") to <- as.nanotime(\"2019-01-14T12:44:00+00:00\") seq(from, to, by=as.nanoperiod(\"1m\"), tz=\"America/New_York\") seq(from, by=as.nanoperiod(\"1y\"), length.out=4, tz=\"Europe/London\") ## End(Not run)","title":"Seq.nanotime"},{"location":"man/seq.nanotime/#sequence-generation","text":"","title":"Sequence Generation"},{"location":"man/seq.nanotime/#description","text":"Generate a sequence of nanotime","title":"Description"},{"location":"man/seq.nanotime/#usage","text":"## S3 method for class 'nanotime' seq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...) ## S4 method for signature 'nanotime' seq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...)","title":"Usage"},{"location":"man/seq.nanotime/#arguments","text":"from , to the starting and (maximal) end values of the sequence by nanoduration or nanoperiod increment of the sequence; note that if the class is nanoperiod the additional argument tz must be speficied and is of character type indicating a timezone length.out integer indicating the desired length of the sequence along.with take the length from the length of this argument. ... arguments passed to or from methods; the only interesting additional argument is tz where the to argument is of type nanoperiod","title":"Arguments"},{"location":"man/seq.nanotime/#examples","text":"## Not run: from <- as.nanotime(\"2018-01-14T12:44:00+00:00\") to <- as.nanotime(\"2019-01-14T12:44:00+00:00\") seq(from, to, by=as.nanoperiod(\"1m\"), tz=\"America/New_York\") seq(from, by=as.nanoperiod(\"1y\"), length.out=4, tz=\"Europe/London\") ## End(Not run)","title":"Examples"},{"location":"man/set_operations/","text":"Set operations Description Performs set intersection, union and difference between vectors of temporal types from the nanotime package. Usage ## S4 method for signature 'nanoival,nanoival' intersect(x, y) ## S4 method for signature 'nanoival,nanoival' union(x, y) ## S4 method for signature 'nanoival,nanoival' setdiff(x, y) ## S4 method for signature 'nanotime,nanoival' intersect.idx(x, y) ## S3 method for class 'nanotime' x %in% table ## S4 method for signature 'nanotime,nanoival' x %in% table ## S4 method for signature 'nanotime,nanoival' intersect(x, y) ## S4 method for signature 'nanotime,nanoival' setdiff(x, y) ## S4 method for signature 'nanotime,nanoival' setdiff.idx(x, y) ## S4 method for signature 'nanotime,nanotime' intersect(x, y) ## S4 method for signature 'nanotime,nanotime' union(x, y) ## S4 method for signature 'nanotime,nanotime' setdiff(x, y) Arguments x , y a temporal type table nanoival : used in %in% Details Set operations between nanoival operands allow the construction of complex interval vectors (i.e. a nanoival vector can specify any number of inclusions and exclusions of time). Set operations between nanotime and nanoival allow to subset time vectors with interval vectors. In addition to the generic set functions, the function intersect.idx is defined which returns the indices of the intersection, and the operator %in% is overloaded for nanotime-nanoival which returns a logical vector that indicates which elements belong to the interval vector. Value intersect , union , setdiff return temporal types that are the result of the intersection. For instance, set operations on two nanoival return a nanoival , whereas intersection between a nanoival and a nanotime returns a nanotime . intersect.idx return a list of vectors representing the element indices that intersect and setdiff.idx returns a vector representing the element indices to be removed. Examples ## Not run: ## a vector of 'nanotime' can be subsetted by a 'nanoival' which is equivalent to 'intersect': one_second <- 1e9 a <- seq(nanotime(\"2012-12-12 12:12:12+00:00\"), length.out=10, by=one_second) idx <- c(as.nanoival(\"-2012-12-12 12:12:10+00:00 -> 2012-12-12 12:12:14+00:00-\"), as.nanoival(\"+2012-12-12 12:12:18+00:00 -> 2012-12-12 12:12:20+00:00+\")) a[idx] intersect(a, idx) ## 'nanoival' also has the set operations 'union', 'intersect', 'setdiff': a <- seq(nanotime(\"2012-12-12 12:12:12+00:00\"), length.out=10, by=one_second) i <- as.nanoival(\"-2012-12-12 12:12:14+00:00 -> 2012-12-12 12:12:18+00:00-\") setdiff(a, i) i1 <- as.nanoival(\"+2012-12-12 12:12:14+00:00 -> 2012-12-12 12:12:17+00:00-\") i2 <- as.nanoival(\"+2012-12-12 12:12:16+00:00 -> 2012-12-12 12:12:18+00:00-\") union(i1, i2) ## 'intersect.idx' returns the indices of the intersection: a <- seq(nanotime(\"2012-12-12 12:12:12+00:00\"), length.out=10, by=one_second) idx <- as.nanoival(\"+2012-12-12 12:12:14+00:00 -> 2012-12-12 12:12:19+00:00+\") idx_intersect <- intersect.idx(a, idx) ## Intersection can be performed using these indices: a[idx_intersect$x] ## which is equivalent to: a[idx] ## The logical vector indicating intersection can be obtained like this: a %in% idx ## End(Not run)","title":"Set operations"},{"location":"man/set_operations/#set-operations","text":"","title":"Set operations"},{"location":"man/set_operations/#description","text":"Performs set intersection, union and difference between vectors of temporal types from the nanotime package.","title":"Description"},{"location":"man/set_operations/#usage","text":"## S4 method for signature 'nanoival,nanoival' intersect(x, y) ## S4 method for signature 'nanoival,nanoival' union(x, y) ## S4 method for signature 'nanoival,nanoival' setdiff(x, y) ## S4 method for signature 'nanotime,nanoival' intersect.idx(x, y) ## S3 method for class 'nanotime' x %in% table ## S4 method for signature 'nanotime,nanoival' x %in% table ## S4 method for signature 'nanotime,nanoival' intersect(x, y) ## S4 method for signature 'nanotime,nanoival' setdiff(x, y) ## S4 method for signature 'nanotime,nanoival' setdiff.idx(x, y) ## S4 method for signature 'nanotime,nanotime' intersect(x, y) ## S4 method for signature 'nanotime,nanotime' union(x, y) ## S4 method for signature 'nanotime,nanotime' setdiff(x, y)","title":"Usage"},{"location":"man/set_operations/#arguments","text":"x , y a temporal type table nanoival : used in %in%","title":"Arguments"},{"location":"man/set_operations/#details","text":"Set operations between nanoival operands allow the construction of complex interval vectors (i.e. a nanoival vector can specify any number of inclusions and exclusions of time). Set operations between nanotime and nanoival allow to subset time vectors with interval vectors. In addition to the generic set functions, the function intersect.idx is defined which returns the indices of the intersection, and the operator %in% is overloaded for nanotime-nanoival which returns a logical vector that indicates which elements belong to the interval vector.","title":"Details"},{"location":"man/set_operations/#value","text":"intersect , union , setdiff return temporal types that are the result of the intersection. For instance, set operations on two nanoival return a nanoival , whereas intersection between a nanoival and a nanotime returns a nanotime . intersect.idx return a list of vectors representing the element indices that intersect and setdiff.idx returns a vector representing the element indices to be removed.","title":"Value"},{"location":"man/set_operations/#examples","text":"## Not run: ## a vector of 'nanotime' can be subsetted by a 'nanoival' which is equivalent to 'intersect': one_second <- 1e9 a <- seq(nanotime(\"2012-12-12 12:12:12+00:00\"), length.out=10, by=one_second) idx <- c(as.nanoival(\"-2012-12-12 12:12:10+00:00 -> 2012-12-12 12:12:14+00:00-\"), as.nanoival(\"+2012-12-12 12:12:18+00:00 -> 2012-12-12 12:12:20+00:00+\")) a[idx] intersect(a, idx) ## 'nanoival' also has the set operations 'union', 'intersect', 'setdiff': a <- seq(nanotime(\"2012-12-12 12:12:12+00:00\"), length.out=10, by=one_second) i <- as.nanoival(\"-2012-12-12 12:12:14+00:00 -> 2012-12-12 12:12:18+00:00-\") setdiff(a, i) i1 <- as.nanoival(\"+2012-12-12 12:12:14+00:00 -> 2012-12-12 12:12:17+00:00-\") i2 <- as.nanoival(\"+2012-12-12 12:12:16+00:00 -> 2012-12-12 12:12:18+00:00-\") union(i1, i2) ## 'intersect.idx' returns the indices of the intersection: a <- seq(nanotime(\"2012-12-12 12:12:12+00:00\"), length.out=10, by=one_second) idx <- as.nanoival(\"+2012-12-12 12:12:14+00:00 -> 2012-12-12 12:12:19+00:00+\") idx_intersect <- intersect.idx(a, idx) ## Intersection can be performed using these indices: a[idx_intersect$x] ## which is equivalent to: a[idx] ## The logical vector indicating intersection can be obtained like this: a %in% idx ## End(Not run)","title":"Examples"},{"location":"man/sort-nanoival-method/","text":"Sorting or Ordering Vectors Description Sort (or _order_) a vector of nanoival into ascending or descending order Usage ## S4 method for signature 'nanoival' sort(x, decreasing = FALSE) Arguments x a vector of nanoival decreasing logical. Should the sort be increasing or decreasing? See Also is.unsorted","title":"Sort nanoival method"},{"location":"man/sort-nanoival-method/#sorting-or-ordering-vectors","text":"","title":"Sorting or Ordering Vectors"},{"location":"man/sort-nanoival-method/#description","text":"Sort (or _order_) a vector of nanoival into ascending or descending order","title":"Description"},{"location":"man/sort-nanoival-method/#usage","text":"## S4 method for signature 'nanoival' sort(x, decreasing = FALSE)","title":"Usage"},{"location":"man/sort-nanoival-method/#arguments","text":"x a vector of nanoival decreasing logical. Should the sort be increasing or decreasing?","title":"Arguments"},{"location":"man/sort-nanoival-method/#see-also","text":"is.unsorted","title":"See Also"}]}