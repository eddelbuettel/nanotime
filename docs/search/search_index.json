{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"nanotime: Nanosecond-Resolution Time Objects for R","text":""},{"location":"#motivation","title":"Motivation","text":"<p>R has excellent tools for dates and times. The <code>Date</code> and <code>POSIXct</code> classes (as well as the 'wide' representation in <code>POSIXlt</code>) are versatile, and a lot of useful tooling has been built around them.</p> <p>However, <code>POSIXct</code> is implemented as a <code>double</code> with fractional seconds since the epoch. Given the 53 bits accuracy, it leaves just a bit less than microsecond resolution. Furthermore, using floating-point arithmetic for an integer concept opens the door to painful issues of error accumulation.</p> <p>More and more performance measurements, latency statistics, etc., are now measured more finely, and we need nanosecond resolution for which commonly an <code>integer64</code> is used to represent nanoseconds since the epoch.</p> <p>And while R does not have a native type for this, the bit64 package by Jens Oehlschl\u00e4gel offers a performant one implemented as a lightweight S3 class. So this package uses the <code>integer64</code> class, along with multiple helper functions for parsing and formatting at nano-second resolution from the RcppCCTZ package which wraps the CCTZ library from Google. CCTZ is a modern C++11 library extending the (C++11-native) <code>chrono</code> type.</p> <p>In addition to the point-in-time type <code>nanotime</code>, this package also provides an interval type <code>nanoival</code> which may have open or closed start/end, a period type <code>nanoperiod</code> that is a human representation of time, such as day, month, etc., and a duration type <code>nanoduration</code>. These types are similar to what the lubridate package proposes.</p> <p>Set and arithmetic operations on these types are available. All functionality is designed to correctly handle instances across different time zones. Because these temporal types are based on R built-in types, most functions have an efficient implementation and the types are suitable for use in <code>data.frame</code> and <code>data.table</code>. <code>nanotime</code> is also a better choice than the native <code>POSIXct</code> in most of the cases where fractional seconds are needed because it avoids floating point issues.</p>"},{"location":"#documentation","title":"Documentation","text":"<p>Package documentation, help pages, a vignette, and more is available here.</p>"},{"location":"#demo","title":"Demo","text":"<p>See the included demo script nanosecondDelayExample.R for a (completely simulated and hence made-up) study of network latency measured in nanoseconds resulting in the figure below</p> <p></p>"},{"location":"#examples","title":"Examples","text":""},{"location":"#simple-parsing-and-arithmetic","title":"Simple Parsing and Arithmetic","text":"<pre><code>R&gt; x &lt;- as.nanotime(\"1970-01-01T00:00:00.000000001+00:00\")\nR&gt; x\n[1] \"1970-01-01T00:00:00.000000001+00:00\"\nR&gt; x + 1e9\n[1] \"1970-01-01T00:00:01.000000001+00:00\"\nR&gt; as.nanotime(\"2020-03-21 Europe/London\")\n[1] 2020-03-21T00:00:00+00:00\n</code></pre>"},{"location":"#vectorised","title":"Vectorised","text":"<pre><code>R&gt; options(\"width\"=60)\nR&gt; v &lt;- nanotime(Sys.time()) + 1:5\nR&gt; v\n[1] 2020-03-22T03:09:20.732122001+00:00\n[2] 2020-03-22T03:09:20.732122002+00:00\n[3] 2020-03-22T03:09:20.732122003+00:00\n[4] 2020-03-22T03:09:20.732122004+00:00\n[5] 2020-03-22T03:09:20.732122005+00:00\nR&gt;\n</code></pre>"},{"location":"#use-with-zoo","title":"Use with <code>zoo</code>","text":"<pre><code>R&gt; library(zoo)\nR&gt; z &lt;- zoo(cbind(A=1:5, B=5:1), v)\nR&gt; options(nanotimeFormat=\"%H:%M:%E*S\")  ## override default format\nR&gt; z\nR&gt; options(nanotimeFormat=NULL)  ## go back to default format\nR&gt; z\n</code></pre>"},{"location":"#use-with-datatable","title":"Use with data.table","text":"<pre><code>R&gt; library(data.table)\nR&gt; dt &lt;- data.table(v, cbind(A=1:5, B=5:1))\nR&gt; fwrite(dt, file=\"datatableTest.csv\")  # write out\nR&gt; dtcheck &lt;- fread(\"datatableTest.csv\") # read back\nR&gt; dtcheck\nR&gt; dtcheck[, v:=nanotime(v)]             # read as a string, need to re-class as nanotime\nR&gt; fread(\"../datatableTest.csv\", colClasses=c(\"nanotime\", \"integer\", \"integer\"))\n</code></pre>"},{"location":"#use-with-dataframe","title":"Use with data.frame","text":"<p>This requires version 0.0.2 or later.</p> <pre><code>R&gt; data.frame(cbind(A=1:5, B=5:1), v=v)\n</code></pre>"},{"location":"#intervals","title":"Intervals","text":"<pre><code>R&gt; ival &lt;- as.nanoival(\"+2009-01-01 13:12:00 America/New_York -&gt; 2009-02-01 15:11:03 America/New_York-\")\nR&gt; ival\n[1] +2009-01-01T18:12:00+00:00 -&gt; 2009-02-01T20:11:03+00:00-\n\nR&gt; start &lt;- nanotime(\"2009-01-01 13:12:00 America/New_York\")\nR&gt; end   &lt;- nanotime(\"2009-02-01 15:11:00 America/New_York\")\nR&gt; nanoival(start, end)                   # by default sopen=F,eopen=T\n[1] +2009-01-01T18:12:00+00:00 -&gt; 2009-02-01T20:11:00+00:00-\nR&gt; nanoival(start, end, sopen=FALSE, eopen=TRUE)\n[1] +2009-01-01T18:12:00+00:00 -&gt; 2009-02-01T20:11:00+00:00-\n\nR&gt; intersect(as.nanoival(\"+2019-03-01 UTC -&gt; 2020-03-01 UTC-\"),\n             as.nanoival(\"+2020-01-01 UTC -&gt; 2020-06-01 UTC-\"))\n[1] +2020-01-01T00:00:00+00:00 -&gt; 2020-03-01T00:00:00+00:00-\n\nR&gt; union(as.nanoival(\"+2019-03-01 UTC -&gt; 2020-03-01 UTC-\"),\n         as.nanoival(\"+2020-01-01 UTC -&gt; 2020-06-01 UTC-\"))\n[1] +2019-03-01T00:00:00+00:00 -&gt; 2020-06-01T00:00:00+00:00-\n\nR&gt; setdiff(as.nanoival(\"+2019-03-01 UTC -&gt; 2020-03-01 UTC-\"),\n           as.nanoival(\"+2020-01-01 UTC -&gt; 2020-06-01 UTC-\"))\n[1] +2019-03-01T00:00:00+00:00 -&gt; 2020-01-01T00:00:00+00:00-    \n</code></pre>"},{"location":"#periods","title":"Periods","text":"<pre><code>R&gt; as.nanoperiod(\"1y1m1w1d/01:01:01.000_000_001\")\n[1] 13m8d/01:01:01.000_000_001\nR&gt; nanoperiod(months=13, days=-1, duration=\"01:00:00\")\n[1] 13m-1d/01:00:00\n\nR&gt; ones &lt;- as.nanoperiod(\"1y1m1w1d/01:01:01.000_000_001\")\nR&gt; nanoperiod.month(ones); nanoperiod.day(ones); nanoperiod.nanoduration(ones)\n[1] 13\n[1] 8\n[1] 01:01:01.000_000_001\n\nR&gt; plus(v, as.nanoperiod(\"1y1m\"), tz=\"UTC\")\n[1] 2021-04-22T03:09:20.732122001+00:00\n[2] 2021-04-22T03:09:20.732122002+00:00\n[3] 2021-04-22T03:09:20.732122003+00:00\n[4] 2021-04-22T03:09:20.732122004+00:00\n[5] 2021-04-22T03:09:20.732122005+00:00\n</code></pre>"},{"location":"#durations","title":"Durations","text":"<pre><code>R&gt; nanoduration(hours=1, minutes=1, seconds=1, nanoseconds=1)\nR&gt; as.nanoduration(\"00:00:01\")\nR&gt; as.nanoduration(\"-00:00:01\")\nR&gt; as.nanoduration(\"100:00:00\")\nR&gt; as.nanoduration(\"00:00:00.000_000_001\")\n</code></pre>"},{"location":"#sequences","title":"Sequences","text":"<pre><code>R&gt; from &lt;- as.nanotime(\"2018-09-14T12:44:00+00:00\")\nR&gt; seq(from, by=as.nanoperiod(\"1y\"), length.out=4, tz=\"Europe/London\")\n[1] 2018-09-14T12:44:00+00:00\n[2] 2019-09-14T12:44:00+00:00\n[3] 2020-09-14T12:44:00+00:00\n[4] 2021-09-14T12:44:00+00:00\n</code></pre>"},{"location":"#technical-details","title":"Technical Details","text":"<p>The bit64 package (by Jens Oehlschl\u00e4gel) supplies the <code>integer64</code> type used to store the nanosecond resolution time as (positive or negative) offsets to the epoch of January 1, 1970. The RcppCCTZ package supplies the formatting and parsing routines based on the (modern C++) library CCTZ from Google, when the parsing cannot be done using a fast built-in parser. <code>integer64</code> is also used for the type <code>nanoduration</code>, whereas <code>nanoival</code> and <code>nanoperiod</code> are stored in a <code>complex</code>, i.e. over 128 bits.</p>"},{"location":"#status","title":"Status","text":"<p>The package is by now fairly mature, has been rewritten once (to go from S3 to S4) and has recently received a sizeable feature extension. There may still be changes, though there should generally never be breaking ones. The package also has an extensive test suite, and very good code coverage.</p> <p>See the issue tickets for an up to date list of potentially desirable, possibly planned, or at least discussed items.</p>"},{"location":"#installation","title":"Installation","text":"<p>The package is on CRAN and can be installed via a standard</p> <pre><code>install.packages(\"nanotime\")\n</code></pre> <p>whereas in order to install development versions a</p> <pre><code>remotes::install_github(\"eddelbuettel/nanotime\")  # dev version\n</code></pre> <p>should suffice.</p>"},{"location":"#authors","title":"Authors","text":"<p>Dirk Eddelbuettel and Leonardo Silvestri</p>"},{"location":"#license","title":"License","text":"<p>GPL (&gt;= 2)</p>"},{"location":"CHANGELOG/","title":"Changelog","text":"<p>2025-10-22  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Date, Version): Roll micro version and date\n\n* docs/: Regenerated using altdoc with mkdocs-material\n* .github/altdoc: Added and customized\n* inst/CITATION: Added as in-container use of citation() with\ndefaults appears to drop both doi and url entries\n</code></pre> <p>2025-10-20  Michael Chirico  chiricom@google.com</p> <pre><code>* DESCRIPTION: The methods package is now a 'Depends' as recommended\nin WRE 1.5.6 for S4 packages\n</code></pre> <p>2025-04-02  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.3.12\n</code></pre> <p>2025-03-26  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Suggests): Add ggplot2 now that demo/ is scanned\n\n* R/nanotime.R (as.character.nanotime): Refine a version comparison\n</code></pre> <p>2025-02-10  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* .github/workflows/ci.yaml (jobs): Use r-ci action with bootstrap\n</code></pre> <p>2025-01-10  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.3.11\n</code></pre> <p>2025-01-07  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Date, Version): Roll micro version and date\n\n* R/nanotime.R (format.nanotime): Index and override NA values prior\nto CCTZ call, flag after call avoiding a UBSAN warning in client code\n</code></pre> <p>2024-10-31  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version and date\n</code></pre> <p>2024-10-30  Michael Chirico  chiricom@google.com</p> <pre><code>* src/period.cpp: Create `Rcomplex` objects in a more robust\nway that appeases `Wmissing-braces` compiler warnings on `clang`.\n</code></pre> <p>2024-09-16  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.3.10\n</code></pre> <p>2024-09-15  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* demo/ggplot2Example.R: Removed to local/\n* demo/00Index: Removed entry for gpplot2Example\n</code></pre> <p>2024-09-09  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version and date\n\n* R/nanoival.R (setdiff): Under R 4.5.0, call setdiff for integer64\n* R/nanotime.R (setMethod): Under R 4.5.0, define unique method\n* NAMESPACE: Conditionally export unique\n* man/nanotime.Rd: Alias unique\n</code></pre> <p>2024-08-31  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Authors@R): Added\n</code></pre> <p>2024-06-22  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version and date\n\n* inst/tinytest/test_nanotime.R: Retire test for Solaris\n* inst/tinytest/test_nanoperiod.R: Idem\n* inst/tinytest/test_nanoival.R: Idem\n* inst/tinytest/test_zoo.R: Idem\n</code></pre> <p>2024-06-21  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.3.9\n</code></pre> <p>2024-06-20  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* inst/tinytest/test_nanotime.R: Condition two tests to not run on arm64\n\n* .github/workflows/ci.yaml (jobs): Add macOS-latest back to matrix\n</code></pre> <p>2024-06-19  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.3.8\n\n* README.md: Use tinyverse.netlify.app for dependency badge\n</code></pre> <p>2024-06-18  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* R/nanotime.R: Simplify one reference to RcppCCTZ\n* man/nanotime.Rd: Idem\n\n* inst/tinytest/test_nanoival.R: Condition some tests on being in an\n'extended' run\n</code></pre> <p>2024-06-16  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version and date\n\n* inst/include/nanotime/interval.hpp: Add extra braces\n* src/interval.cpp: Updated output stream helper\n* src/period.cpp: Idem\n\n* src/Makevars (CXX_STD): Set C++17\n* src/Makevars.win (CXX_STD): Idem\n* src/Makevars.ucrt: Removed\n</code></pre> <p>2024-06-14  Leonardo Silvestri  lsilvestr@ztsdb.org</p> <pre><code>* src/Makevars.win: Remove -mno-ms-bitfields\n</code></pre> <p>2024-06-13  Leonardo Silvestri  lsilvestr@ztsdb.org</p> <pre><code>* inst/include/nanotime/interval.hpp: NA behavior for bitfield\n</code></pre> <p>2024-06-11  Leonardo Silvestri  lsilvestr@ztsdb.org</p> <pre><code>* inst/include/nanotime/interval.hpp: Initial fix for bitfield\n* inst/include/nanotime/period.hppL Idem\n* src/interval.cpp: Idem\n</code></pre> <p>2024-06-09  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* README.md: Use tinyverse.netlify.app for dependency badge\n</code></pre> <p>2024-05-24  Leonardo Silvestri  lsilvestr@ztsdb.org</p> <pre><code>* R/nanoduration.R: duration divided by duration returns double\n* inst/tinytest/test_nanoduration.R: additional test for the above\n\n* inst/include/nanotime/utilities.hpp: Use interface function Rf_asS4\ninstead of internal SET_S4_OBJECT\n* src/interval.cpp: Change setting of S4 bit before names assigment\n</code></pre> <p>2024-04-28  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version and date\n\n* R/nanoperiod.R: Add missing backslash in code call\n* man/nanoperiod.Rd: Idem\n</code></pre> <p>2024-02-16  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* .github/workflows/ci.yaml (jobs): Update to actions/checkout@v4,\nadd r-ci-setup actions\n</code></pre> <p>2023-09-26  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* R/nanotime.R: Further refinement for default UTC timezone\n* inst/tinytest/test_nanotime.R: Idem\n</code></pre> <p>2023-09-22  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* R/nanotime.R: Provide default UTC timezone in 'as.Date()'\n* tests/simpleTests.R: Adjist a test accordingly\n* inst/tinytest/test_nanotime.R: Idem\n</code></pre> <p>2023-09-21  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n* R/nanotime.R: Fixed 'as.Date' to force use of timezone and to\nallow the timezone argument to be a vector\n</code></pre> <p>2023-07-11  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* README.md: Add r-universe badge\n</code></pre> <p>2023-07-06  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n    * R/nanotime.R: added parameter 'accurate' to functions 'nanotime'\nand 'as.nanotime' when the argument is a 'POSIXct'.\n* inst/tinytest/test_nanotime.R: added tests for 'accurate' parameter.\n* man/nanotime.Rd: added documentation for 'accurate' parameter.\n</code></pre> <p>2023-03-12  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* src/Makevars: No longer set compilation standard\n* src/Makevars.win: Idem\n* src/Makevars.ucrt: Idem\n</code></pre> <p>2022-12-06  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* R/nanotime.R: Add example for additional format plus reference to\n\\pkg{RcppCCTZ} documentation which has format details\n* man/nanotime.Rd: Idem\n</code></pre> <p>2022-11-08  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* .github/workflows/ci.yaml (jobs): Update to actions/checkout@v3\n</code></pre> <p>2022-10-23  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.3.7\n</code></pre> <p>2022-10-16  Trevor L Davis  trevor.l.davis@gmail.com</p> <pre><code>* R/nanoduration.R: Add '+' / '-' methods for 'difftime()'\nand 'nanoduration()' / 'nanoival()' / 'nanotime()' objects\n* man/nanoduration.Rd: Updated\n* inst/tinytest/test_nanoduration.R: Add tests\n</code></pre> <p>2022-10-14  Trevor L Davis  trevor.l.davis@gmail.com</p> <pre><code>* R/nanoduration.R (as.nanoduration.difftime): Added\n* man/nanoduration.Rd: Updated\n* inst/tinytest/test_nanoduration.R: Add tests\n</code></pre> <p>2022-10-13  Trevor L Davis  trevor.l.davis@gmail.com</p> <pre><code>* R/nanoduration.R (nanoduration): Add default arguments equal to zero\n* R/nanotime.R: Use 'inherits()' instead of 'class() =='\n</code></pre> <p>2022-10-04  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* docs/mkdmt-src/: Updated for mkdocs-for-material 8.5.5\n</code></pre> <p>2022-03-06  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.3.6\n* R/nanoival.R: Fix incorrect subsetting with operator `%in%`\n* NAMESPACE: Added export\n* man/set_operations.Rd: Added file\n* src/period.cpp: Fix parse of negative period\n</code></pre> <p>2022-03-06  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* R/nanoduration.R: Use 'inherits()' instead of 'class() =='\n* R/nanoival.R: Idem\n* R/nanoperiod.R: Idem\n* R/nanotime.R: Idem\n</code></pre> <p>2021-12-14  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.3.5\n</code></pre> <p>2021-12-09  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* src/Makevars.ucrt: Based on patch by Tomas Kalibera that is part of\nhis changes for the Windows utf8-enhabced ucrt3 builds of R 4.2.0\n</code></pre> <p>2021-11-23  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.3.4\n</code></pre> <p>2021-11-21  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n</code></pre> <p>2021-11-21  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* inst/include/nanotime/period.hpp: Regroup and expose nanoperiod\ninterface for use by other packages\n* src/period.cpp: Moved code to period.hpp header\n* src/rounding.cpp: Idem\n</code></pre> <p>2021-11-17  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>    * README.md: Remove Travis badge\n    * .travis.yml: Remove Travis YAML config\n</code></pre> <p>2021-10-11  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* R/nanoduration.R (all.equal.nanoduration): Remove\nas.character.nanotime as proper S4 method already defined\n* R/nanoperiod.R (all.equal.nanoperiod): Idem\n* NAMESPACE: Removed exports\n* man/nanoduration.Rd: Updated\n* man/nanoperiod.Rd: Idem\n\n* .codecov.yml (coverage): Ensure PRs will not get a red 'fail' just\nbecause coverage metrices dropped a miniscule amount\n</code></pre> <p>2021-10-10  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* R/nanoival.R (as.character.nanoival): Added\n* NAMESPACE: Idem\n* man/nanoival.Rd: Aliases\n\n* R/nanoperiod.R (as.character.nanoperiod): Added\n* NAMESPACE: Idem\n* man/nanoperiod.Rd: Aliases\n\n* R/nanoduration.R (as.character.nanoduration):\n* NAMESPACE: Idem\n* man/nanoduration.Rd: Aliases\n\n* inst/tinytest/test_nanotime.R: Add tests\n* inst/tinytest/test_nanoival.R: Idem\n* inst/tinytest/test_nanoperiod.R: Idem\n</code></pre> <p>2021-10-08  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* R/nanotime.R (as.character.nanotime): Added\n* NAMESPACE: Idem\n* man/nanotime.Rd: Aliases\n</code></pre> <p>2021-08-09  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.3.3\n</code></pre> <p>2021-08-08  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* src/period.cpp:  Fix for `plus` and `minus` adjustment\n* R/nanoperiod.R: Idem\n    * inst/tinytest/test_nanoperiod.R: Idem\n* man/nanoperiod.Rd: Idem\n</code></pre> <p>2021-04-06  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (URL, BugRreports): Added to DESCRIPTION file\n</code></pre> <p>2021-03-28  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* docs/mkdmt-src/: Moved mkdocs-material input\n</code></pre> <p>2020-12-30  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* .github/workflows/ci.yaml: Rename job from build to ci\n</code></pre> <p>2020-12-25  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* .github/workflows/ci.yaml: Small tweaks to CI YAML file\n</code></pre> <p>2020-12-13  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* README.md: Add CI badge\n</code></pre> <p>2020-12-06  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* .travis.yml: Switch to run.sh from r-ci for focal and bspm\n* .github/workflows/ci.yaml: Use run.sh from r-ci\n</code></pre> <p>2020-12-06  Colin Umansky  statquant@outlook.com</p> <pre><code>* inst/tinytest/test_nanoduration.R: Added tests for comparison\n</code></pre> <p>2020-12-05  Colin Umansky  statquant@outlook.com</p> <pre><code>* R/nanoduration.R: Support nanoduration to character comparison\n* man/nanoduration.Rd: Document new feature\n* inst/tinytest/test_nanoduration.R: Updated tests\n</code></pre> <p>2020-10-25  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* docker/r-devel/Dockerfile: Added for simpler r-devel checks\n</code></pre> <p>2020-10-24  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* inst/tinytest/test_nanotime.R: Add explicit check.tzone=FALSE to\nequality test for POSIXct comparison\n    * inst/tinytest/test_nanoival.R: Renable full tests, add bit64\n    * inst/tinytest/test_nanoperiod.R: Idem\n    * inst/tinytest/test_nanotime.R: Idem\n    * inst/tinytest/test_ops.R: Idem\n</code></pre> <p>2020-09-11  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* docs/: Added package website\n\n* README.md: Added badge and short paragraph linking to documentation\n</code></pre> <p>2020-09-07  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* demo/ggplot2Example.R: Updated and extended demo\n</code></pre> <p>2020-09-04  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* demo/ggplot2Example.R: New demo based on Leonardo's example repo\n</code></pre> <p>2020-09-03  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.3.2\n</code></pre> <p>2020-09-01  Elliott Sales de Andrade  quantum.analyst@gmail.com</p> <pre><code>* inst/include/nanotime/interval.hpp: Correct for big-endian\n</code></pre> <p>2020-08-31  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* .travis.yml (install): Back to RcppCCTZ from CRAN\n</code></pre> <p>2020-08-30  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* R/nanoival.R: De-activate two examples\n* R/nanotime.R: Idem\n* man/nanoival.Rd: Idem\n* man/nanotime.Rd: Idem\n\n* inst/tinytest/test_nanoduration.R: Make some test conditional\n* inst/tinytest/test_nanoival.R: Idem\n* inst/tinytest/test_nanoperiod.R: Idem\n* inst/tinytest/test_nanotime.R: Idem\n* inst/tinytest/test_ops.R: Idem\n</code></pre> <p>2020-08-28  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* src/interval.cpp: Use RcppCCTZ_API header and exported functions\n* src/nanotime.cpp: Idem\n* src/period.cpp: Idem\n* src/rounding.cpp: Idem\n\n* .travis.yml (install): Install RcppCCTZ from GitHub\n</code></pre> <p>2020-08-09  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.3.1\n\n* R/nanoival.R: Add \\dontrun{} because of Solaris\n* R/nanoperiod.R: Idem\n* R/nanotime.R: Idem\n* man/nano_year.Rd: Idem\n\n* man/nanoperiod.Rd: Idem\n    * man/nanotime.Rd: Idem\n    * man/rounding.Rd: Idem\n    * man/seq-nanoival-method.Rd: Idem\n    * man/seq.nanotime.Rd: Idem\n\n    * inst/tinytest/test_nanoival.R: Skip some tests on Solaris\n    * inst/tinytest/test_nanoperiod.R: Idem\n    * inst/tinytest/test_nanotime.R: Idem\n</code></pre> <p>2020-08-08  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version, small edit\n\n* src/interval.cpp: Add some tests for non-zero length vectors\n* inst/tinytest/test_nanotime.R: Skip one test upsetting SAN\n* tests/tinytest.R: Default back to serial tests\n\n* src/strnlen.cpp: Added strnlen_ to help Solaris\n* inst/include/nanotime/utilities.hpp: Declare it\n* src/interval.cpp: Use it\n* src/nanotime.cpp: Idem\n</code></pre> <p>2020-08-07  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* src/period.cpp: Add extra braces to appease macOS compiler\n* src/inst/include/nanotime/globals.hpp: Use chrono duration; remove\nambiguous time_point and seconds declarations\n</code></pre> <p>2020-08-05  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Date, Version): Release 0.3.0\n</code></pre> <p>2020-08-02  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* src/interval.cpp: Use non-throwing RcppCCTZ function\n* src/nanotime.cpp: Idem\n* src/period.cpp: Idem\n* inst/include/nanotime/globals.hpp: More (u)int64_t\n* R/nanoival.R: Refine error message check\n* R/nanotime.R: Idem\n</code></pre> <p>2020-07-29  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n</code></pre> <p>2020-07-29  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* src/Makevars.win: Add to set explicit '-mno-ms-bitfields' flag\nrequired for bitfield operations on Windows\n</code></pre> <p>2020-07-21  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* inst/NEWS.Rd: Additional entries added\n</code></pre> <p>2020-07-20  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* vignettes/nanotime/rmd/nanotime-intro.Rmd: Additional edits\n</code></pre> <p>2020-07-19  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* vignettes/nanotime/rmd/nanotime-intro.Rmd: Additional edits\n* vignettes/nanotime/rmd/nanotime-intro.bib: Updated bibliography\n</code></pre> <p>2020-07-11  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* inst/include/nanotime/duration.hpp: move headers to 'nanotime'\nand put 'interval' and 'period' in a namespace\n* directory inst/include/nanotime/globals.hpp: Idem\n* inst/include/nanotime/interval.hpp: Idem\n* inst/include/nanotime/period.hpp: Idem\n* inst/include/nanotime/pseudovector.hpp: Idem\n* inst/include/nanotime/utilities.hpp: Idem\n* src/duration.cpp: Idem\n* src/interval.cpp: Idem\n* src/nanotime.cpp: Idem\n* src/period.cpp: Idem\n* src/rounding.cpp: Idem\n* src/Makevars: Idem\n* inst/include/nanotime/pseudovector.hpp: let 'pseudovector' return a\ndifferent type than the input which gives more flexibility\n</code></pre> <p>2020-05-17  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* vignettes/nanotime-intro.pdf: Copy of prebuilt vignette from rmd/\n* vignettes/nanotime-introduction.Rnw: Sweave shell for prebuilt vignette\n\n* .travis.yml: Switch to bionic, and testing via R 4.0.0\n</code></pre> <p>2020-05-16  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* R/nanoduration.R: correct NA and negative subsetting; implement 'rep'\n* R/nanoival.R: Idem\n* R/nanoperiod.R: Idem\n* R/nanotime.R: Idem\n* inst/include/globals.hpp: correct NA and negative subsetting\n* inst/include/interval.hpp: Idem\n* inst/include/utilities.hpp: Idem\n* inst/tinytest/test_nanoduration.R: Idem\n* inst/tinytest/test_nanoival.R: Idem\n* inst/tinytest/test_nanoperiod.R: Idem\n* inst/tinytest/test_nanotime.R: Idem\n* src/duration.cpp: Idem\n* src/interval.cpp: Idem\n* src/nanotime.cpp: Idem\n* src/period.cpp: Idem\n* man/rep-nanoduration-method.Rd: document 'rep'\n* man/rep-nanoival-method.Rd: document 'rep'\n* man/rep-nanoperiod-method.Rd: document 'rep'\n* man/rep-nanotime-method.Rd: document 'rep'\n</code></pre> <p>2020-05-10  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* R/nanoival.R: check param types before invoking C functions; use\n'na.rm' in 'is.unsorted'\n* inst/tinytest/test_nanoival.R: Idem\n* R/nanoperiod.R: check param types before invoking C functions\n* R/nanotime.R: Idem\n* inst/tinytest/test_nanoperiod.R: Idem\n* src/RcppExports.cpp: Idem\n* src/interval.cpp: Idem\n* man/nanotime.Rd: document 'tz' param behaviour in constructor\n</code></pre> <p>2020-04-25  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* NAMESPACE: Added rounding functions 'nano_floor' and 'nano_ceiling'\n* R/RcppExports.R: Idem\n* R/nanoduration.R: Idem\n* R/nanoperiod.R: Idem\n* R/nanotime.R: Idem\n* inst/include/period.hpp: Idem\n* inst/tinytest/test_nanoduration.R: Idem\n* inst/tinytest/test_nanoperiod.R: Idem\n* man/rounding.Rd: Idem\n* src/RcppExports.cpp: Idem\n* src/rounding.cpp: Idem\n\n* vignettes/nanotime-introduction.Rnw: Wrapper as in anytime\n* vignettes/nanotime-intro.pdf: Pre-made pdf\n* vignettes/nanotime/rmd/nanotime-intro.Rmd: New draft vignette\n* vignettes/nanotime/rmd/nanotime-intro.bib: New bibliography\n</code></pre> <p>2020-04-09  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* README.md: Add 'last commit' badge\n</code></pre> <p>2020-03-31  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* R/nanoduration.R: Added all.equal\n* R/nanoival.R: Idem\n* R/nanoperiod.R: Idem\n* R/nanotime.R: Idem\n* inst/tinytest/test_nanoduration.R: Idem\n* inst/tinytest/test_nanoival.R: Idem\n* inst/tinytest/test_nanoperiod.R: Idem\n* inst/tinytest/test_nanotime.R: Idem\n* man/all.equal-nanoperiod-ANY-method.Rd: deleted\n* man/all.equal.nanotime.Rd: Idem\n* man/all.equal.nanoduration.Rd: Idem\n* man/all.equal.nanoival.Rd: Idem\n* man/all.equal.nanoperiod.Rd: Idem\n</code></pre> <p>2020-03-29  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* DESCRIPTION: fixed 0-length-vector ops\n* R/RcppExports.R: Idem\n* R/nanoperiod.R: Idem\n* inst/include/utilities.hpp: Idem\n* inst/tinytest/test_nanoival.R: Idem\n* inst/tinytest/test_nanoperiod.R: Idem\n* inst/tinytest/test_nanotime.R: Idem\n* src/RcppExports.cpp: Idem\n* src/interval.cpp: Idem\n* src/nanotime.cpp: Idem\n* src/period.cpp: Idem\n</code></pre> <p>2020-03-27  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* DESCRIPTION: added %in%.nanotime\n* NAMESPACE: Idem\n* R/RcppExports.R: Idem\n* R/nanoival.R: Idem\n* R/nanoperiod.R: Idem\n* inst/tinytest/test_nanoival.R: Idem\n* man/nanoduration.Rd: Idem\n* man/nanoival.Rd: Idem\n* man/nanoperiod.Rd: Idem\n* man/nanotime.Rd: Idem\n* man/set_operations.Rd: Idem\n* src/RcppExports.cpp: Idem\n* src/interval.cpp: Idem\n</code></pre> <p>2020-03-25  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* DESCRIPTION (LinkingTo): Add RcppDate providing date.h\n* src/nanotime.cpp (nanotime_wday_impl): Update one accessor for\nnewer version of date.h\n\n* inst/include/date.h: Deleted as no longer needed\n\n* .travis.yml (install): Install RcppDate\n\n* inst/include/globals.hpp: Add a single #nocov\n</code></pre> <p>2020-03-23  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n</code></pre> <p>2020-03-22  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* README.md: updated information\n</code></pre> <p>2020-03-21  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* inst/include/globals.hpp: parse format ending with 'Z' for data.table compatibility\n* src/period.cpp: fix vectorized 'plus'/'minus' ops for 'nanoperiod'\n* inst/tinytest/test_nanoperiod.R: Idem\n</code></pre> <p>2020-03-20  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* src/duration.cpp: Slightly more idiomatic Rcpp\n* src/period.cpp: Idem\n* R/nanoduration.R: Idem\n* R/nanoperiod.R: Idem\n* R/nanotime.R: Idem\n</code></pre> <p>2020-03-19  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* src/interval.cpp: Slightly more idiomatic Rcpp\n* R/nanoival.R: Idem\n</code></pre> <p>2020-03-18  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* DESCRIPTION (Imports): Updated versioned Depends: on RcppCCTZ\n\n* NAMESPACE: Turn on registration\n\n* src/nanotime.cpp: Slightly more idiomatic Rcpp\n* R/nanotime.R: Idem\n</code></pre> <p>2020-03-15  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* src/duration.cpp: Small fix to cast to plain old type\n* src/interval.cpp: Idem\n* src/nanotime.cpp: Idem\n\n* src/Makevars (PKG_CXXFLAGS): Minor edits\n\n* cleanup: Added minor helper\n</code></pre> <p>2020-03-14  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>[ The following reflects a fairly substantial set of changes made\nover a longer period and are just summarized here ]\n* DESCRIPTION: Add versioned Depends on RcppCCTZ\n* NAMESPACE: Load dynamic library\n* R/duration.R: Add new nanoival, duration, and period\n* R/nanoival.R: Idem\n* R/nanotime.R: Idem\n* R/period.R: Idem\n* inst/include/date.h: Idem\n* inst/include/duration.hpp: Idem\n* inst/include/globals.hpp: Idem\n* inst/include/interval.hpp: Idem\n* inst/include/period.hpp: Idem\n* inst/include/pseudovector.hpp: Idem\n* inst/include/utilities.hpp: Idem\n* inst/tinytest/test_data.frame.R: Idem\n* inst/tinytest/test_duration.R: Idem\n* inst/tinytest/test_nanoival.R: Idem\n* inst/tinytest/test_nanotime.R: Idem\n* inst/tinytest/test_ops.R: Idem\n* inst/tinytest/test_period.R: Idem\n* man/duration.Rd: Idem\n* man/nanoival.Rd: Idem\n* man/nanotime.Rd: Idem\n* man/period.Rd: Idem\n* src/Makevars: Idem\n* src/duration.cpp: Idem\n* src/interval.cpp: Idem\n* src/nanotime.cpp: Idem\n* src/period.cpp: Idem\n\n* .travis.yml: For now load development version of RcppCCTZ from GitHub\n</code></pre> <p>2019-11-21  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): New minor version\n\n* inst/tinytest/test_*.R: Moved from ../unitTest, changed to tinytest\n* tests/tinytest.R: Add test runner for tinytest\n* DESCRIPTION (Suggests): Add tinytest, remove RUnit\n* .travis.yml (install): Add r-cran-tinytest, remove r-cran-runit\n* tests/runTests.R: Removed RUnit test runner\n</code></pre> <p>2019-11-20  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): New minor version\n\n* R/nanotime.R (as.integer64.nanotime): Adding 'Compare' ops for\ncharacter and nanotime\n* inst/unitTests/test_ops.R: Adjust one existing test, and add six\nnew ones for character and nanotime comparisons\n* man/nanotime.Rd: Document new comparison operators\n</code></pre> <p>2019-05-25  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Date, Version): Release 0.2.4\n</code></pre> <p>2019-05-23  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* R/nanotime.R (as.integer64.nanotime): Define [[ accessor\n* inst/unitTests/test_nanotime.R (test_square_bracket): Add test\n* man/nanotime.Rd: Add alias\n</code></pre> <p>2019-04-03  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* README.md: Add dependencies badge\n</code></pre> <p>2018-09-30  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Date, Version): Release 0.2.3\n</code></pre> <p>2018-09-02  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* .travis.yml: Switch Travis CI to R 3.5 repo\n</code></pre> <p>2018-08-31  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* inst/unitTests/test_nanotime.R: Skip some tests on Solaris\n* inst/unitTests/test_zoo.R: Idem\n</code></pre> <p>2018-07-18  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.2.2\n\n* inst/unitTests/test_xts.R: Continue to disable xts tests even after\n0.11.0 release\n</code></pre> <p>2018-07-01  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.2.1\n</code></pre> <p>2018-06-30  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* R/nanotime.R (format.nanotime): Protect from empty argument\n</code></pre> <p>2018-06-23  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* R/nanotime.R: Two extras casts to integer64 in constructors\n</code></pre> <p>2018-04-19  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n</code></pre> <p>2018-04-18  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* R/nanotime.R (Compare): Added attribute-preserving comparison\n* man/nanotime.Rd: Corresponding documentation\n</code></pre> <p>2017-06-22  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.2.0\n</code></pre> <p>2017-06-21  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* DESCRIPTION (Imports): Require RcppCCTZ (&gt;= 0.2.3)\n\n* inst/unitTests/test_nanotime.R: No longer condition out Windows\n* inst/unitTests/test_nanotime.R: Ditto\n* inst/unitTests/test_xts.R: Ditto\n\n* .travis.yml (group): Added as required by Travis CI\n</code></pre> <p>2017-06-16  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* R/nanotime.R (nanotime.matrix): Adding '#nocov' tags\n</code></pre> <p>2017-06-15  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): New minor version\n\n* tests/runTests.R: Rewritten test runner\n\n* inst/unitTests/test_zoo.R (test_zoo): Condition on zoo present, and\ntest not running under Windows\n\n* inst/unitTests/test_xts.R (.setUp): Condition on a 'future' xts\nversion present as we really nedd xts to be nanotime aware for these tests\n\n* inst/unitTests/test_nanotime.R: Condition a number of tests on not\nrunning under Windows\n\n* DESCRIPTION (Suggests): Added 'xts'\n* .travis.yml (install): Ditto\n</code></pre> <p>2017-06-14  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* R/nanotime.R: Error on ops not meaningful for type,\nalso fix handling of NA, NAN, Inf, -Inf\n\n* man/nanotime.Rd: Corresponding documentation\n* inst/unitTests/test_nanotime.R: corresponding test\n</code></pre> <p>2017-06-05  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* R/nanotime.R: Correct summary() by defining 'names&lt;-'; fix 'c'\n\n* man/nanotime.Rd: Corresponding documentation\n* inst/unitTests/test_nanotime.R: corresponding test\n</code></pre> <p>2017-06-03  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* R/nanotime.R: Prevent print from printing more than\noptions()$max.print\n</code></pre> <p>2017-06-02  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* R/nanotime.R: Ensure names are kept for nanotime vectors\n* inst/unitTests/test_nanotime.R: corresponding test\n</code></pre> <p>2017-05-02  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* R/nanotime.R: Ensure 'tz=\"\"' is treated as missing\n</code></pre> <p>2017-04-04  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>* R/nanotime.R: Remove spurious debug output\n</code></pre> <p>2017-03-29  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* man/nanotime.Rd: Minor update\n\n* nanotime.Rproj: Use devtools::document to work around a roxygen2\nbug with S4 and setOldClass\n</code></pre> <p>2017-03-29  Leonardo Silvestri  lsilvestri@ztsdb.org</p> <pre><code>[ The following is summary of changes made over several weeks ]\n* DESCRIPTION: Convert to S4 class\n* NAMESPACE: Idem\n* R/nanotime.R: Idem\n* inst/unitTests/test_data.frame.R: Idem\n* inst/unitTests/test_nanotime.R: Idem\n* inst/unitTests/test_ops.R: Idem\n* inst/unitTests/test_xts.R: Idem\n* inst/unitTests/test_zoo.R: Idem\n* man/nanotime-class.Rd: Idem\n* man/nanotime-package.Rd: Idem\n* man/nanotime.Rd: Idem\n* tests/runTests.R: Idem\n* tests/simpleTests.R: Idem\n</code></pre> <p>2017-03-27  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.1.2\n</code></pre> <p>2017-02-08  Dirk Eddelbuettel  edd@max.eddelbuettel.com</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version and date\n\n* NAMESPACE: Also (re-)export as.integer64\n* R/nanotime.R: Added roxygen2 snippet for as.integer64\n* man/nanotime.Rd: Documentation\n</code></pre> <p>2017-02-04  Dirk Eddelbuettel  edd@max.eddelbuettel.com</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.1.1\n</code></pre> <p>2017-01-31  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* R/nanotime.R: One more updated format string\n</code></pre> <p>2017-01-30  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* R/nanotime.R (format.nanotime): Safer transformation to double\n(index2char.nanotime): Idem\n</code></pre> <p>2017-01-29  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* R/nanotime.R: Additional documentation section on default output\nformat string\n\n* .travis.yml (before_install): Use https for curl fetch\n</code></pre> <p>2017-01-25  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version and date\n\n* R/nanotime.R (nanotime.character): Display of nine dec digits\n(format.nanotime): Idem\n(print.nanotime): Dispatch to format.nanotime (thanks, Matt!)\n(as.integer64.nanotime): New converter to integer64\n(Ops.nanotime): Explicit definition with some casts\n\n* NAMESPACE: Corresponding exports\n* man/nanotime.Rd: Corresponding documentation\n</code></pre> <p>2017-01-10  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.1.0\n</code></pre> <p>2017-01-09  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Roll minor version\n\n* DESCRIPTION (SystemRequirements, OS_type): Remove constraint on\nUnix as RcppCCTZ is now available on Windows too\n\n* demo/nanosecondDelayExample.R: Add missing library() calls; added\nsave and reload example\n\n* README.md: Small edit showing save and reload\n</code></pre> <p>2016-12-22  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* README.md: Updated to reflect CRAN status\n</code></pre> <p>2016-12-18  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* demo/00Index: New file, demo now in package\n* demo/nanosecondDelayExample.R: Renamed demo\n</code></pre> <p>2016-12-17  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* R/nanotime.R (as.data.frame.nanotime): Documented\n(nanotime.character): Support tz and fmt options\n(format.nanotime): Idem\n(index2char.nanotime): Idem\n(as.POSIXct.nanotime): Idem\n(as.POSIXlt.nanotime): Idem\n\n* man/nanotime.Rd: Idem\n\n* tests/data.frame.R: Added simple data.{frame,table} test\n* tests/simpleTests.R: Added simple format tests\n\n* demo/nanotimeEx.R: Extended somewhat\n\n* DESCRIPTION (Suggests): Added data.table\n* .travis.yml: Added r-cran-data.table\n</code></pre> <p>2016-12-16  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Rolled minor version\n\n* R/nanotime.R (as.data.frame.nanotime): New method\n(format.nanotime): Support additional arguments\n\n* man/nanotime.Rd: Updated for new method\n* NAMESPACE: Idem\n</code></pre> <p>2016-12-15  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version, Date): Release 0.0.1\n\n* R/nanotime.R (as.POSIXct.nanotime,as.POSIXlt.nanotime)\n(as.Date.nanotime): New converters\n(format.nanotime): Add 'justify' argument\n* man/nanotime.Rd: Document new and updated methods\n* NAMESPACE: Registered new converters\n\n* tests/simpleTests.R: Additional calls to new functions\n\n* inst/NEWS.Rd:  Added\n\n* DESCRIPTION (SystemRequirements): State RcppCCTZ dependency\n</code></pre> <p>2016-12-11  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* R/nanotime.R (index2char.nanotime): Added to have zoo() objects\nprint a nanotime index correctly\n(nanotime.default): Switch class order with integer64 last\n(print.nanotime): Minor adjustment\n(format.nanotime): Added\n(showNanotime): Removed\n(format.nanotime): Support global option for format\n\n* NAMESPACE: Register S3 methods index2char.nanotime, format.nanotime;\nimport two functions from RcppCCTZ (which are now exported)\n* DESCRIPTION: Now Imports: rather than Suggests: zoo\n* tests/zooTests.R: Small changes\n\n* .travis.yml: Added\n* .codecov.yml: Ditto\n* .Rbuildignore: Adjusted accordingly\n\n* tests/simpleTests.R: Two more conversions from integer and numeric\n</code></pre> <p>2016-12-10  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* tests/zooTests.R: Simple tests for vectorised time operation\n\n* R/nanotime.R (print.nanotime): Do not default to character\nformating here, rather farm out to helper showNanotime\n(showNanotime): Simple pretty printer\n\n* tests/simpleTests.R: Added calls to snowNanotime()\n</code></pre> <p>2016-12-09  Dirk Eddelbuettel  edd@debian.org</p> <pre><code>* DESCRIPTION (Version): Very initial pre-release 0.0.0\n</code></pre>"},{"location":"CHANGELOG2/","title":"CHANGELOG2","text":""},{"location":"CHANGELOG2/#2025","title":"2025","text":"<p>2025-10-22  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Date, Version): Roll micro version and date\n\n    * docs/: Regenerated using altdoc with mkdocs-material \n    * .github/altdoc: Added and customized \n    * inst/CITATION: Added as in-container use of citation() with \n    defaults appears to drop both doi and url entries\n</code></pre> <p>2025-10-20  Michael Chirico  chiricom@google.com </p> <pre><code>    * DESCRIPTION: The methods package is now a 'Depends' as recommended \n    in WRE 1.5.6 for S4 packages\n</code></pre> <p>2025-04-02  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>     * DESCRIPTION (Version, Date): Release 0.3.12\n</code></pre> <p>2025-03-26  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Suggests): Add ggplot2 now that demo/ is scanned\n\n    * R/nanotime.R (as.character.nanotime): Refine a version comparison\n</code></pre> <p>2025-02-10  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * .github/workflows/ci.yaml (jobs): Use r-ci action with bootstrap\n</code></pre> <p>2025-01-10  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>     * DESCRIPTION (Version, Date): Release 0.3.11\n</code></pre> <p>2025-01-07  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Date, Version): Roll micro version and date\n\n    * R/nanotime.R (format.nanotime): Index and override NA values prior \n    to CCTZ call, flag after call avoiding a UBSAN warning in client code\n</code></pre>"},{"location":"CHANGELOG2/#2024","title":"2024","text":"<p>2024-10-31  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version and date\n</code></pre> <p>2024-10-30  Michael Chirico  chiricom@google.com </p> <pre><code>    * src/period.cpp: Create `Rcomplex` objects in a more robust \n    way that appeases `Wmissing-braces` compiler warnings on `clang`.\n</code></pre> <p>2024-09-16  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>     * DESCRIPTION (Version, Date): Release 0.3.10\n</code></pre> <p>2024-09-15  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * demo/ggplot2Example.R: Removed to local/ \n    * demo/00Index: Removed entry for gpplot2Example\n</code></pre> <p>2024-09-09  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version and date\n\n    * R/nanoival.R (setdiff): Under R 4.5.0, call setdiff for integer64 \n    * R/nanotime.R (setMethod): Under R 4.5.0, define unique method \n    * NAMESPACE: Conditionally export unique \n    * man/nanotime.Rd: Alias unique\n</code></pre> <p>2024-08-31  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Authors@R): Added\n</code></pre> <p>2024-06-22  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version and date\n\n    * inst/tinytest/test_nanotime.R: Retire test for Solaris \n    * inst/tinytest/test_nanoperiod.R: Idem \n    * inst/tinytest/test_nanoival.R: Idem \n    * inst/tinytest/test_zoo.R: Idem\n</code></pre> <p>2024-06-21  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>     * DESCRIPTION (Version, Date): Release 0.3.9\n</code></pre> <p>2024-06-20  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * inst/tinytest/test_nanotime.R: Condition two tests to not run on arm64\n\n    * .github/workflows/ci.yaml (jobs): Add macOS-latest back to matrix\n</code></pre> <p>2024-06-19  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Release 0.3.8\n\n    * README.md: Use tinyverse.netlify.app for dependency badge\n</code></pre> <p>2024-06-18  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * R/nanotime.R: Simplify one reference to RcppCCTZ \n    * man/nanotime.Rd: Idem\n\n    * inst/tinytest/test_nanoival.R: Condition some tests on being in an \n    'extended' run\n</code></pre> <p>2024-06-16  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version and date\n\n    * inst/include/nanotime/interval.hpp: Add extra braces \n    * src/interval.cpp: Updated output stream helper \n    * src/period.cpp: Idem\n\n    * src/Makevars (CXX_STD): Set C++17 \n    * src/Makevars.win (CXX_STD): Idem \n    * src/Makevars.ucrt: Removed\n</code></pre> <p>2024-06-14  Leonardo Silvestri  lsilvestr@ztsdb.org </p> <pre><code>    * src/Makevars.win: Remove -mno-ms-bitfields\n</code></pre> <p>2024-06-13  Leonardo Silvestri  lsilvestr@ztsdb.org </p> <pre><code>    * inst/include/nanotime/interval.hpp: NA behavior for bitfield\n</code></pre> <p>2024-06-11  Leonardo Silvestri  lsilvestr@ztsdb.org </p> <pre><code>    * inst/include/nanotime/interval.hpp: Initial fix for bitfield \n    * inst/include/nanotime/period.hppL Idem \n    * src/interval.cpp: Idem\n</code></pre> <p>2024-06-09  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * README.md: Use tinyverse.netlify.app for dependency badge\n</code></pre> <p>2024-05-24  Leonardo Silvestri  lsilvestr@ztsdb.org </p> <pre><code>    * R/nanoduration.R: duration divided by duration returns double \n    * inst/tinytest/test_nanoduration.R: additional test for the above\n\n    * inst/include/nanotime/utilities.hpp: Use interface function Rf_asS4 \n    instead of internal SET_S4_OBJECT \n    * src/interval.cpp: Change setting of S4 bit before names assigment\n</code></pre> <p>2024-04-28  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version and date\n\n    * R/nanoperiod.R: Add missing backslash in code call \n    * man/nanoperiod.Rd: Idem\n</code></pre> <p>2024-02-16  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * .github/workflows/ci.yaml (jobs): Update to actions/checkout@v4, \n    add r-ci-setup actions\n</code></pre>"},{"location":"CHANGELOG2/#2023","title":"2023","text":"<p>2023-09-26  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * R/nanotime.R: Further refinement for default UTC timezone \n    * inst/tinytest/test_nanotime.R: Idem\n</code></pre> <p>2023-09-22  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * R/nanotime.R: Provide default UTC timezone in 'as.Date()' \n    * tests/simpleTests.R: Adjist a test accordingly \n    * inst/tinytest/test_nanotime.R: Idem\n</code></pre> <p>2023-09-21  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version \n    * R/nanotime.R: Fixed 'as.Date' to force use of timezone and to \n    allow the timezone argument to be a vector\n</code></pre> <p>2023-07-11  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * README.md: Add r-universe badge\n</code></pre> <p>2023-07-06  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version \n    * R/nanotime.R: added parameter 'accurate' to functions 'nanotime' \n    and 'as.nanotime' when the argument is a 'POSIXct'. \n    * inst/tinytest/test_nanotime.R: added tests for 'accurate' parameter. \n    * man/nanotime.Rd: added documentation for 'accurate' parameter.\n</code></pre> <p>2023-03-12  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * src/Makevars: No longer set compilation standard \n    * src/Makevars.win: Idem \n    * src/Makevars.ucrt: Idem\n</code></pre>"},{"location":"CHANGELOG2/#2022","title":"2022","text":"<p>2022-12-06  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * R/nanotime.R: Add example for additional format plus reference to \n    \\pkg{RcppCCTZ} documentation which has format details \n    * man/nanotime.Rd: Idem\n</code></pre> <p>2022-11-08  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * .github/workflows/ci.yaml (jobs): Update to actions/checkout@v3\n</code></pre> <p>2022-10-23  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Release 0.3.7\n</code></pre> <p>2022-10-16  Trevor L Davis  trevor.l.davis@gmail.com </p> <pre><code>    * R/nanoduration.R: Add '+' / '-' methods for 'difftime()' \n    and 'nanoduration()' / 'nanoival()' / 'nanotime()' objects \n    * man/nanoduration.Rd: Updated \n    * inst/tinytest/test_nanoduration.R: Add tests\n</code></pre> <p>2022-10-14  Trevor L Davis  trevor.l.davis@gmail.com </p> <pre><code>    * R/nanoduration.R (as.nanoduration.difftime): Added \n    * man/nanoduration.Rd: Updated \n    * inst/tinytest/test_nanoduration.R: Add tests\n</code></pre> <p>2022-10-13  Trevor L Davis  trevor.l.davis@gmail.com </p> <pre><code>    * R/nanoduration.R (nanoduration): Add default arguments equal to zero \n    * R/nanotime.R: Use 'inherits()' instead of 'class() =='\n</code></pre> <p>2022-10-04  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * docs/mkdmt-src/: Updated for mkdocs-for-material 8.5.5\n</code></pre> <p>2022-03-06  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * DESCRIPTION (Version, Date): Release 0.3.6 \n    * R/nanoival.R: Fix incorrect subsetting with operator `%in%` \n    * NAMESPACE: Added export \n    * man/set_operations.Rd: Added file \n    * src/period.cpp: Fix parse of negative period\n</code></pre> <p>2022-03-06  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * R/nanoduration.R: Use 'inherits()' instead of 'class() ==' \n    * R/nanoival.R: Idem \n    * R/nanoperiod.R: Idem \n    * R/nanotime.R: Idem\n</code></pre>"},{"location":"CHANGELOG2/#2021","title":"2021","text":"<p>2021-12-14  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Release 0.3.5\n</code></pre> <p>2021-12-09  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * src/Makevars.ucrt: Based on patch by Tomas Kalibera that is part of \n    his changes for the Windows utf8-enhabced ucrt3 builds of R 4.2.0\n</code></pre> <p>2021-11-23  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Release 0.3.4\n</code></pre> <p>2021-11-21  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n</code></pre> <p>2021-11-21  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * inst/include/nanotime/period.hpp: Regroup and expose nanoperiod \n    interface for use by other packages \n    * src/period.cpp: Moved code to period.hpp header \n    * src/rounding.cpp: Idem\n</code></pre> <p>2021-11-17  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * README.md: Remove Travis badge \n    * .travis.yml: Remove Travis YAML config\n</code></pre> <p>2021-10-11  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * R/nanoduration.R (all.equal.nanoduration): Remove \n    as.character.nanotime as proper S4 method already defined \n     * R/nanoperiod.R (all.equal.nanoperiod): Idem \n    * NAMESPACE: Removed exports \n    * man/nanoduration.Rd: Updated \n    * man/nanoperiod.Rd: Idem\n\n    * .codecov.yml (coverage): Ensure PRs will not get a red 'fail' just \n    because coverage metrices dropped a miniscule amount\n</code></pre> <p>2021-10-10  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * R/nanoival.R (as.character.nanoival): Added \n    * NAMESPACE: Idem \n    * man/nanoival.Rd: Aliases\n\n    * R/nanoperiod.R (as.character.nanoperiod): Added \n    * NAMESPACE: Idem \n    * man/nanoperiod.Rd: Aliases\n\n    * R/nanoduration.R (as.character.nanoduration): \n    * NAMESPACE: Idem \n    * man/nanoduration.Rd: Aliases\n\n    * inst/tinytest/test_nanotime.R: Add tests \n    * inst/tinytest/test_nanoival.R: Idem \n    * inst/tinytest/test_nanoperiod.R: Idem\n</code></pre> <p>2021-10-08  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * R/nanotime.R (as.character.nanotime): Added \n    * NAMESPACE: Idem \n    * man/nanotime.Rd: Aliases\n</code></pre> <p>2021-08-09  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Release 0.3.3\n</code></pre> <p>2021-08-08  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * src/period.cpp:  Fix for `plus` and `minus` adjustment \n    * R/nanoperiod.R: Idem \n    * inst/tinytest/test_nanoperiod.R: Idem \n    * man/nanoperiod.Rd: Idem\n</code></pre> <p>2021-04-06  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (URL, BugRreports): Added to DESCRIPTION file\n</code></pre> <p>2021-03-28  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * docs/mkdmt-src/: Moved mkdocs-material input\n</code></pre>"},{"location":"CHANGELOG2/#2020","title":"2020","text":"<p>2020-12-30  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * .github/workflows/ci.yaml: Rename job from build to ci\n</code></pre> <p>2020-12-25  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * .github/workflows/ci.yaml: Small tweaks to CI YAML file\n</code></pre> <p>2020-12-13  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * README.md: Add CI badge\n</code></pre> <p>2020-12-06  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * .travis.yml: Switch to run.sh from r-ci for focal and bspm \n    * .github/workflows/ci.yaml: Use run.sh from r-ci\n</code></pre> <p>2020-12-06  Colin Umansky  statquant@outlook.com </p> <pre><code>    * inst/tinytest/test_nanoduration.R: Added tests for comparison\n</code></pre> <p>2020-12-05  Colin Umansky  statquant@outlook.com </p> <pre><code>    * R/nanoduration.R: Support nanoduration to character comparison \n    * man/nanoduration.Rd: Document new feature \n    * inst/tinytest/test_nanoduration.R: Updated tests\n</code></pre> <p>2020-10-25  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * docker/r-devel/Dockerfile: Added for simpler r-devel checks\n</code></pre> <p>2020-10-24  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * inst/tinytest/test_nanotime.R: Add explicit check.tzone=FALSE to \n    equality test for POSIXct comparison \n    * inst/tinytest/test_nanoival.R: Renable full tests, add bit64 \n    * inst/tinytest/test_nanoperiod.R: Idem \n    * inst/tinytest/test_nanotime.R: Idem \n    * inst/tinytest/test_ops.R: Idem\n</code></pre> <p>2020-09-11  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * docs/: Added package website\n\n    * README.md: Added badge and short paragraph linking to documentation\n</code></pre> <p>2020-09-07  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * demo/ggplot2Example.R: Updated and extended demo\n</code></pre> <p>2020-09-04  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * demo/ggplot2Example.R: New demo based on Leonardo's example repo\n</code></pre> <p>2020-09-03  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Release 0.3.2\n</code></pre> <p>2020-09-01  Elliott Sales de Andrade  quantum.analyst@gmail.com </p> <pre><code>    * inst/include/nanotime/interval.hpp: Correct for big-endian\n</code></pre> <p>2020-08-31  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * .travis.yml (install): Back to RcppCCTZ from CRAN\n</code></pre> <p>2020-08-30  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * R/nanoival.R: De-activate two examples \n    * R/nanotime.R: Idem \n    * man/nanoival.Rd: Idem \n    * man/nanotime.Rd: Idem\n\n    * inst/tinytest/test_nanoduration.R: Make some test conditional \n    * inst/tinytest/test_nanoival.R: Idem \n    * inst/tinytest/test_nanoperiod.R: Idem \n    * inst/tinytest/test_nanotime.R: Idem \n    * inst/tinytest/test_ops.R: Idem\n</code></pre> <p>2020-08-28  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * src/interval.cpp: Use RcppCCTZ_API header and exported functions \n    * src/nanotime.cpp: Idem \n    * src/period.cpp: Idem \n    * src/rounding.cpp: Idem\n\n    * .travis.yml (install): Install RcppCCTZ from GitHub\n</code></pre> <p>2020-08-09  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Release 0.3.1\n\n    * R/nanoival.R: Add \\dontrun{} because of Solaris \n    * R/nanoperiod.R: Idem \n    * R/nanotime.R: Idem \n    * man/nano_year.Rd: Idem\n\n    * man/nanoperiod.Rd: Idem \n    * man/nanotime.Rd: Idem \n    * man/rounding.Rd: Idem \n    * man/seq-nanoival-method.Rd: Idem \n    * man/seq.nanotime.Rd: Idem\n\n    * inst/tinytest/test_nanoival.R: Skip some tests on Solaris \n    * inst/tinytest/test_nanoperiod.R: Idem \n    * inst/tinytest/test_nanotime.R: Idem\n</code></pre> <p>2020-08-08  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version, small edit\n\n    * src/interval.cpp: Add some tests for non-zero length vectors \n    * inst/tinytest/test_nanotime.R: Skip one test upsetting SAN \n    * tests/tinytest.R: Default back to serial tests\n\n    * src/strnlen.cpp: Added strnlen_ to help Solaris \n    * inst/include/nanotime/utilities.hpp: Declare it \n    * src/interval.cpp: Use it \n    * src/nanotime.cpp: Idem\n</code></pre> <p>2020-08-07  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * src/period.cpp: Add extra braces to appease macOS compiler \n    * src/inst/include/nanotime/globals.hpp: Use chrono duration; remove \n    ambiguous time_point and seconds declarations\n</code></pre> <p>2020-08-05  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Date, Version): Release 0.3.0\n</code></pre> <p>2020-08-02  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * src/interval.cpp: Use non-throwing RcppCCTZ function \n    * src/nanotime.cpp: Idem \n    * src/period.cpp: Idem \n    * inst/include/nanotime/globals.hpp: More (u)int64_t \n    * R/nanoival.R: Refine error message check \n    * R/nanotime.R: Idem\n</code></pre> <p>2020-07-29  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n</code></pre> <p>2020-07-29  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * src/Makevars.win: Add to set explicit '-mno-ms-bitfields' flag \n    required for bitfield operations on Windows\n</code></pre> <p>2020-07-21  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * inst/NEWS.Rd: Additional entries added\n</code></pre> <p>2020-07-20  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * vignettes/nanotime/rmd/nanotime-intro.Rmd: Additional edits\n</code></pre> <p>2020-07-19  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * vignettes/nanotime/rmd/nanotime-intro.Rmd: Additional edits \n    * vignettes/nanotime/rmd/nanotime-intro.bib: Updated bibliography\n</code></pre> <p>2020-07-11  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * inst/include/nanotime/duration.hpp: move headers to 'nanotime' \n    and put 'interval' and 'period' in a namespace \n    * directory inst/include/nanotime/globals.hpp: Idem \n    * inst/include/nanotime/interval.hpp: Idem \n    * inst/include/nanotime/period.hpp: Idem \n    * inst/include/nanotime/pseudovector.hpp: Idem \n    * inst/include/nanotime/utilities.hpp: Idem \n    * src/duration.cpp: Idem \n    * src/interval.cpp: Idem \n    * src/nanotime.cpp: Idem \n    * src/period.cpp: Idem \n    * src/rounding.cpp: Idem \n    * src/Makevars: Idem \n    * inst/include/nanotime/pseudovector.hpp: let 'pseudovector' return a \n    different type than the input which gives more flexibility\n</code></pre> <p>2020-05-17  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * vignettes/nanotime-intro.pdf: Copy of prebuilt vignette from rmd/ \n    * vignettes/nanotime-introduction.Rnw: Sweave shell for prebuilt vignette\n\n    * .travis.yml: Switch to bionic, and testing via R 4.0.0\n</code></pre> <p>2020-05-16  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n     * R/nanoduration.R: correct NA and negative subsetting; implement 'rep' \n     * R/nanoival.R: Idem \n     * R/nanoperiod.R: Idem \n     * R/nanotime.R: Idem \n     * inst/include/globals.hpp: correct NA and negative subsetting \n     * inst/include/interval.hpp: Idem \n     * inst/include/utilities.hpp: Idem \n     * inst/tinytest/test_nanoduration.R: Idem \n     * inst/tinytest/test_nanoival.R: Idem \n     * inst/tinytest/test_nanoperiod.R: Idem \n     * inst/tinytest/test_nanotime.R: Idem \n     * src/duration.cpp: Idem \n     * src/interval.cpp: Idem \n     * src/nanotime.cpp: Idem \n     * src/period.cpp: Idem \n    * man/rep-nanoduration-method.Rd: document 'rep' \n    * man/rep-nanoival-method.Rd: document 'rep' \n    * man/rep-nanoperiod-method.Rd: document 'rep' \n    * man/rep-nanotime-method.Rd: document 'rep'\n</code></pre> <p>2020-05-10  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * R/nanoival.R: check param types before invoking C functions; use \n    'na.rm' in 'is.unsorted' \n    * inst/tinytest/test_nanoival.R: Idem \n    * R/nanoperiod.R: check param types before invoking C functions \n    * R/nanotime.R: Idem \n    * inst/tinytest/test_nanoperiod.R: Idem \n    * src/RcppExports.cpp: Idem \n    * src/interval.cpp: Idem \n    * man/nanotime.Rd: document 'tz' param behaviour in constructor\n</code></pre> <p>2020-04-25  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * NAMESPACE: Added rounding functions 'nano_floor' and 'nano_ceiling' \n    * R/RcppExports.R: Idem \n     * R/nanoduration.R: Idem \n     * R/nanoperiod.R: Idem \n     * R/nanotime.R: Idem \n     * inst/include/period.hpp: Idem \n     * inst/tinytest/test_nanoduration.R: Idem \n     * inst/tinytest/test_nanoperiod.R: Idem \n     * man/rounding.Rd: Idem \n     * src/RcppExports.cpp: Idem \n     * src/rounding.cpp: Idem\n\n    * vignettes/nanotime-introduction.Rnw: Wrapper as in anytime \n    * vignettes/nanotime-intro.pdf: Pre-made pdf \n    * vignettes/nanotime/rmd/nanotime-intro.Rmd: New draft vignette \n    * vignettes/nanotime/rmd/nanotime-intro.bib: New bibliography\n</code></pre> <p>2020-04-09  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * README.md: Add 'last commit' badge\n</code></pre> <p>2020-03-31  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * R/nanoduration.R: Added all.equal \n     * R/nanoival.R: Idem \n     * R/nanoperiod.R: Idem \n     * R/nanotime.R: Idem \n     * inst/tinytest/test_nanoduration.R: Idem \n     * inst/tinytest/test_nanoival.R: Idem \n     * inst/tinytest/test_nanoperiod.R: Idem \n     * inst/tinytest/test_nanotime.R: Idem \n     * man/all.equal-nanoperiod-ANY-method.Rd: deleted \n    * man/all.equal.nanotime.Rd: Idem \n     * man/all.equal.nanoduration.Rd: Idem \n     * man/all.equal.nanoival.Rd: Idem \n     * man/all.equal.nanoperiod.Rd: Idem\n</code></pre> <p>2020-03-29  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * DESCRIPTION: fixed 0-length-vector ops \n    * R/RcppExports.R: Idem \n     * R/nanoperiod.R: Idem \n     * inst/include/utilities.hpp: Idem \n     * inst/tinytest/test_nanoival.R: Idem \n     * inst/tinytest/test_nanoperiod.R: Idem \n     * inst/tinytest/test_nanotime.R: Idem \n     * src/RcppExports.cpp: Idem \n     * src/interval.cpp: Idem \n     * src/nanotime.cpp: Idem \n     * src/period.cpp: Idem\n</code></pre> <p>2020-03-27  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * DESCRIPTION: added %in%.nanotime \n    * NAMESPACE: Idem \n     * R/RcppExports.R: Idem \n     * R/nanoival.R: Idem \n     * R/nanoperiod.R: Idem \n     * inst/tinytest/test_nanoival.R: Idem \n     * man/nanoduration.Rd: Idem \n     * man/nanoival.Rd: Idem \n     * man/nanoperiod.Rd: Idem \n     * man/nanotime.Rd: Idem \n     * man/set_operations.Rd: Idem \n     * src/RcppExports.cpp: Idem \n     * src/interval.cpp: Idem\n</code></pre> <p>2020-03-25  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * DESCRIPTION (LinkingTo): Add RcppDate providing date.h \n    * src/nanotime.cpp (nanotime_wday_impl): Update one accessor for \n    newer version of date.h\n\n    * inst/include/date.h: Deleted as no longer needed\n\n    * .travis.yml (install): Install RcppDate\n\n    * inst/include/globals.hpp: Add a single #nocov\n</code></pre> <p>2020-03-23  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n</code></pre> <p>2020-03-22  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * README.md: updated information\n</code></pre> <p>2020-03-21  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * inst/include/globals.hpp: parse format ending with 'Z' for data.table compatibility \n    * src/period.cpp: fix vectorized 'plus'/'minus' ops for 'nanoperiod' \n    * inst/tinytest/test_nanoperiod.R: Idem\n</code></pre> <p>2020-03-20  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * src/duration.cpp: Slightly more idiomatic Rcpp \n    * src/period.cpp: Idem \n    * R/nanoduration.R: Idem \n    * R/nanoperiod.R: Idem \n    * R/nanotime.R: Idem\n</code></pre> <p>2020-03-19  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * src/interval.cpp: Slightly more idiomatic Rcpp \n    * R/nanoival.R: Idem\n</code></pre> <p>2020-03-18  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * DESCRIPTION (Imports): Updated versioned Depends: on RcppCCTZ\n\n    * NAMESPACE: Turn on registration\n\n    * src/nanotime.cpp: Slightly more idiomatic Rcpp \n    * R/nanotime.R: Idem\n</code></pre> <p>2020-03-15  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * src/duration.cpp: Small fix to cast to plain old type \n    * src/interval.cpp: Idem \n    * src/nanotime.cpp: Idem\n\n    * src/Makevars (PKG_CXXFLAGS): Minor edits\n\n    * cleanup: Added minor helper\n</code></pre> <p>2020-03-14  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    [ The following reflects a fairly substantial set of changes made \n    over a longer period and are just summarized here ] \n    * DESCRIPTION: Add versioned Depends on RcppCCTZ \n    * NAMESPACE: Load dynamic library \n    * R/duration.R: Add new nanoival, duration, and period \n    * R/nanoival.R: Idem \n    * R/nanotime.R: Idem \n    * R/period.R: Idem \n    * inst/include/date.h: Idem \n    * inst/include/duration.hpp: Idem \n    * inst/include/globals.hpp: Idem \n    * inst/include/interval.hpp: Idem \n    * inst/include/period.hpp: Idem \n    * inst/include/pseudovector.hpp: Idem \n    * inst/include/utilities.hpp: Idem \n    * inst/tinytest/test_data.frame.R: Idem \n    * inst/tinytest/test_duration.R: Idem \n    * inst/tinytest/test_nanoival.R: Idem \n    * inst/tinytest/test_nanotime.R: Idem \n    * inst/tinytest/test_ops.R: Idem \n    * inst/tinytest/test_period.R: Idem \n    * man/duration.Rd: Idem \n    * man/nanoival.Rd: Idem \n    * man/nanotime.Rd: Idem \n    * man/period.Rd: Idem \n    * src/Makevars: Idem \n    * src/duration.cpp: Idem \n    * src/interval.cpp: Idem \n    * src/nanotime.cpp: Idem \n    * src/period.cpp: Idem\n\n    * .travis.yml: For now load development version of RcppCCTZ from GitHub\n</code></pre>"},{"location":"CHANGELOG2/#2019","title":"2019","text":"<p>2019-11-21  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): New minor version\n\n    * inst/tinytest/test_*.R: Moved from ../unitTest, changed to tinytest \n    * tests/tinytest.R: Add test runner for tinytest \n    * DESCRIPTION (Suggests): Add tinytest, remove RUnit \n    * .travis.yml (install): Add r-cran-tinytest, remove r-cran-runit \n    * tests/runTests.R: Removed RUnit test runner\n</code></pre> <p>2019-11-20  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): New minor version\n\n    * R/nanotime.R (as.integer64.nanotime): Adding 'Compare' ops for \n    character and nanotime \n    * inst/unitTests/test_ops.R: Adjust one existing test, and add six \n    new ones for character and nanotime comparisons \n    * man/nanotime.Rd: Document new comparison operators\n</code></pre> <p>2019-05-25  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Date, Version): Release 0.2.4\n</code></pre> <p>2019-05-23  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * R/nanotime.R (as.integer64.nanotime): Define [[ accessor \n    * inst/unitTests/test_nanotime.R (test_square_bracket): Add test \n    * man/nanotime.Rd: Add alias\n</code></pre> <p>2019-04-03  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * README.md: Add dependencies badge\n</code></pre>"},{"location":"CHANGELOG2/#2018","title":"2018","text":"<p>2018-09-30  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Date, Version): Release 0.2.3\n</code></pre> <p>2018-09-02  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>     * .travis.yml: Switch Travis CI to R 3.5 repo\n</code></pre> <p>2018-08-31  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * inst/unitTests/test_nanotime.R: Skip some tests on Solaris \n    * inst/unitTests/test_zoo.R: Idem\n</code></pre> <p>2018-07-18  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Release 0.2.2\n\n    * inst/unitTests/test_xts.R: Continue to disable xts tests even after \n    0.11.0 release\n</code></pre> <p>2018-07-01  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Release 0.2.1\n</code></pre> <p>2018-06-30  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * R/nanotime.R (format.nanotime): Protect from empty argument\n</code></pre> <p>2018-06-23  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>     * DESCRIPTION (Version, Date): Roll minor version\n\n    * R/nanotime.R: Two extras casts to integer64 in constructors\n</code></pre> <p>2018-04-19  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>     * DESCRIPTION (Version, Date): Roll minor version\n</code></pre> <p>2018-04-18  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * R/nanotime.R (Compare): Added attribute-preserving comparison \n    * man/nanotime.Rd: Corresponding documentation\n</code></pre>"},{"location":"CHANGELOG2/#2017","title":"2017","text":"<p>2017-06-22  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Release 0.2.0\n</code></pre> <p>2017-06-21  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * DESCRIPTION (Imports): Require RcppCCTZ (&gt;= 0.2.3)\n\n    * inst/unitTests/test_nanotime.R: No longer condition out Windows \n    * inst/unitTests/test_nanotime.R: Ditto \n    * inst/unitTests/test_xts.R: Ditto\n\n    * .travis.yml (group): Added as required by Travis CI\n</code></pre> <p>2017-06-16  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * R/nanotime.R (nanotime.matrix): Adding '#nocov' tags\n</code></pre> <p>2017-06-15  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): New minor version\n\n    * tests/runTests.R: Rewritten test runner\n\n    * inst/unitTests/test_zoo.R (test_zoo): Condition on zoo present, and \n    test not running under Windows\n\n    * inst/unitTests/test_xts.R (.setUp): Condition on a 'future' xts \n    version present as we really nedd xts to be nanotime aware for these tests\n\n    * inst/unitTests/test_nanotime.R: Condition a number of tests on not \n    running under Windows\n\n    * DESCRIPTION (Suggests): Added 'xts' \n    * .travis.yml (install): Ditto\n</code></pre> <p>2017-06-14  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * R/nanotime.R: Error on ops not meaningful for type, \n    also fix handling of NA, NAN, Inf, -Inf\n\n    * man/nanotime.Rd: Corresponding documentation \n    * inst/unitTests/test_nanotime.R: corresponding test\n</code></pre> <p>2017-06-05  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * R/nanotime.R: Correct summary() by defining 'names&lt;-'; fix 'c'\n\n    * man/nanotime.Rd: Corresponding documentation \n    * inst/unitTests/test_nanotime.R: corresponding test\n</code></pre> <p>2017-06-03  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * R/nanotime.R: Prevent print from printing more than \n    options()$max.print\n</code></pre> <p>2017-06-02  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * R/nanotime.R: Ensure names are kept for nanotime vectors \n    * inst/unitTests/test_nanotime.R: corresponding test\n</code></pre> <p>2017-05-02  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * R/nanotime.R: Ensure 'tz=\"\"' is treated as missing\n</code></pre> <p>2017-04-04  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    * R/nanotime.R: Remove spurious debug output\n</code></pre> <p>2017-03-29  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * man/nanotime.Rd: Minor update\n\n    * nanotime.Rproj: Use devtools::document to work around a roxygen2 \n    bug with S4 and setOldClass\n</code></pre> <p>2017-03-29  Leonardo Silvestri  lsilvestri@ztsdb.org </p> <pre><code>    [ The following is summary of changes made over several weeks ] \n    * DESCRIPTION: Convert to S4 class \n    * NAMESPACE: Idem \n    * R/nanotime.R: Idem \n    * inst/unitTests/test_data.frame.R: Idem \n    * inst/unitTests/test_nanotime.R: Idem \n    * inst/unitTests/test_ops.R: Idem \n    * inst/unitTests/test_xts.R: Idem \n    * inst/unitTests/test_zoo.R: Idem \n    * man/nanotime-class.Rd: Idem \n    * man/nanotime-package.Rd: Idem \n    * man/nanotime.Rd: Idem \n    * tests/runTests.R: Idem \n    * tests/simpleTests.R: Idem\n</code></pre> <p>2017-03-27  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Release 0.1.2\n</code></pre> <p>2017-02-08  Dirk Eddelbuettel  edd@max.eddelbuettel.com </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version and date\n\n    * NAMESPACE: Also (re-)export as.integer64 \n    * R/nanotime.R: Added roxygen2 snippet for as.integer64 \n    * man/nanotime.Rd: Documentation\n</code></pre> <p>2017-02-04  Dirk Eddelbuettel  edd@max.eddelbuettel.com </p> <pre><code>    * DESCRIPTION (Version, Date): Release 0.1.1\n</code></pre> <p>2017-01-31  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * R/nanotime.R: One more updated format string\n</code></pre> <p>2017-01-30  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * R/nanotime.R (format.nanotime): Safer transformation to double \n    (index2char.nanotime): Idem\n</code></pre> <p>2017-01-29  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * R/nanotime.R: Additional documentation section on default output \n    format string\n\n    * .travis.yml (before_install): Use https for curl fetch\n</code></pre> <p>2017-01-25  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version and date\n\n    * R/nanotime.R (nanotime.character): Display of nine dec digits \n    (format.nanotime): Idem \n    (print.nanotime): Dispatch to format.nanotime (thanks, Matt!) \n    (as.integer64.nanotime): New converter to integer64 \n    (Ops.nanotime): Explicit definition with some casts\n\n    * NAMESPACE: Corresponding exports \n    * man/nanotime.Rd: Corresponding documentation\n</code></pre> <p>2017-01-10  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Release 0.1.0\n</code></pre> <p>2017-01-09  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Roll minor version\n\n    * DESCRIPTION (SystemRequirements, OS_type): Remove constraint on \n    Unix as RcppCCTZ is now available on Windows too\n\n    * demo/nanosecondDelayExample.R: Add missing library() calls; added \n    save and reload example\n\n    * README.md: Small edit showing save and reload\n</code></pre>"},{"location":"CHANGELOG2/#2016","title":"2016","text":"<p>2016-12-22  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * README.md: Updated to reflect CRAN status\n</code></pre> <p>2016-12-18  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * demo/00Index: New file, demo now in package \n    * demo/nanosecondDelayExample.R: Renamed demo\n</code></pre> <p>2016-12-17  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * R/nanotime.R (as.data.frame.nanotime): Documented \n    (nanotime.character): Support tz and fmt options \n    (format.nanotime): Idem \n    (index2char.nanotime): Idem \n    (as.POSIXct.nanotime): Idem \n    (as.POSIXlt.nanotime): Idem\n\n    * man/nanotime.Rd: Idem\n\n    * tests/data.frame.R: Added simple data.{frame,table} test \n    * tests/simpleTests.R: Added simple format tests\n\n    * demo/nanotimeEx.R: Extended somewhat\n\n    * DESCRIPTION (Suggests): Added data.table \n    * .travis.yml: Added r-cran-data.table\n</code></pre> <p>2016-12-16  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Rolled minor version\n\n    * R/nanotime.R (as.data.frame.nanotime): New method \n    (format.nanotime): Support additional arguments\n\n    * man/nanotime.Rd: Updated for new method \n    * NAMESPACE: Idem\n</code></pre> <p>2016-12-15  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version, Date): Release 0.0.1\n\n    * R/nanotime.R (as.POSIXct.nanotime,as.POSIXlt.nanotime) \n    (as.Date.nanotime): New converters \n    (format.nanotime): Add 'justify' argument \n    * man/nanotime.Rd: Document new and updated methods \n    * NAMESPACE: Registered new converters\n\n    * tests/simpleTests.R: Additional calls to new functions\n\n    * inst/NEWS.Rd:  Added\n\n    * DESCRIPTION (SystemRequirements): State RcppCCTZ dependency\n</code></pre> <p>2016-12-11  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * R/nanotime.R (index2char.nanotime): Added to have zoo() objects \n    print a nanotime index correctly \n    (nanotime.default): Switch class order with integer64 last \n    (print.nanotime): Minor adjustment \n    (format.nanotime): Added \n    (showNanotime): Removed \n    (format.nanotime): Support global option for format\n\n    * NAMESPACE: Register S3 methods index2char.nanotime, format.nanotime; \n    import two functions from RcppCCTZ (which are now exported) \n    * DESCRIPTION: Now Imports: rather than Suggests: zoo \n    * tests/zooTests.R: Small changes\n\n    * .travis.yml: Added \n    * .codecov.yml: Ditto \n    * .Rbuildignore: Adjusted accordingly\n\n    * tests/simpleTests.R: Two more conversions from integer and numeric\n</code></pre> <p>2016-12-10  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * tests/zooTests.R: Simple tests for vectorised time operation\n\n    * R/nanotime.R (print.nanotime): Do not default to character \n    formating here, rather farm out to helper showNanotime \n    (showNanotime): Simple pretty printer\n\n    * tests/simpleTests.R: Added calls to snowNanotime()\n</code></pre> <p>2016-12-09  Dirk Eddelbuettel  edd@debian.org </p> <pre><code>    * DESCRIPTION (Version): Very initial pre-release 0.0.0\n</code></pre>"},{"location":"CITATION/","title":"Citation","text":"<p>To cite nanotime in publications use:</p> <p>Eddelbuettel D, Silvestri L (2025). nanotime: Nanosecond-Resolution Time Support for R. doi:10.32614/CRAN.package.nanotime, R package version 0.3.12.1.  </p>"},{"location":"LICENSE/","title":"License","text":"<pre><code>                GNU GENERAL PUBLIC LICENSE\n                   Version 2, June 1991\n</code></pre> <p>Copyright (C) 1989, 1991 Free Software Foundation, Inc.,  51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA  Everyone is permitted to copy and distribute verbatim copies  of this license document, but changing it is not allowed.</p> <pre><code>                        Preamble\n</code></pre> <p>The licenses for most software are designed to take away your freedom to share and change it.  By contrast, the GNU General Public License is intended to guarantee your freedom to share and change free software--to make sure the software is free for all its users.  This General Public License applies to most of the Free Software Foundation's software and to any other program whose authors commit to using it.  (Some other Free Software Foundation software is covered by the GNU Lesser General Public License instead.)  You can apply it to your programs, too.</p> <p>When we speak of free software, we are referring to freedom, not price.  Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for this service if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs; and that you know you can do these things.</p> <p>To protect your rights, we need to make restrictions that forbid anyone to deny you these rights or to ask you to surrender the rights. These restrictions translate to certain responsibilities for you if you distribute copies of the software, or if you modify it.</p> <p>For example, if you distribute copies of such a program, whether gratis or for a fee, you must give the recipients all the rights that you have.  You must make sure that they, too, receive or can get the source code.  And you must show them these terms so they know their rights.</p> <p>We protect your rights with two steps: (1) copyright the software, and (2) offer you this license which gives you legal permission to copy, distribute and/or modify the software.</p> <p>Also, for each author's protection and ours, we want to make certain that everyone understands that there is no warranty for this free software.  If the software is modified by someone else and passed on, we want its recipients to know that what they have is not the original, so that any problems introduced by others will not reflect on the original authors' reputations.</p> <p>Finally, any free program is threatened constantly by software patents.  We wish to avoid the danger that redistributors of a free program will individually obtain patent licenses, in effect making the program proprietary.  To prevent this, we have made it clear that any patent must be licensed for everyone's free use or not licensed at all.</p> <p>The precise terms and conditions for copying, distribution and modification follow.</p> <pre><code>                GNU GENERAL PUBLIC LICENSE\n</code></pre> <p>TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION</p> <ol> <li>This License applies to any program or other work which contains a notice placed by the copyright holder saying it may be distributed under the terms of this General Public License.  The \"Program\", below, refers to any such program or work, and a \"work based on the Program\" means either the Program or any derivative work under copyright law: that is to say, a work containing the Program or a portion of it, either verbatim or with modifications and/or translated into another language.  (Hereinafter, translation is included without limitation in the term \"modification\".)  Each licensee is addressed as \"you\".</li> </ol> <p>Activities other than copying, distribution and modification are not covered by this License; they are outside its scope.  The act of running the Program is not restricted, and the output from the Program is covered only if its contents constitute a work based on the Program (independent of having been made by running the Program). Whether that is true depends on what the Program does.</p> <ol> <li>You may copy and distribute verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice and disclaimer of warranty; keep intact all the notices that refer to this License and to the absence of any warranty; and give any other recipients of the Program a copy of this License along with the Program.</li> </ol> <p>You may charge a fee for the physical act of transferring a copy, and you may at your option offer warranty protection in exchange for a fee.</p> <ol> <li> <p>You may modify your copy or copies of the Program or any portion of it, thus forming a work based on the Program, and copy and distribute such modifications or work under the terms of Section 1 above, provided that you also meet all of these conditions:</p> <p>a) You must cause the modified files to carry prominent notices stating that you changed the files and the date of any change.</p> <p>b) You must cause any work that you distribute or publish, that in whole or in part contains or is derived from the Program or any part thereof, to be licensed as a whole at no charge to all third parties under the terms of this License.</p> <p>c) If the modified program normally reads commands interactively when run, you must cause it, when started running for such interactive use in the most ordinary way, to print or display an announcement including an appropriate copyright notice and a notice that there is no warranty (or else, saying that you provide a warranty) and that users may redistribute the program under these conditions, and telling the user how to view a copy of this License.  (Exception: if the Program itself is interactive but does not normally print such an announcement, your work based on the Program is not required to print an announcement.)</p> </li> </ol> <p>These requirements apply to the modified work as a whole.  If identifiable sections of that work are not derived from the Program, and can be reasonably considered independent and separate works in themselves, then this License, and its terms, do not apply to those sections when you distribute them as separate works.  But when you distribute the same sections as part of a whole which is a work based on the Program, the distribution of the whole must be on the terms of this License, whose permissions for other licensees extend to the entire whole, and thus to each and every part regardless of who wrote it.</p> <p>Thus, it is not the intent of this section to claim rights or contest your rights to work written entirely by you; rather, the intent is to exercise the right to control the distribution of derivative or collective works based on the Program.</p> <p>In addition, mere aggregation of another work not based on the Program with the Program (or with a work based on the Program) on a volume of a storage or distribution medium does not bring the other work under the scope of this License.</p> <ol> <li> <p>You may copy and distribute the Program (or a work based on it, under Section 2) in object code or executable form under the terms of Sections 1 and 2 above provided that you also do one of the following:</p> <p>a) Accompany it with the complete corresponding machine-readable source code, which must be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,</p> <p>b) Accompany it with a written offer, valid for at least three years, to give any third party, for a charge no more than your cost of physically performing source distribution, a complete machine-readable copy of the corresponding source code, to be distributed under the terms of Sections 1 and 2 above on a medium customarily used for software interchange; or,</p> <p>c) Accompany it with the information you received as to the offer to distribute corresponding source code.  (This alternative is allowed only for noncommercial distribution and only if you received the program in object code or executable form with such an offer, in accord with Subsection b above.)</p> </li> </ol> <p>The source code for a work means the preferred form of the work for making modifications to it.  For an executable work, complete source code means all the source code for all modules it contains, plus any associated interface definition files, plus the scripts used to control compilation and installation of the executable.  However, as a special exception, the source code distributed need not include anything that is normally distributed (in either source or binary form) with the major components (compiler, kernel, and so on) of the operating system on which the executable runs, unless that component itself accompanies the executable.</p> <p>If distribution of executable or object code is made by offering access to copy from a designated place, then offering equivalent access to copy the source code from the same place counts as distribution of the source code, even though third parties are not compelled to copy the source along with the object code.</p> <ol> <li> <p>You may not copy, modify, sublicense, or distribute the Program except as expressly provided under this License.  Any attempt otherwise to copy, modify, sublicense or distribute the Program is void, and will automatically terminate your rights under this License. However, parties who have received copies, or rights, from you under this License will not have their licenses terminated so long as such parties remain in full compliance.</p> </li> <li> <p>You are not required to accept this License, since you have not signed it.  However, nothing else grants you permission to modify or distribute the Program or its derivative works.  These actions are prohibited by law if you do not accept this License.  Therefore, by modifying or distributing the Program (or any work based on the Program), you indicate your acceptance of this License to do so, and all its terms and conditions for copying, distributing or modifying the Program or works based on it.</p> </li> <li> <p>Each time you redistribute the Program (or any work based on the Program), the recipient automatically receives a license from the original licensor to copy, distribute or modify the Program subject to these terms and conditions.  You may not impose any further restrictions on the recipients' exercise of the rights granted herein. You are not responsible for enforcing compliance by third parties to this License.</p> </li> <li> <p>If, as a consequence of a court judgment or allegation of patent infringement or for any other reason (not limited to patent issues), conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License.  If you cannot distribute so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not distribute the Program at all.  For example, if a patent license would not permit royalty-free redistribution of the Program by all those who receive copies directly or indirectly through you, then the only way you could satisfy both it and this License would be to refrain entirely from distribution of the Program.</p> </li> </ol> <p>If any portion of this section is held invalid or unenforceable under any particular circumstance, the balance of the section is intended to apply and the section as a whole is intended to apply in other circumstances.</p> <p>It is not the purpose of this section to induce you to infringe any patents or other property right claims or to contest validity of any such claims; this section has the sole purpose of protecting the integrity of the free software distribution system, which is implemented by public license practices.  Many people have made generous contributions to the wide range of software distributed through that system in reliance on consistent application of that system; it is up to the author/donor to decide if he or she is willing to distribute software through any other system and a licensee cannot impose that choice.</p> <p>This section is intended to make thoroughly clear what is believed to be a consequence of the rest of this License.</p> <ol> <li> <p>If the distribution and/or use of the Program is restricted in certain countries either by patents or by copyrighted interfaces, the original copyright holder who places the Program under this License may add an explicit geographical distribution limitation excluding those countries, so that distribution is permitted only in or among countries not thus excluded.  In such case, this License incorporates the limitation as if written in the body of this License.</p> </li> <li> <p>The Free Software Foundation may publish revised and/or new versions of the General Public License from time to time.  Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.</p> </li> </ol> <p>Each version is given a distinguishing version number.  If the Program specifies a version number of this License which applies to it and \"any later version\", you have the option of following the terms and conditions either of that version or of any later version published by the Free Software Foundation.  If the Program does not specify a version number of this License, you may choose any version ever published by the Free Software Foundation.</p> <ol> <li> <p>If you wish to incorporate parts of the Program into other free programs whose distribution conditions are different, write to the author to ask for permission.  For software which is copyrighted by the Free Software Foundation, write to the Free Software Foundation; we sometimes make exceptions for this.  Our decision will be guided by the two goals of preserving the free status of all derivatives of our free software and of promoting the sharing and reuse of software generally.</p> <pre><code>                    NO WARRANTY\n</code></pre> </li> <li> <p>BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.</p> </li> <li> <p>IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR REDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.</p> <pre><code>             END OF TERMS AND CONDITIONS\n\n    How to Apply These Terms to Your New Programs\n</code></pre> </li> </ol> <p>If you develop a new program, and you want it to be of the greatest possible use to the public, the best way to achieve this is to make it free software which everyone can redistribute and change under these terms.</p> <p>To do so, attach the following notices to the program.  It is safest to attach them to the start of each source file to most effectively convey the exclusion of warranty; and each file should have at least the \"copyright\" line and a pointer to where the full notice is found.</p> <pre><code>&lt;one line to give the program's name and a brief idea of what it does.&gt;\nCopyright (C) &lt;year&gt;  &lt;name of author&gt;\n\nThis program is free software; you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation; either version 2 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License along\nwith this program; if not, write to the Free Software Foundation, Inc.,\n51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n</code></pre> <p>Also add information on how to contact you by electronic and paper mail.</p> <p>If the program is interactive, make it output a short notice like this when it starts in an interactive mode:</p> <pre><code>Gnomovision version 69, Copyright (C) year name of author\nGnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\nThis is free software, and you are welcome to redistribute it\nunder certain conditions; type `show c' for details.\n</code></pre> <p>The hypothetical commands <code>show w' and</code>show c' should show the appropriate parts of the General Public License.  Of course, the commands you use may be called something other than <code>show w' and</code>show c'; they could even be mouse-clicks or menu items--whatever suits your program.</p> <p>You should also get your employer (if you work as a programmer) or your school, if any, to sign a \"copyright disclaimer\" for the program, if necessary.  Here is a sample; alter the names:</p> <p>Yoyodyne, Inc., hereby disclaims all copyright interest in the program   `Gnomovision' (which makes passes at compilers) written by James Hacker.</p> <p>, 1 April 1989   Ty Coon, President of Vice <p>This General Public License does not permit incorporating your program into proprietary programs.  If your program is a subroutine library, you may consider it more useful to permit linking proprietary applications with the library.  If this is what you want to do, use the GNU Lesser General Public License instead of this License.</p>"},{"location":"NEWS/","title":"News for Package nanotime","text":""},{"location":"NEWS/#changes-in-version-03121-unreleased","title":"Changes in version 0.3.12.1 (unreleased)","text":"<ul> <li>  The <code>methods</code> package is now a Depends as WRE recommends (Michael Chirico in [#141](https://github.com/eddelbuettel/nanotime/issues/141) based on suggestion by Dirk in [#140](https://github.com/eddelbuettel/nanotime/issues/140))  </li> <li>  The mkdocs-material documentation site is now generated via altdoc </li> </ul>"},{"location":"NEWS/#changes-in-version-0312-2025-04-02","title":"Changes in version 0.3.12 (2025-04-02)","text":"<ul> <li>  Update continuous integration to use r-ci action with bootstrap  </li> <li>  Add ggplot2 to Suggests due to use in demo/ which is now scanned  </li> <li>  Refine a version comparison for R 4.5.0 to be greater or equal  </li> </ul>"},{"location":"NEWS/#changes-in-version-0311-2025-01-10","title":"Changes in version 0.3.11 (2025-01-10)","text":"<ul> <li>  Explicit <code>Rcomplex</code> assignment accommodates pickier compilers over newer R struct (Michael Chirico in [#135](https://github.com/eddelbuettel/nanotime/issues/135) fixing [#134](https://github.com/eddelbuettel/nanotime/issues/134))  </li> <li>  When formatting, <code>NA</code> are flagged before <code>CCTZ</code> call to to not trigger santizier, and set to NA after call (Dirk in [#136](https://github.com/eddelbuettel/nanotime/issues/136))  </li> </ul>"},{"location":"NEWS/#changes-in-version-0310-2024-09-16","title":"Changes in version 0.3.10 (2024-09-16)","text":"<ul> <li>  Retire several checks for Solaris in test suite (Dirk in [#130](https://github.com/eddelbuettel/nanotime/issues/130))  </li> <li>  Switch to Authors@R in DESCRIPTION as now required by CRAN  </li> <li>  Accommodate R-devel change for setdiff (Dirk in [#133](https://github.com/eddelbuettel/nanotime/issues/133) fixing [#132](https://github.com/eddelbuettel/nanotime/issues/132))  </li> <li>  No longer ship defunction ggplot2 demo (Dirk fixing [#131](https://github.com/eddelbuettel/nanotime/issues/131))  </li> </ul>"},{"location":"NEWS/#changes-in-version-039-2024-06-21","title":"Changes in version 0.3.9 (2024-06-21)","text":"<ul> <li>  Condition two tests to not run on arm64 (Dirk in [#129](https://github.com/eddelbuettel/nanotime/issues/129) fixing [#128](https://github.com/eddelbuettel/nanotime/issues/128))  </li> </ul>"},{"location":"NEWS/#changes-in-version-038-2024-06-19","title":"Changes in version 0.3.8 (2024-06-19)","text":"<ul> <li>  Time format documentation now has a reference to RcppCCTZ </li> <li>  The package no longer sets a default C++ compilation standard of C++11 (Dirk initially in [#114](https://github.com/eddelbuettel/nanotime/issues/114), and later switched to C++17)  </li> <li>  New <code>accurate</code> parameter for conversion from <code>POSIXct</code> to <code>nanotime</code> (Davor Josipovic and Leonardo in [#116](https://github.com/eddelbuettel/nanotime/issues/116) closing [#115](https://github.com/eddelbuettel/nanotime/issues/115))  </li> <li>  The <code>as.Date()</code> function is now vectorized and can take a TZ argument (Leonardo and Dirk in [#119](https://github.com/eddelbuettel/nanotime/issues/119) closing [#118](https://github.com/eddelbuettel/nanotime/issues/118))  </li> <li>  Use of internal function <code>SET_S4_OBJECT</code> has been replaced by API function <code>Rf_asS4</code> (Leonardo in [#121](https://github.com/eddelbuettel/nanotime/issues/121) closing [#120](https://github.com/eddelbuettel/nanotime/issues/120))  </li> <li>  An <code>nanoduration</code> / <code>nanoduration</code> expression now returns a double (Leonardo in [#122](https://github.com/eddelbuettel/nanotime/issues/122) closing [#117](https://github.com/eddelbuettel/nanotime/issues/117))  </li> <li>  Bitfield calculations no longer require an Windows-only compiler switch (Leonardo in [#124](https://github.com/eddelbuettel/nanotime/issues/124))  </li> <li>  A simple manual page format nag involving has been addressed (Dirk in [#126](https://github.com/eddelbuettel/nanotime/issues/126) fixing [#125](https://github.com/eddelbuettel/nanotime/issues/125))  </li> <li>  An set of tests tickling an UBSAN issue via Rcpp code no longer run unless <code>CI</code> is set (Dirk in [#127](https://github.com/eddelbuettel/nanotime/issues/127) fixing [#123](https://github.com/eddelbuettel/nanotime/issues/123))  </li> </ul>"},{"location":"NEWS/#changes-in-version-037-2022-10-23","title":"Changes in version 0.3.7 (2022-10-23)","text":"<ul> <li>  Update mkdocs for material docs generator (Dirk in [#102](https://github.com/eddelbuettel/nanotime/issues/102))  </li> <li>  Use <code>inherits()</code> instead comparing to <code>class()</code> (Trevor Davis in [#104](https://github.com/eddelbuettel/nanotime/issues/104))  </li> <li>  Set default arguments in <code>nanoduration()</code> (Trevor Davis in [#105](https://github.com/eddelbuettel/nanotime/issues/105))  </li> <li>  Add <code>as.nanoduration.difftime()</code> support (Trevor Davis in [#106](https://github.com/eddelbuettel/nanotime/issues/106))  </li> <li>  Add +/- methods for <code>nanotime</code> and <code>difftime</code> objects (Trevor Davis in [#110](https://github.com/eddelbuettel/nanotime/issues/110) closing [#108](https://github.com/eddelbuettel/nanotime/issues/108), [#107](https://github.com/eddelbuettel/nanotime/issues/107))  </li> </ul>"},{"location":"NEWS/#changes-in-version-036-2022-03-06","title":"Changes in version 0.3.6 (2022-03-06)","text":"<ul> <li>  Fix incorrect subsetting with operator <code>%in%</code> (Leonardo in [#100](https://github.com/eddelbuettel/nanotime/issues/100) fixing [#99](https://github.com/eddelbuettel/nanotime/issues/99)).  </li> <li>  Fix incorrect parsing for negative nanoperiod (Leonardo in [#100](https://github.com/eddelbuettel/nanotime/issues/100) fixing [#96](https://github.com/eddelbuettel/nanotime/issues/96)).  </li> <li>  Test for <code>class</code> via <code>inherits()</code> (Dirk).  </li> </ul>"},{"location":"NEWS/#changes-in-version-035-2021-12-14","title":"Changes in version 0.3.5 (2021-12-14)","text":"<ul> <li>  Applied patch by Tomas Kalibera for Windows UCRT under the upcoming R 4.2.0 expected for April.  </li> </ul>"},{"location":"NEWS/#changes-in-version-034-2021-11-24","title":"Changes in version 0.3.4 (2021-11-24)","text":"<ul> <li>  Added a few more <code>as.character</code> conversion function (Dirk)  </li> <li>  Expose <code>nanoperiod</code> functionality via header file for use by other packages (Leonardo in [#95](https://github.com/eddelbuettel/nanotime/issues/95) fixing [#94](https://github.com/eddelbuettel/nanotime/issues/94)).  </li> </ul>"},{"location":"NEWS/#changes-in-version-033-2021-08-09","title":"Changes in version 0.3.3 (2021-08-09)","text":"<ul> <li>  New demo <code>ggplot2Example.R</code> (Leonardo and Dirk).  </li> <li>  New documentation website using mkdocs-material (Dirk).  </li> <li>  Updated unit test to account for r-devel POSIXct changes, and re-enable full testing under r-devel (Dirk).  </li> <li>  Additional <code>nanoduration</code> and <code>character</code> ops plus tests (Colin Umansky in [#88](https://github.com/eddelbuettel/nanotime/issues/88) addressing [#87](https://github.com/eddelbuettel/nanotime/issues/87)).  </li> <li>  New <code>plus</code> and <code>minus</code> functions for periods (Leonardo in [#91](https://github.com/eddelbuettel/nanotime/issues/91)).  </li> </ul>"},{"location":"NEWS/#changes-in-version-032-2020-09-03","title":"Changes in version 0.3.2 (2020-09-03)","text":"<ul> <li>  Correct for big endian (Elliott Sales de Andrade in [#81](https://github.com/eddelbuettel/nanotime/issues/81)).  </li> <li>  Use the <code>RcppCCTZ_API.h</code> header (Dirk in [#82](https://github.com/eddelbuettel/nanotime/issues/82)).  </li> <li>  Conditionally reduce test coverage (Dirk in [#83](https://github.com/eddelbuettel/nanotime/issues/83)).  </li> </ul>"},{"location":"NEWS/#changes-in-version-031-2020-08-09","title":"Changes in version 0.3.1 (2020-08-09)","text":"<ul> <li>  Several small cleanups to ensure a more robust compilation (Leonardo and Dirk in [#75](https://github.com/eddelbuettel/nanotime/issues/75) fixing [#74](https://github.com/eddelbuettel/nanotime/issues/74)).  </li> <li>  Show Solaris some extra love by skipping tests and examples with a timezone (Dirk in [#76](https://github.com/eddelbuettel/nanotime/issues/76)).  </li> </ul>"},{"location":"NEWS/#changes-in-version-030-2020-08-06","title":"Changes in version 0.3.0 (2020-08-06)","text":"<ul> <li>  Use <code>tzstr=</code> instead of <code>tz=</code> in call to RcppCCTZ::parseDouble()) (Matt Dowle in [#49](https://github.com/eddelbuettel/nanotime/issues/49)).  </li> <li>  Add new comparison operators for <code>nanotime</code> and <code>charcters</code> (Dirk in [#54](https://github.com/eddelbuettel/nanotime/issues/54) fixing [#52](https://github.com/eddelbuettel/nanotime/issues/52)).  </li> <li>  Switch from RUnit to tinytest (Dirk in [#55](https://github.com/eddelbuettel/nanotime/issues/55))  </li> <li>  Substantial functionality extension in with new types <code>nanoduration</code>, <code>nanoival</code> and <code>nanoperiod</code> (Leonardo in [#58](https://github.com/eddelbuettel/nanotime/issues/58), [#60](https://github.com/eddelbuettel/nanotime/issues/60), [#62](https://github.com/eddelbuettel/nanotime/issues/62), [#63](https://github.com/eddelbuettel/nanotime/issues/63), [#65](https://github.com/eddelbuettel/nanotime/issues/65), [#67](https://github.com/eddelbuettel/nanotime/issues/67), [#70](https://github.com/eddelbuettel/nanotime/issues/70) fixing [#47](https://github.com/eddelbuettel/nanotime/issues/47), [#51](https://github.com/eddelbuettel/nanotime/issues/51), [#57](https://github.com/eddelbuettel/nanotime/issues/57), [#61](https://github.com/eddelbuettel/nanotime/issues/61), [#64](https://github.com/eddelbuettel/nanotime/issues/64) with assistance from Dirk).  </li> <li>  A new (yet still draft-ish) vignette was added describing the four core types (Leonardo and Dirk in [#71](https://github.com/eddelbuettel/nanotime/issues/71)).  </li> <li>  A required compilation flag for Windows was added (Leonardo in [#72](https://github.com/eddelbuettel/nanotime/issues/72)).  </li> <li> RcppCCTZ function are called in new \u2018non-throwing\u2019 variants to not trigger exeception errors (Leonardo in [#73](https://github.com/eddelbuettel/nanotime/issues/73)).  </li> </ul>"},{"location":"NEWS/#changes-in-version-024-2019-05-25","title":"Changes in version 0.2.4 (2019-05-25)","text":"<ul> <li>  Define \\[\\[ method (Dirk in [#45](https://github.com/eddelbuettel/nanotime/issues/45) fixing [#44](https://github.com/eddelbuettel/nanotime/issues/44)).  </li> </ul>"},{"location":"NEWS/#changes-in-version-023-2018-09-30","title":"Changes in version 0.2.3 (2018-09-30)","text":"<ul> <li>  Skip some tests on Solaris which seems borked with timezones. As we have no real access, no real fix possible (Dirk in [#42](https://github.com/eddelbuettel/nanotime/issues/42)).  </li> <li>  Update Travis setup  </li> </ul>"},{"location":"NEWS/#changes-in-version-022-2018-07-18","title":"Changes in version 0.2.2 (2018-07-18)","text":"<ul> <li>  Unit tests depending on future xts behaviour remain disabled (Dirk in [#41](https://github.com/eddelbuettel/nanotime/issues/41)).  </li> </ul>"},{"location":"NEWS/#changes-in-version-021-2018-07-01","title":"Changes in version 0.2.1 (2018-07-01)","text":"<ul> <li>  Added attribute-preserving comparison (Leonardo in [#33](https://github.com/eddelbuettel/nanotime/issues/33)).  </li> <li>  Added two <code>integer64</code> casts in constructors (Dirk in [#36](https://github.com/eddelbuettel/nanotime/issues/36)).  </li> <li>  Added two checks for empty arguments (Dirk in [#37](https://github.com/eddelbuettel/nanotime/issues/37)).  </li> </ul>"},{"location":"NEWS/#changes-in-version-020-2017-06-22","title":"Changes in version 0.2.0 (2017-06-22)","text":"<ul> <li>  Rewritten in S4 to provide more robust operations ([#17](https://github.com/eddelbuettel/nanotime/issues/17) by Leonardo)  </li> <li>  Ensure <code>tz=\u201c\u201c</code> is treated as unset (Leonardo in [#20](https://github.com/eddelbuettel/nanotime/issues/20))  </li> <li>  Added <code>format</code> and <code>tz</code> arguments to <code>nanotime</code>, <code>format</code>, <code>print</code> ([#22](https://github.com/eddelbuettel/nanotime/issues/22) by Leonardo and Dirk)  </li> <li>  Ensure printing respect <code>options()$max.print</code>, ensure names are kept with vector ([#23](https://github.com/eddelbuettel/nanotime/issues/23) by Leonardo)  </li> <li>  Correct <code>summary()</code> by defining <code>names\\&lt;-</code> (Leonardo in [#25](https://github.com/eddelbuettel/nanotime/issues/25) fixing [#24](https://github.com/eddelbuettel/nanotime/issues/24))  </li> <li>  Report error on operations that are meaningful for type; handled NA, NaN, Inf, -Inf correctly (Leonardo in [#27](https://github.com/eddelbuettel/nanotime/issues/27) fixing [#26](https://github.com/eddelbuettel/nanotime/issues/26))  </li> </ul>"},{"location":"NEWS/#changes-in-version-012-2017-03-27","title":"Changes in version 0.1.2 (2017-03-27)","text":"<ul> <li>  The <code>as.integer64</code> function is now exported as well.  </li> </ul>"},{"location":"NEWS/#changes-in-version-011-2017-02-04","title":"Changes in version 0.1.1 (2017-02-04)","text":"<ul> <li>  The default display format now always shows nine digits ([#10](https://github.com/eddelbuettel/nanotime/issues/10) closing [#9](https://github.com/eddelbuettel/nanotime/issues/9))  </li> <li>  The default print method was updated to use formated output, and a new new converter <code>as.integer64</code> was added  </li> <li>  Several \u2018Ops\u2019 method are now explicitly defined allowing casting of results (rather than falling back on bit64 behaviour)  </li> <li>  The format routine is now more careful about not loosing precision ([#13](https://github.com/eddelbuettel/nanotime/issues/13) closing [#12](https://github.com/eddelbuettel/nanotime/issues/12))  </li> </ul>"},{"location":"NEWS/#changes-in-version-010-2017-01-10","title":"Changes in version 0.1.0 (2017-01-10)","text":"<ul> <li>  Added Windows support thanks to expanded RcppCCTZ (closes [#6](https://github.com/eddelbuettel/nanotime/issues/6))  </li> <li>  Added \"mocked up\" demo with nanosecond delay networking analysis  </li> <li>  Added \u2018fmt\u2019 and \u2018tz\u2019 options to output functions, expanded <code>format.nanotime</code> (closing [#2](https://github.com/eddelbuettel/nanotime/issues/2) and [#3](https://github.com/eddelbuettel/nanotime/issues/3))  </li> <li>  Added data.frame support  </li> <li>  Expanded tests  </li> </ul>"},{"location":"NEWS/#changes-in-version-001-2016-12-15","title":"Changes in version 0.0.1 (2016-12-15)","text":"<ul> <li>  Initial CRAN upload.  </li> <li>  Package is functional and provides examples.  </li> </ul>"},{"location":"man/all.equal.nanoduration/","title":"Test if Two Objects are (Nearly) Equal","text":"<p>Source code</p>"},{"location":"man/all.equal.nanoduration/#description","title":"Description","text":"<p>Compare <code>target</code> and <code>current</code> testing \u2018near equality\u2019. If they are different, comparison is still made to some extent, and a report of the differences is returned. Do not use <code>all.equal</code> directly in <code>if</code> expressions\u2014either use <code>isTRUE(all.equal(\u2026.))</code> or <code>identical</code> if appropriate.</p>"},{"location":"man/all.equal.nanoduration/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'nanoduration'\nall.equal(\n  target,\n  current,\n  tolerance = sqrt(.Machine\\$double.eps),\n  scale = NULL,\n  countEQ = FALSE,\n  formatFUN = function(err, what) format(err),\n  ...,\n  check.attributes = TRUE\n)\n\n# S4 method for signature 'nanoduration'\nall.equal(\n  target,\n  current,\n  tolerance = sqrt(.Machine\\$double.eps),\n  scale = NULL,\n  countEQ = FALSE,\n  formatFUN = function(err, what) format(err),\n  ...,\n  check.attributes = TRUE\n)\n</code></pre>"},{"location":"man/all.equal.nanoduration/#arguments","title":"Arguments","text":"<code>target</code>, <code>current</code> <code>nanoduration</code> arguments to be compared  <code>tolerance</code>  numeric \\&gt;= 0. Differences smaller than <code>tolerance</code> are not reported. The default value is close to <code>1.5e-8</code>.  <code>scale</code> <code>NULL</code> or numeric \\&gt; 0, typically of length 1 or <code>length(target)</code>. See \u2018Details\u2019.  <code>countEQ</code>  logical indicating if the <code>target == current</code> cases should be counted when computing the mean (absolute or relative) differences. The default, <code>FALSE</code> may seem misleading in cases where <code>target</code> and <code>current</code> only differ in a few places; see the extensive example.  <code>formatFUN</code>  a <code>function</code> of two arguments, <code>err</code>, the relative, absolute or scaled error, and <code>what</code>, a character string indicating the *kind* of error; maybe used, e.g., to format relative and absolute errors differently.  <code>\u2026</code>  further arguments for different methods  <code>check.attributes</code>  logical indicating if the <code>attributes</code> of <code>target</code> and <code>current</code> (other than the names) should be compared."},{"location":"man/all.equal.nanoduration/#see-also","title":"See Also","text":"<p><code>identical</code>, <code>isTRUE</code>, <code>==</code>, and <code>all</code> for exact equality testing.</p>"},{"location":"man/all.equal.nanoival/","title":"Test if Two Objects are (Nearly) Equal","text":"<p>Source code</p>"},{"location":"man/all.equal.nanoival/#description","title":"Description","text":"<p>Compare <code>target</code> and <code>current</code> testing \u2018near equality\u2019. If they are different, comparison is still made to some extent, and a report of the differences is returned. Do not use <code>all.equal</code> directly in <code>if</code> expressions\u2014either use <code>isTRUE(all.equal(\u2026.))</code> or <code>identical</code> if appropriate.</p>"},{"location":"man/all.equal.nanoival/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'nanoival'\nall.equal(target, current, ..., check.attributes = TRUE)\n\n# S4 method for signature 'nanoival'\nall.equal(target, current, ..., check.attributes = TRUE)\n</code></pre>"},{"location":"man/all.equal.nanoival/#arguments","title":"Arguments","text":"<code>target</code>, <code>current</code> <code>nanoival</code> arguments to be compared  <code>\u2026</code>  further arguments for different methods  <code>check.attributes</code>  logical indicating if the <code>attributes</code> of <code>target</code> and <code>current</code> (other than the names) should be compared."},{"location":"man/all.equal.nanoival/#see-also","title":"See Also","text":"<p><code>identical</code>, <code>isTRUE</code>, <code>==</code>, and <code>all</code> for exact equality testing.</p>"},{"location":"man/all.equal.nanoperiod/","title":"Test if Two Objects are (Nearly) Equal","text":"<p>Source code</p>"},{"location":"man/all.equal.nanoperiod/#description","title":"Description","text":"<p>Compare <code>target</code> and <code>current</code> testing \u2018near equality\u2019. If they are different, comparison is still made to some extent, and a report of the differences is returned. Do not use <code>all.equal</code> directly in <code>if</code> expressions\u2014either use <code>isTRUE(all.equal(\u2026.))</code> or <code>identical</code> if appropriate.</p>"},{"location":"man/all.equal.nanoperiod/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'nanoperiod'\nall.equal(target, current, ..., check.attributes = TRUE)\n\n# S4 method for signature 'nanoperiod'\nall.equal(target, current, ..., check.attributes = TRUE)\n</code></pre>"},{"location":"man/all.equal.nanoperiod/#arguments","title":"Arguments","text":"<code>target</code>, <code>current</code> <code>nanoperiod</code> arguments to be compared  <code>\u2026</code>  further arguments for different methods  <code>check.attributes</code>  logical indicating if the <code>attributes</code> of <code>target</code> and <code>current</code> (other than the names) should be compared."},{"location":"man/all.equal.nanoperiod/#see-also","title":"See Also","text":"<p><code>identical</code>, <code>isTRUE</code>, <code>==</code>, and <code>all</code> for exact equality testing.</p>"},{"location":"man/all.equal.nanotime/","title":"Test if Two Objects are (Nearly) Equal","text":"<p>Source code</p>"},{"location":"man/all.equal.nanotime/#description","title":"Description","text":"<p>Compare <code>target</code> and <code>current</code> testing \u2018near equality\u2019. If they are different, comparison is still made to some extent, and a report of the differences is returned. Do not use <code>all.equal</code> directly in <code>if</code> expressions\u2014either use <code>isTRUE(all.equal(\u2026.))</code> or <code>identical</code> if appropriate.</p>"},{"location":"man/all.equal.nanotime/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'nanotime'\nall.equal(\n  target,\n  current,\n  tolerance = sqrt(.Machine\\$double.eps),\n  scale = NULL,\n  countEQ = FALSE,\n  formatFUN = function(err, what) format(err),\n  ...,\n  check.attributes = TRUE\n)\n\n# S4 method for signature 'nanotime'\nall.equal(\n  target,\n  current,\n  tolerance = sqrt(.Machine\\$double.eps),\n  scale = NULL,\n  countEQ = FALSE,\n  formatFUN = function(err, what) format(err),\n  ...,\n  check.attributes = TRUE\n)\n</code></pre>"},{"location":"man/all.equal.nanotime/#arguments","title":"Arguments","text":"<code>target</code>, <code>current</code> <code>nanotime</code> arguments to be compared  <code>tolerance</code>  numeric \\&gt;= 0. Differences smaller than <code>tolerance</code> are not reported. The default value is close to <code>1.5e-8</code>.  <code>scale</code> <code>NULL</code> or numeric \\&gt; 0, typically of length 1 or <code>length(target)</code>. See \u2018Details\u2019.  <code>countEQ</code>  logical indicating if the <code>target == current</code> cases should be counted when computing the mean (absolute or relative) differences. The default, <code>FALSE</code> may seem misleading in cases where <code>target</code> and <code>current</code> only differ in a few places; see the extensive example.  <code>formatFUN</code>  a <code>function</code> of two arguments, <code>err</code>, the relative, absolute or scaled error, and <code>what</code>, a character string indicating the *kind* of error; maybe used, e.g., to format relative and absolute errors differently.  <code>\u2026</code>  further arguments for different methods  <code>check.attributes</code>  logical indicating if the <code>attributes</code> of <code>target</code> and <code>current</code> (other than the names) should be compared."},{"location":"man/all.equal.nanotime/#see-also","title":"See Also","text":"<p><code>identical</code>, <code>isTRUE</code>, <code>==</code>, and <code>all</code> for exact equality testing.</p>"},{"location":"man/is.unsorted-nanoival-method/","title":"Test if a <code>nanoival</code> vector is Not Sorted","text":""},{"location":"man/is.unsorted-nanoival-method/#description","title":"Description","text":"<p>Test if an object is not sorted (in increasing order), without the cost of sorting it.</p>"},{"location":"man/is.unsorted-nanoival-method/#usage","title":"Usage","text":"<pre><code>## S4 method for signature 'nanoival'\nis.unsorted(x, na.rm = FALSE, strictly = FALSE)\n</code></pre>"},{"location":"man/is.unsorted-nanoival-method/#arguments","title":"Arguments","text":"<code>x</code>  a <code>nanoival</code> vector  <code>na.rm</code>  logical. Should missing values be removed before checking?  <code>strictly</code>  logical indicating if the check should be for *strictly* increasing values."},{"location":"man/is.unsorted-nanoival-method/#see-also","title":"See Also","text":"<p><code>sort</code></p>"},{"location":"man/nano_year/","title":"Get a component of a date time","text":"<p>Source code</p>"},{"location":"man/nano_year/#description","title":"Description","text":"<p>Get a component of a date time. <code>nano_wday</code> returns the numeric position in a week, with Sunday == 0. <code>nano_mday</code> returns the numeric day (i.e.\u00a0a value from 1 to 31). <code>nano_month</code> returns the month (i.e.\u00a0a value from 1 to 12). <code>nano_year</code> returns the year.</p>"},{"location":"man/nano_year/#usage","title":"Usage","text":"<pre><code>nano_wday(x, tz)\n\nnano_mday(x, tz)\n\nnano_month(x, tz)\n\nnano_year(x, tz)\n</code></pre>"},{"location":"man/nano_year/#arguments","title":"Arguments","text":"<code>x</code>  a <code>nanotime</code> object  <code>tz</code> <code>character</code> a string representing a timezone"},{"location":"man/nano_year/#details","title":"Details","text":"<p>Note that the <code>tz</code> parameter is mandatory because the day boundary is different depending on the time zone and <code>nanotime</code> does not store the timezone as it is just an offset in nanoseconds from the epoch.</p>"},{"location":"man/nano_year/#examples","title":"Examples","text":"<pre><code>library(\"nanotime\")\n\nnano_wday(as.nanotime(\"2020-03-14 23:32:00-04:00\"), \"America/New_York\")\nnano_wday(as.nanotime(\"2020-03-14 23:32:00 America/New_York\"), \"Europe/Paris\")\nnano_mday(as.nanotime(\"2020-03-14 23:32:00-04:00\"), \"America/New_York\")\nnano_mday(as.nanotime(\"2020-03-14 23:32:00 America/New_York\"), \"Europe/Paris\")\nnano_month(as.nanotime(\"2020-12-31 23:32:00-04:00\"), \"America/New_York\")\nnano_month(as.nanotime(\"2020-12-31 23:32:00 America/New_York\"), \"Europe/Paris\")\nnano_year(as.nanotime(\"2020-12-31 23:32:00-04:00\"), \"America/New_York\")\nnano_year(as.nanotime(\"2020-12-31 23:32:00 America/New_York\"), \"Europe/Paris\")\n</code></pre>"},{"location":"man/nanoduration/","title":"Duration type with nanosecond precision","text":"<p>Source code</p>"},{"location":"man/nanoduration/#description","title":"Description","text":"<p>The type <code>nanoduration</code> is a length of time (implemented as an S4 class) with nanosecond precision. It is a count of nanoseconds and may be negative. The expected arithmetic operations are provided, including sequence generation.</p>"},{"location":"man/nanoduration/#usage","title":"Usage","text":"<pre><code>nanoduration(hours = 0L, minutes = 0L, seconds = 0L, nanoseconds = 0L)\n\n# S4 method for signature 'character'\nas.nanoduration(x)\n\n# S4 method for signature 'integer64'\nas.nanoduration(x)\n\n# S4 method for signature 'numeric'\nas.nanoduration(x)\n\n# S4 method for signature 'integer'\nas.nanoduration(x)\n\n# S4 method for signature 'difftime'\nas.nanoduration(x)\n\n# S4 method for signature ''NULL''\nas.nanoduration(x)\n\n# S4 method for signature 'missing'\nas.nanoduration(x)\n\n# S4 method for signature 'nanoduration'\nshow(object)\n\n# S4 method for signature 'nanoduration'\nprint(x, quote = FALSE, ...)\n\n# S3 method for class 'nanoduration'\nformat(x, ...)\n\n# S3 method for class 'nanoduration'\nas.integer64(x, ...)\n\n# S4 method for signature 'nanoduration'\nas.character(x)\n\n# S4 method for signature 'nanoduration'\nis.na(x)\n\n# S4 method for signature 'nanoduration,nanoduration'\ne1 - e2\n\n# S4 method for signature 'nanoduration,integer64'\ne1 - e2\n\n# S4 method for signature 'nanoduration,integer'\ne1 - e2\n\n# S4 method for signature 'nanoduration,numeric'\ne1 - e2\n\n# S4 method for signature 'nanoduration,difftime'\ne1 - e2\n\n# S4 method for signature 'nanoduration,ANY'\ne1 - e2\n\n# S4 method for signature 'nanotime,nanoduration'\ne1 - e2\n\n# S4 method for signature 'nanotime,difftime'\ne1 - e2\n\n# S4 method for signature 'integer64,nanoduration'\ne1 - e2\n\n# S4 method for signature 'integer,nanoduration'\ne1 - e2\n\n# S4 method for signature 'numeric,nanoduration'\ne1 - e2\n\n# S4 method for signature 'difftime,nanoduration'\ne1 - e2\n\n# S4 method for signature 'ANY,nanoduration'\ne1 - e2\n\n# S4 method for signature 'nanoduration,ANY'\ne1 + e2\n\n# S4 method for signature 'nanoduration,nanoduration'\ne1 + e2\n\n# S4 method for signature 'nanoduration,integer64'\ne1 + e2\n\n# S4 method for signature 'nanoduration,numeric'\ne1 + e2\n\n# S4 method for signature 'nanoduration,difftime'\ne1 + e2\n\n# S4 method for signature 'nanotime,nanoduration'\ne1 + e2\n\n# S4 method for signature 'nanotime,difftime'\ne1 + e2\n\n# S4 method for signature 'nanoduration,nanotime'\ne1 + e2\n\n# S4 method for signature 'difftime,nanotime'\ne1 + e2\n\n# S4 method for signature 'nanoival,nanoduration'\ne1 + e2\n\n# S4 method for signature 'nanoival,nanoduration'\ne1 - e2\n\n# S4 method for signature 'nanoduration,nanoival'\ne1 + e2\n\n# S4 method for signature 'nanoival,difftime'\ne1 + e2\n\n# S4 method for signature 'nanoival,difftime'\ne1 - e2\n\n# S4 method for signature 'difftime,nanoival'\ne1 + e2\n\n# S4 method for signature 'integer64,nanoduration'\ne1 + e2\n\n# S4 method for signature 'numeric,nanoduration'\ne1 + e2\n\n# S4 method for signature 'difftime,nanoduration'\ne1 + e2\n\n# S4 method for signature 'nanoduration,numeric'\ne1 * e2\n\n# S4 method for signature 'nanoduration,integer64'\ne1 * e2\n\n# S4 method for signature 'numeric,nanoduration'\ne1 * e2\n\n# S4 method for signature 'integer64,nanoduration'\ne1 * e2\n\n# S4 method for signature 'nanoduration,nanoduration'\ne1 / e2\n\n# S4 method for signature 'nanoduration,integer64'\ne1 / e2\n\n# S4 method for signature 'nanoduration,numeric'\ne1 / e2\n\n# S4 method for signature 'nanoduration,ANY'\nArith(e1, e2)\n\n# S4 method for signature 'nanoduration,character'\nCompare(e1, e2)\n\n# S4 method for signature 'character,nanoduration'\nCompare(e1, e2)\n\n# S4 method for signature 'nanoduration,ANY'\nCompare(e1, e2)\n\n# S4 method for signature 'nanoduration'\nabs(x)\n\n# S4 method for signature 'nanoduration'\nsign(x)\n\n# S4 method for signature 'nanoduration'\nsum(x, ..., na.rm = FALSE)\n\n# S4 method for signature 'nanoduration'\nmin(x, ..., na.rm = FALSE)\n\n# S4 method for signature 'nanoduration'\nmax(x, ..., na.rm = FALSE)\n\n# S4 method for signature 'nanoduration'\nrange(x, ..., na.rm = FALSE)\n\n# S4 method for signature 'nanoduration'\nx[[i, j, ..., drop = FALSE]]\n\n# S4 method for signature 'nanoduration,numeric'\nx[i, j, ..., drop = FALSE]\n\n# S4 method for signature 'nanoduration,logical'\nx[i, j, ..., drop = FALSE]\n\n# S4 method for signature 'nanoduration,character'\nx[i, j, ..., drop = FALSE]\n\n# S4 method for signature 'nanoduration,ANY'\nx[i, j, ..., drop = FALSE]\n\n# S4 replacement method for signature 'nanoduration,ANY,ANY,ANY'\nx[i, j, ...] &lt;- value\n\n# S3 method for class 'nanoduration'\nc(...)\n\nNA_nanoduration_\n</code></pre>"},{"location":"man/nanoduration/#arguments","title":"Arguments","text":"<code>hours</code>  number of hours  <code>minutes</code>  number of minutes  <code>seconds</code>  number of seconds  <code>nanoseconds</code>  number of nanoseconds  <code>x</code>  a <code>nanoduration</code> object  <code>object</code>  argument for method <code>show</code> <code>quote</code>  indicates if the output of <code>print</code> should be quoted  <code>\u2026</code>  further arguments passed to or from methods.  <code>e1</code>  Operand of class <code>nanoival</code> <code>e2</code>  Operand of class <code>nanoival</code> <code>na.rm</code>  if <code>TRUE</code> NA values are removed for the computation  <code>i</code>  index specifying elements to extract or replace.  <code>j</code>  Required for <code>\\[</code> signature but ignored here  <code>drop</code>  Required for <code>\\[</code> signature but ignored here  <code>value</code>  argument for <code>nanoduration-class</code>"},{"location":"man/nanoduration/#format","title":"Format","text":"<p>An object of class <code>nanoduration</code> of length 1.</p>"},{"location":"man/nanoduration/#details","title":"Details","text":"<p>A <code>nanoduration</code> can be constructed with the function <code>as.nanoduration</code> which can take the types <code>integer64</code>, <code>integer</code> and <code>numeric</code> (all indicating the count in nanosecond units) or the type <code>character</code>.</p> <p>It can also be constructed by specifying with individual arguments the hours, minutes, seconds and nanoseconds with a call to <code>nanoduration</code>.</p> <p>A <code>nanoduration</code> is displayed as hours, minutes, seconds and nanoseconds like this: <code>110:12:34.123_453_001</code>. The nanosecond precision displayed is adjusted as necessary, so e.g.\u00a01 second is displayed as <code>00:00:01</code>.</p>"},{"location":"man/nanoduration/#value","title":"Value","text":"<p>A nanoduration object</p>"},{"location":"man/nanoduration/#authors","title":"Author(s)","text":"<p>Dirk Eddelbuettel</p> <p>Leonardo Silvestri</p>"},{"location":"man/nanoduration/#see-also","title":"See Also","text":"<p><code>nanotime</code></p>"},{"location":"man/nanoduration/#examples","title":"Examples","text":"<pre><code>library(\"nanotime\")\n\n# constructors:\nnanoduration(hours=10, minutes=3, seconds=2, nanoseconds=999999999)\n</code></pre> <pre><code>[1] 10:03:02.999_999_999\n</code></pre> <pre><code>as.nanoduration(\"10:03:02.999_999_999\")\n</code></pre> <pre><code>[1] 10:03:02.999_999_999\n</code></pre> <pre><code>as.nanoduration(36182999999999)\n</code></pre> <pre><code>[1] 10:03:02.999_999_999\n</code></pre> <pre><code># arithmetic:\nas.nanoduration(10e9) - as.nanoduration(9e9)\n</code></pre> <pre><code>[1] 00:00:01\n</code></pre> <pre><code>as.nanoduration(10e9) + as.nanoduration(-9e9)\n</code></pre> <pre><code>[1] 00:00:01\n</code></pre> <pre><code>as.nanoduration(\"24:00:00\") / 2\n</code></pre> <pre><code>[1] 12:00:00\n</code></pre> <pre><code>as.nanoduration(\"24:00:00\") / as.nanoduration(\"12:00:00\")\n</code></pre> <pre><code>[1] 2\n</code></pre> <pre><code># comparison:\nas.nanoduration(\"10:03:02.999_999_999\") == 36182999999999\n</code></pre> <pre><code>[1] TRUE\n</code></pre> <pre><code>as.nanoduration(\"10:03:02.999_999_999\") &gt; as.nanoduration(\"10:03:02.999_999_998\")\n</code></pre> <pre><code>[1] TRUE\nattr(,\".S3Class\")\n[1] \"integer64\"\n</code></pre> <pre><code>as.nanoduration(\"10:03:02.999_999_998\") &lt; \"10:03:02.999_999_999\"\n</code></pre> <pre><code>[1] TRUE\nattr(,\".S3Class\")\n[1] \"integer64\"\n</code></pre>"},{"location":"man/nanoival/","title":"Interval type with nanosecond precision","text":"<p>Source code</p>"},{"location":"man/nanoival/#description","title":"Description","text":"<p><code>nanoival</code> is a time interval type (an S4 class) with nanosecond precision. One of its purposes is to allow quick subsetting of a <code>nanotime</code> vector. <code>nanoival</code> is composed of a <code>nanotime</code> pair which defines the start and end of the time interval. Additionally, it has a pair of logical values which determine if the start and end of the time interval are open (true) or closed (false).</p>"},{"location":"man/nanoival/#usage","title":"Usage","text":"<pre><code>nanoival(start, end, sopen = FALSE, eopen = TRUE)\n\n# S4 method for signature 'nanoival'\nnanoival.start(x)\n\n# S4 method for signature 'nanoival'\nnanoival.end(x)\n\n# S4 method for signature 'nanoival'\nnanoival.sopen(x)\n\n# S4 method for signature 'nanoival'\nnanoival.eopen(x)\n\n# S3 method for class 'nanoival'\nformat(x, ...)\n\n# S4 method for signature 'nanoival'\nprint(x, quote = FALSE, ...)\n\n# S4 method for signature 'nanoival'\nshow(object)\n\n# S4 method for signature 'character'\nas.nanoival(from, format = \"\", tz = \"\")\n\n# S4 method for signature ''NULL''\nas.nanoival(from, format = \"\", tz = \"\")\n\n# S4 method for signature 'missing'\nas.nanoival(from, format = \"\", tz = \"\")\n\n# S4 method for signature 'nanoival'\nis.na(x)\n\n# S4 replacement method for signature 'nanoival'\nis.na(x) &lt;- value\n\n# S4 method for signature 'nanoival,nanoival'\ne1 &lt; e2\n\n# S4 method for signature 'nanoival,nanoival'\ne1 &lt;= e2\n\n# S4 method for signature 'nanoival,nanoival'\ne1 &gt; e2\n\n# S4 method for signature 'nanoival,nanoival'\ne1 &gt;= e2\n\n# S4 method for signature 'nanoival,nanoival'\ne1 == e2\n\n# S4 method for signature 'nanoival,nanoival'\ne1 != e2\n\n# S4 method for signature 'nanoival,integer64'\ne1 - e2\n\n# S4 method for signature 'nanoival,numeric'\ne1 - e2\n\n# S4 method for signature 'nanoival,integer64'\ne1 + e2\n\n# S4 method for signature 'nanoival,numeric'\ne1 + e2\n\n# S4 method for signature 'integer64,nanoival'\ne1 + e2\n\n# S4 method for signature 'numeric,nanoival'\ne1 + e2\n\n# S4 method for signature 'nanoival'\nx[[i, j, ..., drop = FALSE]]\n\n# S4 method for signature 'nanoival,logical'\nx[i, j, ..., drop = FALSE]\n\n# S4 method for signature 'nanoival,numeric'\nx[i, j, ..., drop = FALSE]\n\n# S4 method for signature 'nanoival,character'\nx[i, j, ..., drop = FALSE]\n\n# S4 method for signature 'nanoival,ANY'\nx[i, j, ..., drop = FALSE]\n\n# S4 replacement method for signature 'nanoival,logical,ANY,nanoival'\nx[i, j, ...] &lt;- value\n\n# S3 method for class 'nanoival'\nc(...)\n\n# S4 method for signature 'nanoival'\nt(x)\n\n# S4 method for signature 'nanotime,nanoival'\nx[i, j, ..., drop = TRUE]\n\nNA_nanoival_\n\n# S3 method for class 'nanoival'\nas.character(x, ...)\n</code></pre>"},{"location":"man/nanoival/#arguments","title":"Arguments","text":"<code>start</code> <code>nanotime</code> start of interval  <code>end</code> <code>nanotime</code> end of interval  <code>sopen</code>  logical indicating if the start of the interval is open  <code>eopen</code>  logical indicating if the end of the interval is open  <code>x</code>, <code>from</code>  a <code>nanoival</code> object  <code>\u2026</code>  further arguments passed to or from methods.  <code>quote</code>  indicates if the output of <code>print</code> should be quoted  <code>object</code>  argument for method <code>show</code> <code>format</code>  A character string. Can also be set via <code>options(\u201cnanotimeFormat\u201d)</code> and uses \u2018%Y-%m-%dT%H:%M:%E9S%Ez\u2019 as a default and fallback  <code>tz</code> <code>character</code> indicating a timezone  <code>value</code>  argument for <code>nanoival-class</code> <code>e1</code>  Operand of class <code>nanoival</code> <code>e2</code>  Operand of class <code>nanoival</code> <code>i</code>  index specifying elements to extract or replace.  <code>j</code>  Required for <code>\\[</code> signature but ignored here  <code>drop</code>  Required for <code>\\[</code> signature but ignored here"},{"location":"man/nanoival/#format","title":"Format","text":"<p>An object of class <code>nanoival</code> of length 1.</p>"},{"location":"man/nanoival/#details","title":"Details","text":"<p>An interval object can be constructed with the constructor <code>nanoival</code> which takes as arguments two <code>nanotime</code> objects that define the start and the end of the interval, together with two <code>logical</code> arguments that define if the start and the end of the interval are open (true) or closed (false) (note that these objects can all be vector, and therefore the interval object is not necessarily scalar). Alternatively, an interval can be constructed with a <code>character</code>: the format follows that of <code>nanotime</code>; the start time is preceeded by either <code>-</code> or <code>+</code> indicating if the interval start is open (-) or closed (+); the start and end times are separated by an arrow <code>-&gt;</code>; the end is folloed by either <code>-</code> or <code>+</code> which have the same semantics as the start time.</p> <p>The most important set of methods defined for <code>interval</code> are set functions <code>intersect</code>, <code>union</code> and <code>setdiff</code>.</p> <p>Additionally, <code>interval</code> allows the subsetting into a <code>nanotime</code> vector. Note that subsetting is allowed only if the <code>nanotime</code> vector is sorted.</p> <p>Finally, accessors are provided to get the interval start (<code>start</code>), the end (<code>end</code>), the open/close status of the start (<code>sopen</code>) and the open/close status of the end (<code>eopen</code>). The former return a <code>nanotime</code> while the latter return a <code>logical</code>.</p>"},{"location":"man/nanoival/#value","title":"Value","text":"<p>A nanoival object</p>"},{"location":"man/nanoival/#output-format","title":"Output Format","text":"<p>Formatting and character conversion for <code>nanoival</code> objects is identical to <code>nanotime</code> objects. The default format is ISO3339 compliant: <code>%Y-%m-%dT%H:%M:%E9S%Ez</code>. It specifies a standard ISO 8601 part for date and time \u2014 as well as nine digits of precision for fractional seconds (down to nanoseconds) and on offset (typically zero as we default to UTC). It can be overriden by using <code>options()</code> with the key of <code>nanotimeFormat</code> and a suitable value. Similarly, <code>nanotimeTz</code> can be used to select a different timezone.</p>"},{"location":"man/nanoival/#authors","title":"Author(s)","text":"<p>Dirk Eddelbuettel</p> <p>Leonardo Silvestri</p>"},{"location":"man/nanoival/#see-also","title":"See Also","text":"<p><code>intersect.idx</code>, <code>setdiff.idx</code>,</p>"},{"location":"man/nanoival/#examples","title":"Examples","text":"<pre><code>library(\"nanotime\")\n\n# creating a \\code{nanoival}, with the start time included ('+') and the end\n# time excluded ('-')\nas.nanoival(\"+2012-03-01T21:21:00.000000001+00:00-&gt;2015-01-01T21:22:00.000000999+04:00-\")\n\n# a \\code{nanoival} can also be created with a pair of \\code{nanotime} objects, a start\n# and an end, and optionally two logicals determining if the interval start(end) are open\n# or closed; by default the start is closed and end is open:\nstart &lt;- nanotime(\"2012-03-01T21:21:00.000000001+00:00\")\nend &lt;- nanotime(\"2013-03-01T21:21:00.000000001+00:00\")\nnanoival(start, end)\n\n# a vector of 'nanotime' can be subsetted by a 'nanoival':\none_second &lt;- 1e9\na &lt;- seq(nanotime(\"2012-12-12 12:12:12+00:00\"), length.out=10, by=one_second)\nidx &lt;- c(as.nanoival(\"-2012-12-12 12:12:10+00:00 -&gt; 2012-12-12 12:12:14+00:00-\"),\n         as.nanoival(\"+2012-12-12 12:12:18+00:00 -&gt; 2012-12-12 12:12:20+00:00+\"))\na[idx]\n</code></pre>"},{"location":"man/nanoperiod/","title":"Period type with nanosecond precision","text":"<p>Source code</p>"},{"location":"man/nanoperiod/#description","title":"Description","text":"<p><code>nanoperiod</code> is a length of time type (implemented as an S4 class) with nanosecond precision. It differs from <code>nanoduration</code> because it is capable of representing calendar months and days. It can thus represent years (12 months) and weeks (7 days). A period is a somewhat abstract representation of time: it is only when anchored to a point in time and in a specific time zone that it is possible to convert it to a specific duration. This means that many of the operations involving periods need the additional argument <code>tz</code>.</p>"},{"location":"man/nanoperiod/#usage","title":"Usage","text":"<pre><code>nanoperiod(months = 0, days = 0, duration = as.nanoduration(0))\n\n# S4 method for signature 'character'\nas.nanoperiod(x)\n\n# S4 method for signature 'integer64'\nas.nanoperiod(x)\n\n# S4 method for signature 'numeric'\nas.nanoperiod(x)\n\n# S4 method for signature 'integer'\nas.nanoperiod(x)\n\n# S4 method for signature 'nanoduration'\nas.nanoperiod(x)\n\n# S4 method for signature ''NULL''\nas.nanoperiod(x)\n\n# S4 method for signature 'missing'\nas.nanoperiod(x)\n\n# S4 method for signature 'nanoperiod'\nshow(object)\n\n# S4 method for signature 'nanoperiod'\nprint(x, quote = FALSE, ...)\n\n# S3 method for class 'nanoperiod'\nformat(x, ...)\n\n# S4 method for signature 'nanoperiod'\nas.character(x)\n\n# S4 method for signature 'nanoperiod'\nis.na(x)\n\n# S4 replacement method for signature 'nanoperiod'\nis.na(x) &lt;- value\n\n# S4 method for signature 'nanoperiod'\nx[[i, j, ..., drop = FALSE]]\n\n# S4 method for signature 'nanoperiod,numeric'\nx[i, j, ..., drop = FALSE]\n\n# S4 method for signature 'nanoperiod,logical'\nx[i, j, ..., drop = FALSE]\n\n# S4 method for signature 'nanoperiod,character'\nx[i, j, ..., drop = FALSE]\n\n# S4 method for signature 'nanoperiod,ANY'\nx[i, j, ..., drop = FALSE]\n\n# S4 replacement method for signature 'nanoperiod,ANY,ANY,ANY'\nx[i, j, ...] &lt;- value\n\n# S3 method for class 'nanoperiod'\nc(...)\n\n# S4 method for signature 'nanoperiod'\nnames(x)\n\n# S4 replacement method for signature 'nanoperiod'\nnames(x) &lt;- value\n\n# S4 method for signature 'nanoperiod,ANY'\ne1 - e2\n\n# S4 method for signature 'nanoperiod,nanoperiod'\ne1 - e2\n\n# S4 method for signature 'nanoperiod,nanoduration'\ne1 - e2\n\n# S4 method for signature 'nanoperiod,integer64'\ne1 - e2\n\n# S4 method for signature 'nanoperiod,numeric'\ne1 - e2\n\n# S4 method for signature 'nanoduration,nanoperiod'\ne1 - e2\n\n# S4 method for signature 'integer64,nanoperiod'\ne1 - e2\n\n# S4 method for signature 'numeric,nanoperiod'\ne1 - e2\n\n# S4 method for signature 'nanoperiod,ANY'\ne1 + e2\n\n# S4 method for signature 'nanoperiod,nanoperiod'\ne1 + e2\n\n# S4 method for signature 'nanoperiod,nanoduration'\ne1 + e2\n\n# S4 method for signature 'nanoperiod,integer64'\ne1 + e2\n\n# S4 method for signature 'nanoperiod,nanotime'\ne1 + e2\n\n# S4 method for signature 'nanoival,nanoperiod'\ne1 + e2\n\n# S4 method for signature 'nanoperiod,nanoival'\ne1 + e2\n\n# S4 method for signature 'nanotime,nanoperiod'\ne1 + e2\n\n# S4 method for signature 'nanoperiod,numeric'\ne1 + e2\n\n# S4 method for signature 'nanoduration,nanoperiod'\ne1 + e2\n\n# S4 method for signature 'integer64,nanoperiod'\ne1 + e2\n\n# S4 method for signature 'numeric,nanoperiod'\ne1 + e2\n\n# S4 method for signature 'nanoperiod,integer64'\ne1 * e2\n\n# S4 method for signature 'nanoperiod,numeric'\ne1 * e2\n\n# S4 method for signature 'integer64,nanoperiod'\ne1 * e2\n\n# S4 method for signature 'numeric,nanoperiod'\ne1 * e2\n\n# S4 method for signature 'nanoperiod,integer64'\ne1 / e2\n\n# S4 method for signature 'nanoperiod,numeric'\ne1 / e2\n\n# S4 method for signature 'nanoperiod,nanoperiod'\ne1 == e2\n\n# S4 method for signature 'nanoperiod,nanoperiod'\ne1 != e2\n\n# S4 method for signature 'nanotime,nanoperiod,character'\nplus(e1, e2, tz)\n\n# S4 method for signature 'nanoperiod,nanotime,character'\nplus(e1, e2, tz)\n\n# S4 method for signature 'nanotime,nanoperiod,character'\nminus(e1, e2, tz)\n\n# S4 method for signature 'nanoperiod,nanotime,character'\nminus(e1, e2, tz)\n\n# S4 method for signature 'nanoival,nanoperiod,character'\nplus(e1, e2, tz)\n\n# S4 method for signature 'nanoperiod,nanoival,character'\nplus(e1, e2, tz)\n\n# S4 method for signature 'nanoival,nanoperiod,character'\nminus(e1, e2, tz)\n\nNA_nanoperiod_\n</code></pre>"},{"location":"man/nanoperiod/#arguments","title":"Arguments","text":"<code>months</code>  Used in the constructor to indicate the number of months of the <code>nanoperiod</code> <code>days</code>  Used in the constructor to indicate the number of days of the <code>nanoperiod</code> <code>duration</code>  Used in the constructor to indicate the duration component of the <code>nanoperiod</code> <code>x</code>, <code>value</code>  An object of class <code>nanoperiod</code> <code>object</code>  argument for method <code>show</code> <code>quote</code>  indicates if the output of <code>print</code> should be quoted  <code>\u2026</code>  further arguments  <code>i</code>  index specifying elements to extract or replace.  <code>j</code>  Required for <code>\\[</code> signature but ignored here  <code>drop</code>  Required for <code>\\[</code> signature but ignored here  <code>e1</code>  Operand of class <code>nanoperiod</code> <code>e2</code>  Operand of class <code>nanoperiod</code> <code>tz</code> <code>character</code> indicating a timezone"},{"location":"man/nanoperiod/#format","title":"Format","text":"<p>An object of class <code>nanoperiod</code> of length 1.</p>"},{"location":"man/nanoperiod/#constructors","title":"Constructors","text":"<p>The true constructor is</p>"},{"location":"man/nanoperiod/#output-format","title":"Output Format","text":"<p>A <code>nanoperiod</code> is displayed as months, days, and <code>nanoduration</code> like this: <code>10m2d/10:12:34.123_453_000</code>.</p>"},{"location":"man/nanoperiod/#details","title":"Details","text":"<p>Adding or subtracting <code>nanoperiod</code> and <code>nanotime</code> require a timezone as third argument. For this reason it is not possible to use the binary operator \u2018<code>+</code>\u2019. Instead the functions \u2018<code>plus</code>\u2019 and \u2018<code>minus</code>\u2019 are defined. These functions attempt to keep the same offset within a day in the specified timezone: this means for instance that adding a day when that day crosses a time zone adjustment such as a daylight saving time, results in a true time increment of less or more than 24 hours to preserve the offset. Preserving the offset works for increments that are smaller than a day too, provided the increment results in a datetime where the timezone adjustment is valid. When this is not the case, adding a \u2018nanoperiod\u2019 behaves in the same way as adding a \u2018nanoduration\u2019.</p>"},{"location":"man/nanoperiod/#authors","title":"Author(s)","text":"<p>Dirk Eddelbuettel</p> <p>Leonardo Silvestri</p>"},{"location":"man/nanoperiod/#see-also","title":"See Also","text":"<p><code>nanotime</code>, <code>nanoduration</code>, <code>nanoival</code>, <code>nanoperiod.month,nanoperiod-method</code></p>"},{"location":"man/nanoperiod/#examples","title":"Examples","text":"<pre><code>library(\"nanotime\")\n\np &lt;- nanoperiod(months=12, days=7, duration=\"01:00:00\")\nprint(p)\n\n#  when adding a \\code{nanoperiod} to a \\code{nanotime} or to a\n# \\code{nanoival}, a time zone must be specified:\ny &lt;- nanotime(\"1970-01-01T00:00:00+00:00\")\nplus(y, p, tz=\"America/Chicago\")\n</code></pre>"},{"location":"man/nanoperiod.month/","title":"Nanoperiod accessors","text":"<p>Source code</p>"},{"location":"man/nanoperiod.month/#description","title":"Description","text":"<p>These functions allow access to the components of a <code>nanoperiod</code></p>"},{"location":"man/nanoperiod.month/#usage","title":"Usage","text":"<pre><code>## S4 method for signature 'nanoperiod'\nnanoperiod.month(x)\n\n# S4 method for signature 'nanoperiod'\nnanoperiod.day(x)\n\n# S4 method for signature 'nanoperiod'\nnanoperiod.nanoduration(x)\n</code></pre>"},{"location":"man/nanoperiod.month/#arguments","title":"Arguments","text":"<code>x</code>  A <code>nanoperiod</code>"},{"location":"man/nanoperiod.month/#value","title":"Value","text":"<p><code>nanoperiod.month</code> and <code>nanoperiod.day</code> return an <code>integer64</code> whereas <code>nanoperiod.nanoduration</code> returns a <code>nanoduration</code></p>"},{"location":"man/nanoperiod.month/#authors","title":"Author(s)","text":"<p>Dirk Eddelbuettel</p> <p>Leonardo Silvestri</p>"},{"location":"man/nanoperiod.month/#see-also","title":"See Also","text":"<p><code>nanoduration</code></p>"},{"location":"man/nanoperiod.month/#examples","title":"Examples","text":"<pre><code>library(\"nanotime\")\n\np &lt;- as.nanoperiod(\"2y1m1d/12:00:00\")\nnanoperiod.month(p)\n</code></pre> <pre><code>[1] 25\n</code></pre> <pre><code>nanoperiod.day(p)\n</code></pre> <pre><code>[1] 1\n</code></pre> <pre><code>nanoperiod.nanoduration(p)\n</code></pre> <pre><code>[1] 12:00:00\n</code></pre>"},{"location":"man/nanotime/","title":"Nanosecond resolution datetime functionality","text":"<p>Source code</p>"},{"location":"man/nanotime/#description","title":"Description","text":"<p>Functions to operate on nanosecond time resolution using integer64 bit representation. Conversion functions for several standard R types are provided, and more will be added as needed.</p>"},{"location":"man/nanotime/#usage","title":"Usage","text":"<pre><code>nanotime(from, ...)\n\nas.nanotime(from, ...)\n\n# S4 method for signature 'character'\nnanotime(from, format = \"\", tz = \"\")\n\n# S4 method for signature 'character'\nas.nanotime(from, format = \"\", tz = \"\")\n\nnanotime.matrix(x)\n\n# S4 method for signature 'POSIXct'\nnanotime(from, accurate = TRUE)\n\n# S4 method for signature 'POSIXct'\nas.nanotime(from, accurate = TRUE)\n\n# S4 method for signature 'POSIXlt'\nnanotime(from)\n\n# S4 method for signature 'POSIXlt'\nas.nanotime(from)\n\n# S4 method for signature 'Date'\nnanotime(from)\n\n# S4 method for signature 'Date'\nas.nanotime(from)\n\n# S4 method for signature 'nanotime'\nprint(x, format = \"\", tz = \"\", quote = FALSE, ...)\n\n# S4 method for signature 'nanotime'\nshow(object)\n\n# S3 method for class 'nanotime'\nformat(x, format = \"\", tz = \"\", ...)\n\n# S3 method for class 'nanotime'\nindex2char(x, ...)\n\n# S3 method for class 'nanotime'\nas.POSIXct(x, tz = \"\", ...)\n\n# S3 method for class 'nanotime'\nas.POSIXlt(x, tz = \"\", ...)\n\n# S3 method for class 'nanotime'\nas.Date(x, ...)\n\n# S3 method for class 'nanotime'\nas.data.frame(x, ...)\n\n# S3 method for class 'nanotime'\nas.integer64(x, ...)\n\n# S4 method for signature 'nanotime,character'\ne1 - e2\n\n# S4 method for signature 'nanotime,nanotime'\ne1 - e2\n\n# S4 method for signature 'nanotime,integer64'\ne1 - e2\n\n# S4 method for signature 'nanotime,numeric'\ne1 - e2\n\n# S4 method for signature 'ANY,nanotime'\ne1 - e2\n\n# S4 method for signature 'nanotime,ANY'\ne1 - e2\n\n# S4 method for signature 'nanotime,ANY'\ne1 + e2\n\n# S4 method for signature 'nanotime,integer64'\ne1 + e2\n\n# S4 method for signature 'nanotime,numeric'\ne1 + e2\n\n# S4 method for signature 'ANY,nanotime'\ne1 + e2\n\n# S4 method for signature 'integer64,nanotime'\ne1 + e2\n\n# S4 method for signature 'numeric,nanotime'\ne1 + e2\n\n# S4 method for signature 'nanotime,nanotime'\ne1 + e2\n\n# S4 method for signature 'nanotime,nanotime'\nArith(e1, e2)\n\n# S4 method for signature 'nanotime,ANY'\nArith(e1, e2)\n\n# S4 method for signature 'ANY,nanotime'\nArith(e1, e2)\n\n# S4 method for signature 'nanotime,character'\nCompare(e1, e2)\n\n# S4 method for signature 'character,nanotime'\nCompare(e1, e2)\n\n# S4 method for signature 'nanotime,POSIXt'\nCompare(e1, e2)\n\n# S4 method for signature 'POSIXt,nanotime'\nCompare(e1, e2)\n\n# S4 method for signature 'nanotime,ANY'\nCompare(e1, e2)\n\n# S4 method for signature 'nanotime,ANY'\nLogic(e1, e2)\n\n# S4 method for signature 'ANY,nanotime'\nLogic(e1, e2)\n\n# S4 method for signature 'nanotime'\nMath(x)\n\n# S4 method for signature 'nanotime'\nMath2(x, digits)\n\n# S4 method for signature 'nanotime'\nSummary(x, ..., na.rm = FALSE)\n\n# S4 method for signature 'nanotime'\nmin(x, ..., na.rm = FALSE)\n\n# S4 method for signature 'nanotime'\nmax(x, ..., na.rm = FALSE)\n\n# S4 method for signature 'nanotime'\nrange(x, ..., na.rm = FALSE)\n\n# S4 method for signature 'nanotime'\nComplex(z)\n\n# S4 method for signature 'nanotime'\nx[[i, j, ..., drop = FALSE]]\n\n# S4 method for signature 'nanotime,numeric'\nx[i, j, ..., drop = FALSE]\n\n# S4 method for signature 'nanotime,logical'\nx[i, j, ..., drop = FALSE]\n\n# S4 method for signature 'nanotime,character'\nx[i, j, ..., drop = FALSE]\n\n# S4 method for signature 'nanotime,ANY'\nx[i, j, ..., drop = FALSE]\n\n# S4 replacement method for signature 'nanotime,ANY,ANY,ANY'\nx[i, j, ...] &lt;- value\n\n# S3 method for class 'nanotime'\nc(...)\n\n# S4 replacement method for signature 'nanotime'\nnames(x) &lt;- value\n\n# S4 method for signature 'nanotime'\nis.na(x)\n\nNA_nanotime_\n\n# S3 method for class 'nanotime'\nas.character(x, ...)\n\n# S3 method for class 'nanoduration'\nas.data.frame(x, ...)\n</code></pre>"},{"location":"man/nanotime/#arguments","title":"Arguments","text":"<code>\u2026</code>  further arguments passed to or from methods.  <code>format</code>  A character string. Can also be set via <code>options(\u201cnanotimeFormat\u201d)</code> and uses \u2018%Y-%m-%dT%H:%M:%E9S%Ez\u2019 as a default and fallback  <code>tz</code>  character specifying a timezone which is required for <code>as.POSIXct</code>, <code>as.POSIXlt</code> and can be specified for <code>as.nanotime</code>, <code>format</code> and <code>print</code>; it can also be set via <code>options(\u201cnanotimeTz\u201d)</code> and uses \u2018UTC\u2019 as a default and fallback  <code>x</code>, <code>from</code> <code>nanotime</code> objects  <code>accurate</code>  in the conversion from <code>POSIXct</code> to <code>nanotime</code>, indicates if one wants to preserve the maximum precision possible; the default is <code>TRUE</code>, but in most situations the loss of precision is negligible, and setting this parameter to <code>TRUE</code> will make the conversion nearly an order of magnitude faster  <code>quote</code>  indicates if the output of <code>print</code> should be quoted  <code>object</code>  argument for method <code>show</code> <code>e1</code>  Operand of class <code>nanotime</code> <code>e2</code>  Operand of class <code>nanotime</code> <code>digits</code>  Required for <code>Math2</code> signature but ignored here  <code>na.rm</code>  a logical indicating whether missing values should be removed.  <code>z</code>  Required for <code>Complex</code> signature but ignored here  <code>i</code>  index specifying elements to extract or replace.  <code>j</code>  Required for <code>\\[</code> signature but ignored here  <code>drop</code>  Required for <code>\\[</code> signature but ignored here  <code>value</code>  argument for <code>nanotime-class</code>"},{"location":"man/nanotime/#format","title":"Format","text":"<p>An object of class <code>nanotime</code> of length 1.</p>"},{"location":"man/nanotime/#details","title":"Details","text":"<p>Notice that the conversion from POSIXct explicitly sets the last three digits to zero. Nanosecond time stored in a 64-bit integer has nineteen digits precision where doubles (which are used internally for POSIXct as well) only have sixteen digits. So rather than showing three more (essentially random) digits it is constructed such that these three additional digits are zeros.</p>"},{"location":"man/nanotime/#value","title":"Value","text":"<p>A nanotime object</p>"},{"location":"man/nanotime/#caveats","title":"Caveats","text":"<p>Working with dates and times is difficult. One needs a representation of both time points and time duration. In R, think of <code>Date</code> or <code>POSIXct</code> objects for the former, and <code>difftime</code> for the later. Here we have time points <code>nanotime</code>, an interval type <code>nanoival</code> and two flavors of duration which are a simple count of nanoseconds <code>nanoduration</code> and a calendar duration that is able to track concepts such as months and days <code>nanoperiod</code>. Point in time and intervals are all based on durations relative to the epoch of January 1, 1970.</p>"},{"location":"man/nanotime/#input-and-output-format","title":"Input and Output Format","text":"<p>Formatting and character conversion for <code>nanotime</code> objects is done by functions from the RcppCCTZ package relying on code from its embedded <code>CCTZ</code> library. The default format is ISO3339 compliant: <code>%Y-%m-%dT%H:%M:%E9S%Ez</code>. It specifies a standard ISO 8601 part for date and time \u2014 as well as nine digits of precision for fractional seconds (down to nanoseconds) and on offset (typically zero as we default to UTC). It can be overriden by using <code>options()</code> with the key of <code>nanotimeFormat</code> and a suitable value. Similarly, <code>nanotimeTz</code> can be used to select a different timezone.</p> <p>For input, some slack it cut, and various shortened formats are accepted by default such as <code>2020-03-10</code> or <code>2020-03-10 18:16:00</code>, or <code>2020-03-10 18:16:00.001</code> (and the \u2018T\u2019 separator is optional.</p>"},{"location":"man/nanotime/#tz-parameter-usage-in-constructors","title":"<code>tz</code> parameter usage in constructors","text":"<p>The <code>tz</code> parameter is allowed only when constructing a <code>nanotime</code> from a <code>character</code>. This is because any <code>numeric</code>, <code>Date</code> and <code>POSIXct</code> is de facto considered an offset since the epoch. On the contrary, a <code>character</code> is considered interpretable and hence if it does not contain a timezone in its representation, it is possible to specify the <code>tz</code> argument to specify in which timezone it should be interpreted. This is useful in particular if one wants to convert a <code>Date</code> to be aligned to the beginning of the day in a specific timezone; in this case one should convert the <code>Date</code> to a <code>character</code> before calling the <code>nanotime</code> constructor with the desired timezone.</p>"},{"location":"man/nanotime/#authors","title":"Author(s)","text":"<p>Dirk Eddelbuettel</p> <p>Leonardo Silvestri</p>"},{"location":"man/nanotime/#see-also","title":"See Also","text":"<p><code>nanoival</code>, <code>nanoduration</code>, <code>nanoperiod</code>, <code>seq.nanotime</code> as well as the documentation in package RcppCCTZ.</p>"},{"location":"man/nanotime/#examples","title":"Examples","text":"<pre><code>library(\"nanotime\")\n\nx &lt;- nanotime(1)\nprint(x)\nas.nanotime(\"1970-01-01T00:00:00.000000001+00:00\")\nas.nanotime(\"2020-03-10 Europe/Berlin\")\nas.nanotime(\"2020-03-10 18:31:23.001\", tz=\"America/New_York\")\nas.nanotime(\"2020-03-10T040947190301440\", format=\"%Y-%m-%dT%H%M%S%E*f\")\nx &lt;- x + 1\nprint(x)\nformat(x)\nx &lt;- x + 10\nprint(x)\nformat(x)\nnanotime(Sys.time()) + 1:3  # three elements each 1 ns apart\nseq(x, by=as.nanoperiod(\"1d\"), length.out=5, tz=\"Asia/Tokyo\")\n</code></pre>"},{"location":"man/rep-nanoduration-method/","title":"Replicate Elements","text":""},{"location":"man/rep-nanoduration-method/#description","title":"Description","text":"<p>Replicates the values in \u2018x\u2019 similarly to the default method.</p>"},{"location":"man/rep-nanoduration-method/#usage","title":"Usage","text":"<pre><code>## S4 method for signature 'nanoduration'\nrep(x, ...)\n</code></pre>"},{"location":"man/rep-nanoduration-method/#arguments","title":"Arguments","text":"<code>x</code>  a vector of <code>nanoduration</code> <code>\u2026</code>   further arguments:  \u2018times\u2019 an integer-valued vector giving the (non-negative) number of times to repeat each element if of length \u2018length(x)\u2019, or to repeat the whole vector if of length 1. Negative or \u2018NA\u2019 values are an error. A \u2018double\u2019 vector is accepted, other inputs being coerced to an integer or double vector.  \u2018length.out\u2019 non-negative integer. The desired length of the output vector. Other inputs will be coerced to a double vector and the first element taken. Ignored if \u2018NA\u2019 or invalid.  \u2018each\u2019 non-negative integer. Each element of \u2018x\u2019 is repeated \u2018each\u2019 times. Other inputs will be coerced to an integer or double vector and the first element taken. Treated as \u20181\u2019 if \u2018NA\u2019 or invalid."},{"location":"man/rep-nanoival-method/","title":"Replicate Elements","text":""},{"location":"man/rep-nanoival-method/#description","title":"Description","text":"<p>Replicates the values in \u2018x\u2019 similarly to the default method.</p>"},{"location":"man/rep-nanoival-method/#usage","title":"Usage","text":"<pre><code>## S4 method for signature 'nanoival'\nrep(x, ...)\n</code></pre>"},{"location":"man/rep-nanoival-method/#arguments","title":"Arguments","text":"<code>x</code>  a vector of <code>nanoival</code> <code>\u2026</code>   further arguments:  \u2018times\u2019 an integer-valued vector giving the (non-negative) number of times to repeat each element if of length \u2018length(x)\u2019, or to repeat the whole vector if of length 1. Negative or \u2018NA\u2019 values are an error. A \u2018double\u2019 vector is accepted, other inputs being coerced to an integer or double vector.  \u2018length.out\u2019 non-negative integer. The desired length of the output vector. Other inputs will be coerced to a double vector and the first element taken. Ignored if \u2018NA\u2019 or invalid.  \u2018each\u2019 non-negative integer. Each element of \u2018x\u2019 is repeated \u2018each\u2019 times. Other inputs will be coerced to an integer or double vector and the first element taken. Treated as \u20181\u2019 if \u2018NA\u2019 or invalid."},{"location":"man/rep-nanoperiod-method/","title":"Replicate Elements","text":""},{"location":"man/rep-nanoperiod-method/#description","title":"Description","text":"<p>Replicates the values in \u2018x\u2019 similarly to the default method.</p>"},{"location":"man/rep-nanoperiod-method/#usage","title":"Usage","text":"<pre><code>## S4 method for signature 'nanoperiod'\nrep(x, ...)\n</code></pre>"},{"location":"man/rep-nanoperiod-method/#arguments","title":"Arguments","text":"<code>x</code>  a vector of <code>nanoperiod</code> <code>\u2026</code>   further arguments:  \u2018times\u2019 an integer-valued vector giving the (non-negative) number of times to repeat each element if of length \u2018length(x)\u2019, or to repeat the whole vector if of length 1. Negative or \u2018NA\u2019 values are an error. A \u2018double\u2019 vector is accepted, other inputs being coerced to an integer or double vector.  \u2018length.out\u2019 non-negative integer. The desired length of the output vector. Other inputs will be coerced to a double vector and the first element taken. Ignored if \u2018NA\u2019 or invalid.  \u2018each\u2019 non-negative integer. Each element of \u2018x\u2019 is repeated \u2018each\u2019 times. Other inputs will be coerced to an integer or double vector and the first element taken. Treated as \u20181\u2019 if \u2018NA\u2019 or invalid."},{"location":"man/rep-nanotime-method/","title":"Replicate Elements","text":""},{"location":"man/rep-nanotime-method/#description","title":"Description","text":"<p>Replicates the values in \u2018x\u2019 similarly to the default method.</p>"},{"location":"man/rep-nanotime-method/#usage","title":"Usage","text":"<pre><code>## S4 method for signature 'nanotime'\nrep(x, ...)\n</code></pre>"},{"location":"man/rep-nanotime-method/#arguments","title":"Arguments","text":"<code>x</code>  a vector of <code>nanotime</code> <code>\u2026</code>   further arguments:  \u2018times\u2019 an integer-valued vector giving the (non-negative) number of times to repeat each element if of length \u2018length(x)\u2019, or to repeat the whole vector if of length 1. Negative or \u2018NA\u2019 values are an error. A \u2018double\u2019 vector is accepted, other inputs being coerced to an integer or double vector.  \u2018length.out\u2019 non-negative integer. The desired length of the output vector. Other inputs will be coerced to a double vector and the first element taken. Ignored if \u2018NA\u2019 or invalid.  \u2018each\u2019 non-negative integer. Each element of \u2018x\u2019 is repeated \u2018each\u2019 times. Other inputs will be coerced to an integer or double vector and the first element taken. Treated as \u20181\u2019 if \u2018NA\u2019 or invalid."},{"location":"man/rounding/","title":"Rounding down or up a <code>nanotime</code> type","text":""},{"location":"man/rounding/#description","title":"Description","text":"<p>The functions <code>nano_floor</code> and <code>nano_ceiling</code> round down or up, respectively. Although the underlying implementation of <code>nanotime</code> has negative numbers for values before 1970-01-01 UTC, the rounding is always done backward in time for <code>nano_floor</code> and forward in time for <code>nano_ceiling</code>. The functions take a <code>nanotime</code> argument <code>x</code> which is the instance to round, together with a second argument <code>precision</code> which indicates an arbitrary precision to which the rounding should be performed. This argument can be either a <code>nanoduration</code> or or a <code>nanoperiod</code>. In the latter case, the argument <code>tz</code> must also be specified in order to give the <code>nanoperiod</code> a meaning. Finally, the <code>nanotime</code> argument <code>origin</code> can be optionally specified to fix the rounding to a specific point in time.</p>"},{"location":"man/rounding/#usage","title":"Usage","text":"<pre><code>nano_ceiling(x, precision, ...)\n\nnano_floor(x, precision, ...)\n\n# S4 method for signature 'nanotime,nanoduration'\nnano_ceiling(x, precision, origin = nanotime())\n\n# S4 method for signature 'nanotime,nanoduration'\nnano_floor(x, precision, origin = nanotime())\n\n# S4 method for signature 'nanotime,nanoperiod'\nnano_ceiling(x, precision, origin = nanotime(), tz)\n\n# S4 method for signature 'nanotime,nanoperiod'\nnano_floor(x, precision, origin = nanotime(), tz)\n</code></pre>"},{"location":"man/rounding/#arguments","title":"Arguments","text":"<code>x</code>  a <code>nanotime</code> object which must be sorted  <code>precision</code>  a <code>nanoduration</code> or <code>nanoperiod</code> object indicating the rounding precision  <code>\u2026</code>  for future additional arguments  <code>origin</code>  a <code>nanotime</code> scalar indicating the origin at which the rounding is considered  <code>tz</code>  a <code>character</code> scalar indicating the time zone in which to conduct the rounding"},{"location":"man/rounding/#details","title":"Details","text":"<p>This flexible rounding must be understood in the context of a vector. The rounding precision can then be considered as an interval that defines a grid over which the elements are either assigned to the starting value of the interval to which they belong (<code>nano_floor</code>) or the ending value of the interval to which they belong (<code>nano_ceiling</code>). This allows for a grouping of a <code>nanotime</code> vector on which a statistic may then be run. In the examples below, such a use case is shown in the context of a <code>data.table</code> object.</p> <p>If \"business\" concepts such as month or days are needed, the <code>argument</code> precision must be of type <code>period</code>. It is then mandatory to specify the timezone argument <code>tz</code> as this ensures timezone correctness of the intervals including for example for the rare hourly transitions of some countries going from a timezone with a whole hour difference with UTC to one with a fractional hour difference. In the case of a <code>period</code>, the functions align the rounding if the precision is an integer divisor of a larger quantity. For instance, if one specifies a rounding of 6 hours, a divisor of a day, the hours are aligned on days and the rounding is made to a grid at hours 0, 6, 12 and 18 in the specified timezone. If the precision is not a divisor, the grid is aligned to the nearest hour before the first element of the vector to round.</p> <p>The argument <code>origin</code> controls the reference point of the rounding, allowing arbitrary specification of the reference point of the rounding.</p>"},{"location":"man/rounding/#examples","title":"Examples","text":"<pre><code>library(\"nanotime\")\n\n# \"classic\" rounding:\nnano_floor(as.nanotime(\"2010-10-10 11:12:15 UTC\"), as.nanoduration(\"01:00:00\"))\n# rounding with arbitrary precision:\nnano_floor(as.nanotime(\"2010-10-10 11:12:15 UTC\"), as.nanoduration(\"06:00:00\"))\nnano_floor(as.nanotime(\"2010-10-10 11:23:15 UTC\"), as.nanoduration(\"00:15:00\"))\nnano_ceiling(as.nanotime(\"2010-10-10 11:23:15 UTC\"), as.nanoduration(\"01:15:23\"))\n# controlling the reference point via the 'origin' argument:\nnano_ceiling(as.nanotime(\"2010-10-10 11:23:15 UTC\"),\n             as.nanoduration(\"01:15:23\"),\n             origin=as.nanotime(\"2010-10-10 11:23:15 UTC\"))\n# using business concepts and rounding across a daylight saving change:\nv &lt;- seq(as.nanotime(\"2020-03-08 America/New_York\"),\n         by=as.nanoperiod(\"06:00:00\"), length.out=8, tz=\"America/New_York\")\nprint(nano_floor(v, as.nanoperiod(\"1d\"), tz=\"America/New_York\"), tz=\"America/New_York\")\n# using the concept in a 'data.table':\nlibrary(data.table)\nn &lt;- 3 * 24\nidx &lt;- seq(as.nanotime(\"2020-03-07 America/New_York\"),\n           by=as.nanoperiod(\"01:00:00\"), length.out=n, tz=\"America/New_York\")\ndt &lt;- data.table(idx, a=1:n, b=2:(n+1))\ndt_mean &lt;- dt[, list(mean = mean(a)),\n              by=nano_ceiling(idx, as.nanoperiod(\"1d\"), tz=\"America/New_York\")]\n</code></pre>"},{"location":"man/seq-nanoival-method/","title":"Sequence Generation","text":""},{"location":"man/seq-nanoival-method/#description","title":"Description","text":"<p>Generate a sequence of <code>nanoival</code></p>"},{"location":"man/seq-nanoival-method/#usage","title":"Usage","text":"<pre><code>## S4 method for signature 'nanoival'\nseq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...)\n</code></pre>"},{"location":"man/seq-nanoival-method/#arguments","title":"Arguments","text":"<code>from</code>, <code>to</code>  the starting and (maximal) end values of the sequence  <code>by</code> <code>nanoduration</code> or <code>nanoperiod</code> increment of the sequence; note that if the class is <code>nanoperiod</code> the additional argument <code>tz</code> must be speficied and is of <code>character</code> type indicating a timezone  <code>length.out</code>  an integer desired length of the sequence  <code>along.with</code>  take the length from the length of this argument.  <code>\u2026</code>  arguments passed to or from methods; the only interesting additional argument is <code>tz</code> where the <code>to</code> argument is of type <code>nanoperiod</code>"},{"location":"man/seq-nanoival-method/#examples","title":"Examples","text":"<pre><code>library(\"nanotime\")\n\nfrom &lt;- as.nanoival(\"-2018-01-14T13:00:00+00:00 -&gt; 2018-01-14T15:00:00+00:00+\")\nseq(from, by=as.nanoperiod(\"1m\"), length.out=5, tz=\"America/New_York\")\n</code></pre>"},{"location":"man/seq.nanoduration/","title":"Sequence Generation","text":"<p>Source code</p>"},{"location":"man/seq.nanoduration/#description","title":"Description","text":"<p>Generate a sequence of <code>nanoduration</code></p>"},{"location":"man/seq.nanoduration/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'nanoduration'\nseq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...)\n</code></pre>"},{"location":"man/seq.nanoduration/#arguments","title":"Arguments","text":"<code>from</code>, <code>to</code>  the starting and (maximal) end values of the sequence  <code>by</code>  the increment of the sequence  <code>length.out</code>  integer indicating the desired length of the sequence  <code>along.with</code>  take the length from the length of this argument.  <code>\u2026</code>  arguments passed to or from methods"},{"location":"man/seq.nanoduration/#examples","title":"Examples","text":"<pre><code>library(\"nanotime\")\n\nseq(from=as.nanoduration(0), by=as.nanoduration(\"01:00:00\"), length.out=10)\n</code></pre> <pre><code> [1] 00:00:00 01:00:00 02:00:00 03:00:00 04:00:00 05:00:00 06:00:00 07:00:00\n [9] 08:00:00 09:00:00\n</code></pre>"},{"location":"man/seq.nanotime/","title":"Sequence Generation","text":"<p>Source code</p>"},{"location":"man/seq.nanotime/#description","title":"Description","text":"<p>Generate a sequence of <code>nanotime</code></p>"},{"location":"man/seq.nanotime/#usage","title":"Usage","text":"<pre><code>## S3 method for class 'nanotime'\nseq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...)\n\n# S4 method for signature 'nanotime'\nseq(from, to = NULL, by = NULL, length.out = NULL, along.with = NULL, ...)\n</code></pre>"},{"location":"man/seq.nanotime/#arguments","title":"Arguments","text":"<code>from</code>, <code>to</code>  the starting and (maximal) end values of the sequence  <code>by</code> <code>nanoduration</code> or <code>nanoperiod</code> increment of the sequence; note that if the class is <code>nanoperiod</code> the additional argument <code>tz</code> must be speficied and is of <code>character</code> type indicating a timezone  <code>length.out</code>  integer indicating the desired length of the sequence  <code>along.with</code>  take the length from the length of this argument.  <code>\u2026</code>  arguments passed to or from methods; the only interesting additional argument is <code>tz</code> where the <code>to</code> argument is of type <code>nanoperiod</code>"},{"location":"man/seq.nanotime/#examples","title":"Examples","text":"<pre><code>library(\"nanotime\")\n\nfrom &lt;- as.nanotime(\"2018-01-14T12:44:00+00:00\")\nto   &lt;- as.nanotime(\"2019-01-14T12:44:00+00:00\")\nseq(from, to, by=as.nanoperiod(\"1m\"), tz=\"America/New_York\")\nseq(from, by=as.nanoperiod(\"1y\"), length.out=4, tz=\"Europe/London\")\n</code></pre>"},{"location":"man/set_operations/","title":"Set operations","text":""},{"location":"man/set_operations/#description","title":"Description","text":"<p>Performs set intersection, union and difference between vectors of temporal types from the <code>nanotime</code> package.</p>"},{"location":"man/set_operations/#usage","title":"Usage","text":"<pre><code>## S4 method for signature 'nanoival,nanoival'\nintersect(x, y)\n\n# S4 method for signature 'nanoival,nanoival'\nunion(x, y)\n\n# S4 method for signature 'nanoival,nanoival'\nsetdiff(x, y)\n\n# S4 method for signature 'nanotime,nanoival'\nintersect.idx(x, y)\n\n# S3 method for class 'nanotime'\nx %in% table\n\n# S4 method for signature 'nanotime,nanoival'\nx %in% table\n\n# S4 method for signature 'nanotime,nanoival'\nintersect(x, y)\n\n# S4 method for signature 'nanotime,nanoival'\nsetdiff(x, y)\n\n# S4 method for signature 'nanotime,nanoival'\nsetdiff.idx(x, y)\n\n# S4 method for signature 'nanotime,nanotime'\nintersect(x, y)\n\n# S4 method for signature 'nanotime,nanotime'\nunion(x, y)\n\n# S4 method for signature 'nanotime,nanotime'\nsetdiff(x, y)\n</code></pre>"},{"location":"man/set_operations/#arguments","title":"Arguments","text":"<code>x</code>, <code>y</code>  a temporal type  <code>table</code> <code>nanoival</code>: used in <code>%in%</code>"},{"location":"man/set_operations/#details","title":"Details","text":"<p>Set operations between <code>nanoival</code> operands allow the construction of complex interval vectors (i.e.\u00a0a <code>nanoival</code> vector can specify any number of inclusions and exclusions of time). Set operations between <code>nanotime</code> and <code>nanoival</code> allow to subset time vectors with interval vectors. In addition to the generic set functions, the function <code>intersect.idx</code> is defined which returns the indices of the intersection, and the operator <code>%in%</code> is overloaded for <code>nanotime-nanoival</code> which returns a logical vector that indicates which elements belong to the interval vector.</p>"},{"location":"man/set_operations/#value","title":"Value","text":"<p><code>intersect</code>, <code>union</code>, <code>setdiff</code> return temporal types that are the result of the intersection. For instance, set operations on two <code>nanoival</code> return a <code>nanoival</code>, whereas intersection between a <code>nanoival</code> and a <code>nanotime</code> returns a <code>nanotime</code>. <code>intersect.idx</code> return a list of vectors representing the element indices that intersect and <code>setdiff.idx</code> returns a vector representing the element indices to be removed.</p>"},{"location":"man/set_operations/#examples","title":"Examples","text":"<pre><code>library(\"nanotime\")\n\n# a vector of 'nanotime' can be subsetted by a 'nanoival' which is equivalent to 'intersect':\none_second &lt;- 1e9\na &lt;- seq(nanotime(\"2012-12-12 12:12:12+00:00\"), length.out=10, by=one_second)\nidx &lt;- c(as.nanoival(\"-2012-12-12 12:12:10+00:00 -&gt; 2012-12-12 12:12:14+00:00-\"),\n         as.nanoival(\"+2012-12-12 12:12:18+00:00 -&gt; 2012-12-12 12:12:20+00:00+\"))\na[idx]\nintersect(a, idx)\n\n# 'nanoival' also has the set operations 'union', 'intersect', 'setdiff':\na &lt;- seq(nanotime(\"2012-12-12 12:12:12+00:00\"), length.out=10, by=one_second)\ni &lt;- as.nanoival(\"-2012-12-12 12:12:14+00:00 -&gt; 2012-12-12 12:12:18+00:00-\")\nsetdiff(a, i)\n\ni1 &lt;- as.nanoival(\"+2012-12-12 12:12:14+00:00 -&gt; 2012-12-12 12:12:17+00:00-\")\ni2 &lt;- as.nanoival(\"+2012-12-12 12:12:16+00:00 -&gt; 2012-12-12 12:12:18+00:00-\")\nunion(i1, i2)\n\n# 'intersect.idx' returns the indices of the intersection:\na &lt;- seq(nanotime(\"2012-12-12 12:12:12+00:00\"), length.out=10, by=one_second)\nidx &lt;- as.nanoival(\"+2012-12-12 12:12:14+00:00 -&gt; 2012-12-12 12:12:19+00:00+\")\nidx_intersect &lt;- intersect.idx(a, idx)\n\n# Intersection can be performed using these indices:\na[idx_intersect$x]\n\n# which is equivalent to:\na[idx]\n\n# The logical vector indicating intersection can be obtained like this:\na %in% idx\n</code></pre>"},{"location":"man/sort-nanoival-method/","title":"Sorting or Ordering Vectors","text":""},{"location":"man/sort-nanoival-method/#description","title":"Description","text":"<p>Sort (or order) a vector of <code>nanoival</code> into ascending or descending order</p>"},{"location":"man/sort-nanoival-method/#usage","title":"Usage","text":"<pre><code>## S4 method for signature 'nanoival'\nsort(x, decreasing = FALSE)\n</code></pre>"},{"location":"man/sort-nanoival-method/#arguments","title":"Arguments","text":"<code>x</code>  a vector of <code>nanoival</code> <code>decreasing</code>  logical. Should the sort be increasing or decreasing?"},{"location":"man/sort-nanoival-method/#see-also","title":"See Also","text":"<p><code>is.unsorted</code></p>"}]}